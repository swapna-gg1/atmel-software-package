###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.1.245/W32 for ARM         22/Jul/2020  11:01:12
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode                    
#    Endian                   =  little
#    Source file              =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\extram\ddram.c
#    Command line             =
#        -f C:\Users\c40450\AppData\Local\Temp\EW82F5.tmp
#        (C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\extram\ddram.c
#        -D "SOFTPACK_VERSION=\"2.17\"" -D TRACE_LEVEL=5 -D VARIANT_SRAM -D
#        CONFIG_ARCH_ARMV7A -D CONFIG_ARCH_ARM -D CONFIG_SOC_SAMA5D2 -D
#        CONFIG_CHIP_SAMA5D27 -D CONFIG_PACKAGE_289PIN -D
#        CONFIG_BOARD_SAMA5D2_GENERIC -D CONFIG_HAVE_AIC5 -D
#        CONFIG_HAVE_FLEXCOM -D CONFIG_HAVE_PIO4 -D CONFIG_HAVE_PIO4_SECURE -D
#        CONFIG_HAVE_NFC -D CONFIG_HAVE_PIT -D CONFIG_HAVE_SMC -D
#        CONFIG_HAVE_SMC_SCRAMBLING -D CONFIG_HAVE_GMAC_QUEUES -D
#        CONFIG_HAVE_MPDDRC -D CONFIG_HAVE_MPDDRC_DATA_PATH -D
#        CONFIG_HAVE_MPDDRC_IO_CALIBRATION -D CONFIG_HAVE_MPDDRC_DDR2 -D
#        CONFIG_HAVE_MPDDRC_LPDDR2 -D CONFIG_HAVE_MPDDRC_DDR3 -D
#        CONFIG_HAVE_MPDDRC_LPDDR3 -D CONFIG_HAVE_ADC_SETTLING_TIME -D
#        CONFIG_HAVE_ADC_DIFF_INPUT -D CONFIG_HAVE_ADC_SEQ_R2 -D
#        CONFIG_HAVE_PMC_FAST_STARTUP -D CONFIG_HAVE_PMC_GENERATED_CLOCKS -D
#        CONFIG_HAVE_PMC_AUDIO_CLOCK -D CONFIG_HAVE_PMC_PLLADIV2 -D
#        CONFIG_HAVE_PMC_H32MXDIV -D CONFIG_HAVE_PMC_UPLL_BIAS -D
#        CONFIG_HAVE_SCKC -D CONFIG_HAVE_PWMC_DMA -D
#        CONFIG_HAVE_PWMC_SPREAD_SPECTRUM -D CONFIG_HAVE_PWMC_EXTERNAL_TRIGGER
#        -D CONFIG_HAVE_PWMC_FAULT_PROT_HIZ -D CONFIG_HAVE_PWMC_STEPPER_MOTOR
#        -D CONFIG_HAVE_PWMC_CMP_UNIT -D CONFIG_HAVE_PWMC_SYNC_MODE -D
#        CONFIG_HAVE_PWMC_OOV -D CONFIG_HAVE_PWMC_FMODE -D CONFIG_HAVE_PWMC_WP
#        -D CONFIG_HAVE_PWMC_DTIME -D CONFIG_HAVE_PWMC_ELINE -D
#        CONFIG_TIMER_POLLING -D CONFIG_HAVE_SFRBU -D CONFIG_HAVE_L2CC -D
#        CONFIG_HAVE_SAIC -D CONFIG_HAVE_XDMAC -D
#        CONFIG_HAVE_XDMAC_DATA_WIDTH_DWORD -D CONFIG_HAVE_SECUMOD -D
#        CONFIG_HAVE_SFC -D CONFIG_HAVE_PWMC -D CONFIG_HAVE_SECURE_MATRIX -D
#        CONFIG_HAVE_DDR2_MT47H128M8 -D CONFIG_HAVE_DDR2_MT47H64M16 -D
#        CONFIG_HAVE_DDR2_MT47H128M16 -D CONFIG_HAVE_DDR2_W971GG6SB -D
#        CONFIG_HAVE_DDR2_W972GG6KB -D CONFIG_HAVE_DDR2_W9712G6KB -D
#        CONFIG_HAVE_DDR2_W9751G6KB -D CONFIG_HAVE_LPDDR2_MT42L128M16 -D
#        CONFIG_HAVE_LPDDR2_AD220032D -D CONFIG_HAVE_LPDDR2_AD210032D -D
#        CONFIG_HAVE_DDR3_MT41K128M16 -D CONFIG_HAVE_LPDDR3_EDF8164A3MA -D
#        CONFIG_HAVE_RSTC_CONFIGURABLE_USER_RESET -D CONFIG_HAVE_TC_FAULT_MODE
#        -D CONFIG_HAVE_TC_DMA_MODE -D CONFIG_HAVE_RTC_CALIBRATION -D
#        CONFIG_HAVE_RTC_MODE_PERSIAN -D CONFIG_HAVE_RTC_MODE_UTC -D
#        CONFIG_HAVE_RTC_TAMPER -D CONFIG_HAVE_SHDWC -D CONFIG_HAVE_MMU -D
#        CONFIG_HAVE_L1CACHE -D CONFIG_HAVE_L2CACHE -D CONFIG_HAVE_UART -D
#        CONFIG_HAVE_SERIALD_UART -D CONFIG_HAVE_USART -D
#        CONFIG_HAVE_USART_FIFO -D CONFIG_HAVE_SERIALD_USART --preprocess
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\flash_loaders\applets\extram\build\sama5d2-generic\sram\List
#        -lC
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\flash_loaders\applets\extram\build\sama5d2-generic\sram\List
#        --diag_suppress Pa050 -o
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\flash_loaders\applets\extram\build\sama5d2-generic\sram\Obj
#        --debug --endian=little --cpu=Cortex-A5 -e --fpu=VFPv4_D16
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\flash_loaders\applets\extram\..\..\..\flash_loaders\applets\common\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\flash_loaders\applets\extram\..\..\..\flash_loaders\applets\common\framework2\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\flash_loaders\applets\extram\..\..\..\arch\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\flash_loaders\applets\extram\..\..\..\utils\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\flash_loaders\applets\extram\..\..\..\target\common\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\flash_loaders\applets\extram\..\..\..\target\sama5d2\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\flash_loaders\applets\extram\..\..\..\drivers\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\flash_loaders\applets\extram\..\..\..\lib\
#        --section .text=SOFTPACK --cpu_mode arm -Oh)
#    Locale                   =  C
#    List file                =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\flash_loaders\applets\extram\build\sama5d2-generic\sram\List\ddram.lst
#    Object file              =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\flash_loaders\applets\extram\build\sama5d2-generic\sram\Obj\ddram.o
#    Runtime model:              
#      __SystemLibrary        =  DLib
#      __dlib_file_descriptor =  0
#      __dlib_version         =  6
#      __iar_require _Printf     
#
###############################################################################

C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\extram\ddram.c
      1          /* ----------------------------------------------------------------------------
      2           *         SAM Software Package License
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2015, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          /*------------------------------------------------------------------------------
     31           *        Header
     32           *----------------------------------------------------------------------------*/
     33          
     34          #include "chip.h"
     35          #include "trace.h"
     36          
     37          #include "extram/ddram.h"
     38          
     39          #include "peripherals/matrix.h"
     40          #include "extram/mpddrc.h"
     41          #include "peripherals/pmc.h"
     42          
     43          #include "mm/l1cache.h"
     44          
     45          #include <assert.h>
     46          #include <string.h>
     47          
     48          /*------------------------------------------------------------------------------
     49           *        Macro
     50           *----------------------------------------------------------------------------*/
     51          
     52          #ifndef MAX
     53          #define MAX(x, y) (((x) > (y)) ? (x) : (y))
     54          #endif
     55          
     56          /* Convert nanoseconds to clock cycles for given master clock in MHz */
     57          #define NS2CYCLES(ns, clk) ((((ns) * (clk)) + 999) / 1000)
     58          
     59          #define TZQIO_CYCLES(mck) (NS2CYCLES(MPDDRC_TZQIO_DELAY, mck) + 1)
     60          
     61          /* For compatibility with older DDR controller IP */
     62          #ifndef MPDDRC_CR_NDQS_DISABLED
     63          #define MPDDRC_CR_NDQS_DISABLED 0
     64          #endif
     65          #ifndef MPDDRC_CR_UNAL_SUPPORTED
     66          #define MPDDRC_CR_UNAL_SUPPORTED 0
     67          #endif
     68          
     69          /*------------------------------------------------------------------------------
     70           *        Exported Functions
     71           *----------------------------------------------------------------------------*/
     72          
     73          #ifdef CONFIG_HAVE_MPDDRC_DDR3
     74          
     75          #ifdef CONFIG_HAVE_DDR3_MT41K128M16

   \                                 In section SOFTPACK, align 4, keep-with-next
     76          static void _init_mt41k128m16(struct _mpddrc_desc* desc, uint8_t bus_width)
     77          {
   \                     _init_mt41k128m16:
   \        0x0   0xE92D'43F8        PUSH     {R3-R9,LR}
   \        0x4   0xE1A0'4000        MOV      R4,R0
   \        0x8   0xE1A0'7001        MOV      R7,R1
     78          	uint32_t mck = pmc_get_master_clock() / 1000000;
   \        0xC   0x....'....        BL       pmc_get_master_clock
   \       0x10   0x....'....        LDR      R2,??ddram_init_descriptor_1  ;; 0x8637bd06
   \       0x14   0xE081'2290        UMULL    R2,R1,R0,R2
     79          
     80          	desc->type = MPDDRC_TYPE_DDR3;
     81          
     82          #ifdef MPDDRC_MD_DBW_DBW_32_BITS
     83          	if (bus_width == 16) {
   \       0x18   0xE357'0010        CMP      R7,#+16
   \       0x1C   0xE3A0'0002        MOV      R0,#+2
     84          #ifdef MPDDRC_MD_DBW_DBW_16_BITS
     85          		desc->mode = MPDDRC_MD_MD_DDR3_SDRAM
     86          		           | MPDDRC_MD_DBW_DBW_16_BITS;
     87          #endif
     88          	} else {
     89          		desc->mode = MPDDRC_MD_MD_DDR3_SDRAM
     90          		           | MPDDRC_MD_DBW_DBW_32_BITS;
     91          	}
     92          #else
     93          	desc->mode = MPDDRC_MD_MD_DDR3_SDRAM
     94          	           | MPDDRC_MD_DBW_DBW_16_BITS;
     95          #endif
     96          
     97          #ifdef CONFIG_HAVE_MPDDRC_DATA_PATH
     98          	desc->data_path = MPDDRC_RD_DATA_PATH_SHIFT_SAMPLING_SHIFT_TWO_CYCLES;
     99          #endif
    100          
    101          	desc->control = MPDDRC_CR_NC_DDR_10_COL_BITS
    102          	              | MPDDRC_CR_NR_14_ROW_BITS
    103          	              | MPDDRC_CR_CAS_DDR_CAS5
    104          	              | MPDDRC_CR_DIS_DLL
    105          	              | MPDDRC_CR_NB_8_BANKS
    106          	              | MPDDRC_CR_DIC_DS_DDR3_RZQ7
    107          	              | MPDDRC_CR_DECOD_INTERLEAVED
    108          	              | MPDDRC_CR_UNAL_SUPPORTED;
    109          
    110          #ifdef CONFIG_HAVE_MPDDRC_IO_CALIBRATION
    111          	desc->io_calibr = MPDDRC_IO_CALIBR_TZQIO(TZQIO_CYCLES(mck));
    112          #ifdef MPDDRC_IO_CALIBR_RDIV
    113          	desc->io_calibr |= MPDDRC_IO_CALIBR_RDIV(4);
   \       0x20   0xE300'73E7        MOVW     R7,#+999
   \       0x24   0xE1A0'59A1        LSR      R5,R1,#+19
   \       0x28   0xE3A0'1F96        MOV      R1,#+600
   \       0x2C   0xE102'7581        SMLABB   R2,R1,R5,R7
   \       0x30   0xE5C4'0000        STRB     R0,[R4, #+0]
   \       0x34   0x03A0'3014        MOVEQ    R3,#+20
   \       0x38   0x....'....        LDR      R12,??DataTable4  ;; 0x83126e98
   \       0x3C   0x0584'300C        STREQ    R3,[R4, #+12]
   \       0x40   0xE083'CC92        UMULL    R12,R3,R2,R12
   \       0x44   0xE584'0008        STR      R0,[R4, #+8]
   \       0x48   0x....'....        LDR      R0,??DataTable4_1  ;; 0xd0035d
   \       0x4C   0xE3A0'E001        MOV      LR,#+1
   \       0x50   0xE584'0010        STR      R0,[R4, #+16]
   \       0x54   0xE08E'E4A3        ADD      LR,LR,R3, LSR #+9
   \       0x58   0xE3A0'0C7F        MOV      R0,#+32512
   \       0x5C   0xE3A0'6004        MOV      R6,#+4
    114          #endif
    115          #endif
    116          
    117          	/* timings */
    118          
    119          	memset(&desc->timings, 0, sizeof(desc->timings));
   \       0x60   0xE3A0'1011        MOV      R1,#+17
   \       0x64   0xE000'040E        AND      R0,R0,LR, LSL #+8
   \       0x68   0x1584'600C        STRNE    R6,[R4, #+12]
   \       0x6C   0xE380'8004        ORR      R8,R0,#0x4
   \       0x70   0xE284'0014        ADD      R0,R4,#+20
   \       0x74   0xE584'8004        STR      R8,[R4, #+4]
   \       0x78   0x....'....        BL       __aeabi_memclr4
    120          	desc->timings.tras  = NS2CYCLES(35, mck);          // 35ns
   \       0x7C   0xE3A0'0023        MOV      R0,#+35
   \       0x80   0x....'....        LDR      R3,??DataTable4  ;; 0x83126e98
   \       0x84   0xE101'7580        SMLABB   R1,R0,R5,R7
    121          	desc->timings.trcd  = NS2CYCLES(14, mck);          // 13.75ns
   \       0x88   0xE065'C185        RSB      R12,R5,R5, LSL #+3
   \       0x8C   0xE082'3391        UMULL    R3,R2,R1,R3
    122          	desc->timings.twr   = NS2CYCLES(15, mck);          // 15ns
   \       0x90   0xE065'1205        RSB      R1,R5,R5, LSL #+4
   \       0x94   0x....'....        LDR      R3,??DataTable4  ;; 0x83126e98
   \       0x98   0xE1A0'24A2        LSR      R2,R2,#+9
   \       0x9C   0xE087'1001        ADD      R1,R7,R1
   \       0xA0   0xE5C4'201B        STRB     R2,[R4, #+27]
   \       0xA4   0xE082'3391        UMULL    R3,R2,R1,R3
    123          	desc->timings.trc   = NS2CYCLES(49, mck);          // 48.75ns
    124          	desc->timings.trp   = NS2CYCLES(14, mck);          // 13.75ns
    125          	desc->timings.trrd  = MAX(NS2CYCLES(6, mck), 4);   // max(6ns, 4ck)
   \       0xA8   0xE085'1085        ADD      R1,R5,R5, LSL #+1
   \       0xAC   0xE1A0'24A2        LSR      R2,R2,#+9
   \       0xB0   0x....'....        LDR      R3,??DataTable4  ;; 0x83126e98
   \       0xB4   0xE087'1081        ADD      R1,R7,R1, LSL #+1
   \       0xB8   0xE5C4'2019        STRB     R2,[R4, #+25]
   \       0xBC   0xE082'3391        UMULL    R3,R2,R1,R3
   \       0xC0   0xE087'C08C        ADD      R12,R7,R12, LSL #+1
   \       0xC4   0x....'....        LDR      R8,??DataTable4  ;; 0x83126e98
   \       0xC8   0xE08E'889C        UMULL    R8,LR,R12,R8
   \       0xCC   0xE3A0'C031        MOV      R12,#+49
   \       0xD0   0xE109'758C        SMLABB   R9,R12,R5,R7
   \       0xD4   0x....'....        LDR      R8,??DataTable4  ;; 0x83126e98
   \       0xD8   0xE1A0'14A2        LSR      R1,R2,#+9
   \       0xDC   0xE1A0'04AE        LSR      R0,LR,#+9
   \       0xE0   0xE08E'8899        UMULL    R8,LR,R9,R8
   \       0xE4   0xE351'0004        CMP      R1,#+4
   \       0xE8   0x93A0'1004        MOVLS    R1,#+4
    126          	desc->timings.twtr  = MAX(NS2CYCLES(8, mck), 4);   // max(7.5ns, 4ck)
   \       0xEC   0xE087'C185        ADD      R12,R7,R5, LSL #+3
   \       0xF0   0xE1A0'E4AE        LSR      LR,LR,#+9
   \       0xF4   0xE5C4'001A        STRB     R0,[R4, #+26]
   \       0xF8   0xE5C4'E018        STRB     LR,[R4, #+24]
   \       0xFC   0xE5C4'0017        STRB     R0,[R4, #+23]
   \      0x100   0xE5C4'1016        STRB     R1,[R4, #+22]
   \      0x104   0x....'....        LDR      LR,??DataTable4  ;; 0x83126e98
   \      0x108   0xE081'EE9C        UMULL    LR,R1,R12,LR
    127          	desc->timings.tmrd  = 4;                           // min 4ck
    128          	desc->timings.trfc  = NS2CYCLES(160, mck);         // 160ns
   \      0x10C   0xE085'2105        ADD      R2,R5,R5, LSL #+2
   \      0x110   0xE1A0'14A1        LSR      R1,R1,#+9
   \      0x114   0xE5C4'6014        STRB     R6,[R4, #+20]
   \      0x118   0xE087'2282        ADD      R2,R7,R2, LSL #+5
   \      0x11C   0xE351'0004        CMP      R1,#+4
   \      0x120   0x....'....        LDR      R12,??DataTable4  ;; 0x83126e98
   \      0x124   0xE083'CC92        UMULL    R12,R3,R2,R12
    129          	desc->timings.txsnr = NS2CYCLES(170, mck);         // tRFC+10ns
   \      0x128   0xE3A0'E0AA        MOV      LR,#+170
   \      0x12C   0xE106'758E        SMLABB   R6,LR,R5,R7
   \      0x130   0x93A0'1004        MOVLS    R1,#+4
    130          	desc->timings.txp   = MAX(NS2CYCLES(14, mck), 10); // max(24ns, 10ck)
   \      0x134   0xE350'000B        CMP      R0,#+11
   \      0x138   0x....'....        LDR      R9,??DataTable4  ;; 0x83126e98
   \      0x13C   0xE088'9996        UMULL    R9,R8,R6,R9
   \      0x140   0x33A0'000A        MOVCC    R0,#+10
   \      0x144   0xE5C4'001C        STRB     R0,[R4, #+28]
    131          	desc->timings.trtp  = MAX(NS2CYCLES(8, mck), 4);   // mac(7.5ns, 4ck)
    132          	desc->timings.tfaw  = NS2CYCLES(40, mck);          // 40ns
   \      0x148   0xE085'0105        ADD      R0,R5,R5, LSL #+2
   \      0x14C   0xE5C4'1015        STRB     R1,[R4, #+21]
   \      0x150   0xE5C4'1021        STRB     R1,[R4, #+33]
   \      0x154   0xE087'0180        ADD      R0,R7,R0, LSL #+3
   \      0x158   0x....'....        LDR      R2,??DataTable4  ;; 0x83126e98
   \      0x15C   0xE081'2290        UMULL    R2,R1,R0,R2
   \      0x160   0xE1A0'34A3        LSR      R3,R3,#+9
   \      0x164   0xE5C4'301F        STRB     R3,[R4, #+31]
   \      0x168   0xE1A0'84A8        LSR      R8,R8,#+9
   \      0x16C   0xE1A0'14A1        LSR      R1,R1,#+9
    133          
    134          	desc->refresh_window = 64;
   \      0x170   0xE3A0'3040        MOV      R3,#+64
    135          	desc->refresh_cycles = 8192;
   \      0x174   0xE3A0'CD80        MOV      R12,#+8192
   \      0x178   0xE5C4'801E        STRB     R8,[R4, #+30]
   \      0x17C   0xE5C4'1020        STRB     R1,[R4, #+32]
   \      0x180   0xE584'3028        STR      R3,[R4, #+40]
   \      0x184   0xE584'C02C        STR      R12,[R4, #+44]
    136          }
   \      0x188   0xE8BD'83F1        POP      {R0,R4-R9,PC}    ;; return
    137          #endif /* CONFIG_HAVE_DDR3_MT41K128M16 */
    138          
    139          #endif /* CONFIG_HAVE_MPDDRC_DDR3 */
    140          
    141          #ifdef CONFIG_HAVE_MPDDRC_LPDDR3
    142          
    143          #ifdef CONFIG_HAVE_LPDDR3_EDF8164A3MA
    144          static void _init_edf8164a3ma(struct _mpddrc_desc* desc)
    145          {
    146          	uint32_t mck = pmc_get_master_clock() / 1000000;
    147          
    148          	desc->type = MPDDRC_TYPE_LPDDR3;
    149          
    150          	desc->mode = MPDDRC_MD_MD_LPDDR3_SDRAM
    151          	           | MPDDRC_MD_DBW_DBW_32_BITS;
    152          
    153          #ifdef CONFIG_HAVE_MPDDRC_DATA_PATH
    154          	desc->data_path = MPDDRC_RD_DATA_PATH_SHIFT_SAMPLING_SHIFT_TWO_CYCLES;
    155          #endif
    156          
    157          	desc->control = MPDDRC_CR_NC_DDR_10_COL_BITS
    158          	              | MPDDRC_CR_NR_14_ROW_BITS
    159          	              | MPDDRC_CR_CAS_DDR_CAS3
    160          	              | MPDDRC_CR_NB_8_BANKS
    161          	              | MPDDRC_CR_DIC_DS_DDR3_RZQ6
    162          	              | MPDDRC_CR_DECOD_SEQUENTIAL
    163          	              | MPDDRC_CR_UNAL_SUPPORTED;
    164          
    165          #ifdef CONFIG_HAVE_MPDDRC_IO_CALIBRATION
    166          	desc->io_calibr = 0;
    167          #ifdef MPDDRC_IO_CALIBR_RDIV
    168          	desc->io_calibr |= MPDDRC_IO_CALIBR_RDIV(4);
    169          #endif
    170          #endif
    171          
    172          	/* timings */
    173          
    174          	memset(&desc->timings, 0, sizeof(desc->timings));
    175          	desc->timings.tras  = NS2CYCLES(42, mck);          // 42ns
    176          	desc->timings.trcd  = MAX(NS2CYCLES(18, mck), 3);  // max(18ns, 3ck)
    177          	desc->timings.twr   = MAX(NS2CYCLES(15, mck), 3);  // max(15ns, 3ck)
    178          	desc->timings.trc   = NS2CYCLES(55, mck);          // 55ns
    179          	desc->timings.trp   = MAX(NS2CYCLES(8, mck), 4);   // max(7.5ns, 4ck)
    180          	desc->timings.trrd  = MAX(NS2CYCLES(10, mck), 2);  // max(10ns, 2ck)
    181          	desc->timings.twtr  = MAX(NS2CYCLES(8, mck), 4);   // max(7.5ns, 4ck)
    182          	desc->timings.tmrd  = MAX(NS2CYCLES(14, mck), 10); // max(14ns, 10ck)
    183          	desc->timings.trfc  = NS2CYCLES(130, mck);         // 130ns
    184          	desc->timings.txsnr = NS2CYCLES(140, mck);         // 140ns
    185          	desc->timings.txp   = MAX(NS2CYCLES(8, mck), 2);   // max(7.5ns, 2ck)
    186          	desc->timings.trtp  = MAX(NS2CYCLES(8, mck), 4);   // max(7.5ns, 4ck)
    187          	desc->timings.tfaw  = MAX(NS2CYCLES(50, mck), 8);  // max(50ns, 8ck)
    188          
    189          	desc->refresh_window = 32;
    190          	desc->refresh_cycles = 8192;
    191          }
    192          #endif /* CONFIG_HAVE_LPDDR3_EDF8164A3MA */
    193          
    194          #endif /* CONFIG_HAVE_MPDDRC_LPDDR3 */
    195          
    196          #ifdef CONFIG_HAVE_MPDDRC_DDR2
    197          
    198          #ifdef CONFIG_HAVE_DDR2_W971GG6SB
    199          /* Configuring the Multiport DDR-SDRAM Controller for Winbond W971GG6SB25I */
    200          static void _init_w971gg6sb(struct _mpddrc_desc* desc)
    201          {
    202          	/* SAMA5D2's General Clock Block Diagram shows that DDRCK is 2 x MCK / 2 */
    203          	uint32_t mck = pmc_get_master_clock() / 1000000;
    204          
    205          	/* Verify that tCK ranges from 5 to 8 ns */
    206          	assert(mck >= 125 && mck <= 200);
    207          
    208          	desc->type = MPDDRC_TYPE_DDR2;
    209          
    210          	desc->mode = MPDDRC_MD_MD_DDR2_SDRAM
    211          	           | MPDDRC_MD_DBW_DBW_16_BITS;
    212          
    213          #ifdef CONFIG_HAVE_MPDDRC_DATA_PATH
    214          	desc->data_path = MPDDRC_RD_DATA_PATH_SHIFT_SAMPLING_SHIFT_ONE_CYCLE;
    215          #endif
    216          
    217          	/* Refer to the description of memory address signals A[12:0] */
    218          	desc->control = MPDDRC_CR_NR_13_ROW_BITS
    219          	              | MPDDRC_CR_NC_DDR_10_COL_BITS
    220          	              | MPDDRC_CR_CAS_DDR_CAS3
    221          	              | MPDDRC_CR_DIC_DS_DDR2_WEAKSTRENGTH
    222          	              | MPDDRC_CR_NB_8_BANKS
    223          	              | MPDDRC_CR_DECOD_INTERLEAVED
    224          	              | MPDDRC_CR_UNAL_SUPPORTED;
    225          
    226          #ifdef CONFIG_HAVE_MPDDRC_IO_CALIBRATION
    227          	desc->io_calibr = MPDDRC_IO_CALIBR_TZQIO(TZQIO_CYCLES(mck));
    228          #ifdef MPDDRC_IO_CALIBR_RDIV
    229          	/* Serial impedance line: 52 Ohms */
    230          	desc->io_calibr |= MPDDRC_IO_CALIBR_RDIV(4);
    231          #endif
    232          #endif
    233          
    234          	/* timings */
    235          	memset(&desc->timings, 0, sizeof(desc->timings));
    236          	desc->timings.tras   = NS2CYCLES(40, mck);  /* 40 ns */
    237          	desc->timings.trcd   = NS2CYCLES(13, mck);  /* 12.5 ns */
    238          	desc->timings.twr    = NS2CYCLES(15, mck);  /* 15 ns */
    239          	desc->timings.trc    = NS2CYCLES(53, mck);  /* 52.5 ns */
    240          	desc->timings.trp    = NS2CYCLES(13, mck);  /* 12.5 ns */
    241          	/* Satisfy both tRRD >= 10 ns and tRRD >= 2 nCK */
    242          	desc->timings.trrd   = MAX(NS2CYCLES(10, mck), 2);
    243          	/* Satisfy both tWTR >= 7.5 ns and tWTR >= 2 nCK */
    244          	desc->timings.twtr   = MAX(NS2CYCLES(8, mck), 2);
    245          	desc->timings.tmrd   = 2;                   /* 2 nCK */
    246          	desc->timings.trfc   = NS2CYCLES(128, mck); /* 127.5 ns */
    247          	desc->timings.txsnr  = NS2CYCLES(138, mck); /* tRFC + 10 ns */
    248          	desc->timings.txsrd  = 200;                 /* 200 nCK */
    249          	desc->timings.txp    = 2;                   /* 2 nCK */
    250          	desc->timings.txard  = 2;                   /* 2 nCK */
    251          	desc->timings.txards = 8;                   /* 8 - AL = 8 nCK */
    252          	desc->timings.trpa   = 1 + desc->timings.trp; /* tRPall = tRP + 1 nCK */
    253          	/* MPDDRC implements tRTP >= AL + BL/2
    254          	 * Satisfy tRTP >= tRTP(min) i.e. tRTP >= 7.5 ns */
    255          	desc->timings.trtp   = NS2CYCLES(8, mck);
    256          	desc->timings.tfaw   = NS2CYCLES(45, mck);  /* 45 ns */
    257          
    258          	/* Rolling refresh window: 64 ms */
    259          	desc->refresh_window = 64;
    260          	/* Periodic auto-refresh interval: tREFI = 7.8 usec
    261          	 * Within a refresh window at least 8205 REFRESH commands shall be issued */
    262          	desc->refresh_cycles = 8205;
    263          }
    264          #endif /* CONFIG_HAVE_DDR2_W971GG6SB */
    265          
    266          #ifdef CONFIG_HAVE_DDR2_W972GG6KB
    267          /* Configuring the Multiport DDR-SDRAM Controller for Winbond W972GG6KB-25 */

   \                                 In section SOFTPACK, align 4, keep-with-next
    268          static void _init_w972gg6kb(struct _mpddrc_desc* desc, uint8_t bus_width)
    269          {
   \                     _init_w972gg6kb:
   \        0x0   0xE92D'47F0        PUSH     {R4-R10,LR}
   \        0x4   0xE1A0'5000        MOV      R5,R0
   \        0x8   0xE1A0'6001        MOV      R6,R1
    270          	/* The General Clock Distribution Block Diagram shows that DDRCK is MCK_2X
    271          	 * divided by 2 */
    272          	uint32_t mck = pmc_get_master_clock() / 1000000;
   \        0xC   0x....'....        BL       pmc_get_master_clock
   \       0x10   0x....'....        LDR      R2,??ddram_init_descriptor_1  ;; 0x8637bd06
   \       0x14   0xE081'2290        UMULL    R2,R1,R0,R2
   \       0x18   0xE1A0'49A1        LSR      R4,R1,#+19
    273          
    274          	/* Verify that tCK ranges from 5 to 8 ns */
    275          	assert(mck >= 125 && mck <= 200);
   \       0x1C   0xE244'007D        SUB      R0,R4,#+125
   \       0x20   0xE350'004C        CMP      R0,#+76
   \       0x24   0x3A00'0004        BCC      ??_init_w972gg6kb_0
   \       0x28   0xE300'2113        MOVW     R2,#+275
   \       0x2C   0x....'....        LDR      R1,??DataTable6
   \       0x30   0x....'....        LDR      R0,??DataTable6_1
   \       0x34   0x....'....        BL       __aeabi_assert
   \       0x38   0x....'....        BL       __iar_EmptyStepPoint
    276          
    277          	desc->type = MPDDRC_TYPE_DDR2;
    278          #ifdef MPDDRC_MD_DBW_DBW_32_BITS
    279          	if (bus_width == 16) {
    280          #ifdef MPDDRC_MD_DBW_DBW_16_BITS
    281          		desc->mode = MPDDRC_MD_MD_DDR2_SDRAM
    282          		           | MPDDRC_MD_DBW_DBW_16_BITS;
    283          #endif
    284          	} else {
    285          		desc->mode = MPDDRC_MD_MD_DDR2_SDRAM
    286          		           | MPDDRC_MD_DBW_DBW_32_BITS;
    287          	}
    288          #else
    289          	desc->mode = MPDDRC_MD_MD_DDR2_SDRAM
    290          	           | MPDDRC_MD_DBW_DBW_16_BITS;
    291          #endif
    292          
    293          #ifdef CONFIG_HAVE_MPDDRC_DATA_PATH
    294          	desc->data_path = mck > 170
    295          	  ? MPDDRC_RD_DATA_PATH_SHIFT_SAMPLING_SHIFT_TWO_CYCLES
    296          	  : MPDDRC_RD_DATA_PATH_SHIFT_SAMPLING_SHIFT_ONE_CYCLE;
    297          #endif
    298          
    299          	/* Refer to the description of memory address signals A[13:0] */
    300          	desc->control = MPDDRC_CR_NR_14_ROW_BITS
    301          	              | MPDDRC_CR_NC_DDR_10_COL_BITS
    302          	              | MPDDRC_CR_CAS_DDR_CAS3
    303          	              | MPDDRC_CR_DIC_DS_DDR2_WEAKSTRENGTH
    304          	              | MPDDRC_CR_NB_8_BANKS
    305          	              | MPDDRC_CR_DECOD_INTERLEAVED
    306          	              | MPDDRC_CR_UNAL_SUPPORTED;
    307          
    308          #ifdef CONFIG_HAVE_MPDDRC_IO_CALIBRATION
    309          	desc->io_calibr = MPDDRC_IO_CALIBR_TZQIO(TZQIO_CYCLES(mck));
    310          #ifdef MPDDRC_IO_CALIBR_RDIV
    311          	/* Serial impedance line: 52 Ohms */
    312          	desc->io_calibr |= MPDDRC_IO_CALIBR_RDIV(4);
    313          #endif
    314          #ifdef MPDDRC_IO_CALIBR_EN_CALIB_ENABLE_CALIBRATION
    315          	desc->io_calibr |= MPDDRC_IO_CALIBR_EN_CALIB_ENABLE_CALIBRATION;
    316          #endif
    317          #ifdef MPDDRC_IO_CALIBR_CK_F_RANGE
    318          	desc->io_calibr |= MPDDRC_IO_CALIBR_CK_F_RANGE(7);
    319          #endif
    320          #endif
    321          
    322          	/* timings */
    323          	memset(&desc->timings, 0, sizeof(desc->timings));
    324          	desc->timings.tras   = NS2CYCLES(45, mck);  /* 45 ns */
    325          	desc->timings.trcd   = NS2CYCLES(13, mck);  /* 12.5 ns */
    326          	desc->timings.twr    = NS2CYCLES(15, mck);  /* 15 ns */
   \                     ??_init_w972gg6kb_0:
   \       0x3C   0xE064'9204        RSB      R9,R4,R4, LSL #+4
   \       0x40   0xE356'0010        CMP      R6,#+16
   \       0x44   0xE3A0'0000        MOV      R0,#+0
   \       0x48   0xE300'63E7        MOVW     R6,#+999
   \       0x4C   0xE086'9009        ADD      R9,R6,R9
   \       0x50   0xE5C5'0000        STRB     R0,[R5, #+0]
   \       0x54   0x03A0'1016        MOVEQ    R1,#+22
   \       0x58   0x13A0'0006        MOVNE    R0,#+6
   \       0x5C   0x0585'100C        STREQ    R1,[R5, #+12]
   \       0x60   0x1585'000C        STRNE    R0,[R5, #+12]
   \       0x64   0xE3A0'1F96        MOV      R1,#+600
   \       0x68   0xE354'00AB        CMP      R4,#+171
   \       0x6C   0xE102'6481        SMLABB   R2,R1,R4,R6
   \       0x70   0x....'....        LDR      R12,??DataTable4  ;; 0x83126e98
   \       0x74   0x23A0'0002        MOVCS    R0,#+2
   \       0x78   0xE3A0'E001        MOV      LR,#+1
   \       0x7C   0xE083'CC92        UMULL    R12,R3,R2,R12
   \       0x80   0x33A0'0001        MOVCC    R0,#+1
   \       0x84   0xE585'0008        STR      R0,[R5, #+8]
   \       0x88   0x....'....        LDR      R0,??DataTable6_2  ;; 0xd0013d
   \       0x8C   0xE585'0010        STR      R0,[R5, #+16]
   \       0x90   0xE08E'E4A3        ADD      LR,LR,R3, LSR #+9
   \       0x94   0xE3A0'0C7F        MOV      R0,#+32512
   \       0x98   0xE3A0'1011        MOV      R1,#+17
   \       0x9C   0x....'....        LDR      R8,??DataTable4  ;; 0x83126e98
   \       0xA0   0xE000'040E        AND      R0,R0,LR, LSL #+8
    327          	desc->timings.trc    = NS2CYCLES(58, mck);  /* 57.5 ns */
    328          	desc->timings.trp    = NS2CYCLES(13, mck);  /* 12.5 ns */
    329          	/* Satisfy both tRRD >= 10 ns and tRRD >= 2 nCK */
    330          	desc->timings.trrd   = MAX(NS2CYCLES(10, mck), 2);
    331          	/* Satisfy both tWTR >= 7.5 ns and tWTR >= 2 nCK */
    332          	desc->timings.twtr   = MAX(NS2CYCLES(8, mck), 2);
    333          	desc->timings.tmrd   = 2;                   /* 2 nCK */
    334          	desc->timings.trfc   = NS2CYCLES(195, mck); /* 195 ns */
    335          	desc->timings.txsnr  = NS2CYCLES(205, mck); /* tRFC + 10 ns */
   \       0xA4   0x....'....        LDR      R10,??DataTable4  ;; 0x83126e98
   \       0xA8   0xE380'7014        ORR      R7,R0,#0x14
   \       0xAC   0xE285'0014        ADD      R0,R5,#+20
   \       0xB0   0xE585'7004        STR      R7,[R5, #+4]
   \       0xB4   0x....'....        BL       __aeabi_memclr4
   \       0xB8   0xE3A0'C00D        MOV      R12,#+13
   \       0xBC   0xE3A0'002D        MOV      R0,#+45
   \       0xC0   0xE101'6480        SMLABB   R1,R0,R4,R6
   \       0xC4   0x....'....        LDR      R3,??DataTable4  ;; 0x83126e98
   \       0xC8   0xE10E'648C        SMLABB   LR,R12,R4,R6
   \       0xCC   0xE3A0'C03A        MOV      R12,#+58
   \       0xD0   0xE082'3391        UMULL    R3,R2,R1,R3
   \       0xD4   0xE087'889E        UMULL    R8,R7,LR,R8
   \       0xD8   0x....'....        LDR      R3,??DataTable4  ;; 0x83126e98
   \       0xDC   0xE10E'648C        SMLABB   LR,R12,R4,R6
   \       0xE0   0xE086'C184        ADD      R12,R6,R4, LSL #+3
   \       0xE4   0x....'....        LDR      R8,??DataTable4  ;; 0x83126e98
   \       0xE8   0xE1A0'14A7        LSR      R1,R7,#+9
   \       0xEC   0xE1A0'04A2        LSR      R0,R2,#+9
   \       0xF0   0xE082'3399        UMULL    R3,R2,R9,R3
   \       0xF4   0x....'....        LDR      R9,??DataTable4  ;; 0x83126e98
   \       0xF8   0xE087'889E        UMULL    R8,R7,LR,R8
   \       0xFC   0x....'....        LDR      LR,??DataTable4  ;; 0x83126e98
   \      0x100   0xE1A0'24A2        LSR      R2,R2,#+9
   \      0x104   0xE5C5'101A        STRB     R1,[R5, #+26]
   \      0x108   0xE5C5'2019        STRB     R2,[R5, #+25]
   \      0x10C   0xE084'2104        ADD      R2,R4,R4, LSL #+2
   \      0x110   0xE1A0'74A7        LSR      R7,R7,#+9
   \      0x114   0xE5C5'7018        STRB     R7,[R5, #+24]
   \      0x118   0xE086'2082        ADD      R2,R6,R2, LSL #+1
   \      0x11C   0xE5C5'1017        STRB     R1,[R5, #+23]
   \      0x120   0xE083'9992        UMULL    R9,R3,R2,R9
   \      0x124   0x....'....        LDR      R8,??DataTable4  ;; 0x83126e98
   \      0x128   0xE3A0'90CD        MOV      R9,#+205
   \      0x12C   0xE3A0'2002        MOV      R2,#+2
   \      0x130   0xE1A0'34A3        LSR      R3,R3,#+9
    336          	desc->timings.txsrd  = 200;                 /* 200 nCK */
    337          	desc->timings.txp    = 2;                   /* 2 nCK */
    338          	desc->timings.txard  = 2;                   /* 2 nCK */
    339          	desc->timings.txards = 8;                   /* 8 - AL = 8 nCK */
    340          	desc->timings.trpa   = 1 + NS2CYCLES(13, mck);  /* tRPall = tRP + 1 nCK */
    341          	/* MPDDRC implements tRTP >= AL + BL/2
    342          	 * Satisfy tRTP >= tRTP(min) i.e. tRTP >= 7.5 ns */
    343          	desc->timings.trtp   = NS2CYCLES(8, mck);
    344          	desc->timings.tfaw   = NS2CYCLES(45, mck);  /* 45 ns */
   \      0x134   0xE5C5'0020        STRB     R0,[R5, #+32]
   \      0x138   0xE353'0002        CMP      R3,#+2
   \      0x13C   0xE281'1001        ADD      R1,R1,#+1
   \      0x140   0x93A0'3002        MOVLS    R3,#+2
   \      0x144   0xE5C5'001B        STRB     R0,[R5, #+27]
   \      0x148   0xE5C5'3016        STRB     R3,[R5, #+22]
   \      0x14C   0xE083'EE9C        UMULL    LR,R3,R12,LR
   \      0x150   0xE5C5'1022        STRB     R1,[R5, #+34]
   \      0x154   0xE5C5'2014        STRB     R2,[R5, #+20]
   \      0x158   0xE1A0'34A3        LSR      R3,R3,#+9
   \      0x15C   0xE5C5'201C        STRB     R2,[R5, #+28]
   \      0x160   0xE353'0002        CMP      R3,#+2
   \      0x164   0xE5C5'2024        STRB     R2,[R5, #+36]
   \      0x168   0x81A0'C003        MOVHI    R12,R3
   \      0x16C   0xE3A0'2008        MOV      R2,#+8
   \      0x170   0x93A0'C002        MOVLS    R12,#+2
    345          
    346          	/* Rolling refresh window: 64 ms */
    347          	desc->refresh_window = 64;
   \      0x174   0xE3A0'0040        MOV      R0,#+64
   \      0x178   0xE5C5'C015        STRB     R12,[R5, #+21]
   \      0x17C   0xE3A0'C0C3        MOV      R12,#+195
    348          	/* Periodic auto-refresh interval: tREFI = 7.8 usec
    349          	 * Within a refresh window at least 8205 REFRESH commands shall be issued */
    350          	desc->refresh_cycles = 8205;
   \      0x180   0xE289'1D7D        ADD      R1,R9,#+8000
   \      0x184   0xE107'648C        SMLABB   R7,R12,R4,R6
   \      0x188   0xE5C5'2023        STRB     R2,[R5, #+35]
   \      0x18C   0xE104'6489        SMLABB   R4,R9,R4,R6
   \      0x190   0xE3A0'C0C8        MOV      R12,#+200
   \      0x194   0xE08E'8897        UMULL    R8,LR,R7,R8
   \      0x198   0xE5C5'C01D        STRB     R12,[R5, #+29]
   \      0x19C   0xE086'AA94        UMULL    R10,R6,R4,R10
   \      0x1A0   0xE5C5'3021        STRB     R3,[R5, #+33]
   \      0x1A4   0xE1A0'E4AE        LSR      LR,LR,#+9
   \      0x1A8   0xE585'0028        STR      R0,[R5, #+40]
   \      0x1AC   0xE1A0'64A6        LSR      R6,R6,#+9
   \      0x1B0   0xE5C5'E01F        STRB     LR,[R5, #+31]
   \      0x1B4   0xE5C5'601E        STRB     R6,[R5, #+30]
   \      0x1B8   0xE585'102C        STR      R1,[R5, #+44]
    351          }
   \      0x1BC   0xE8BD'87F0        POP      {R4-R10,PC}      ;; return
    352          #endif /* CONFIG_HAVE_DDR2_W972GG6KB */
    353          
    354          #ifdef CONFIG_HAVE_DDR2_W9712G6KB
    355          
    356          static void _init_w9712g6kb(struct _mpddrc_desc* desc)
    357          {
    358          	uint32_t mck = pmc_get_master_clock() / 1000000;
    359          
    360          	desc->type = MPDDRC_TYPE_DDR2;
    361          
    362          	desc->mode = MPDDRC_MD_MD_DDR2_SDRAM
    363          	           | MPDDRC_MD_DBW_DBW_16_BITS;
    364          
    365          #ifdef CONFIG_HAVE_MPDDRC_DATA_PATH
    366          	desc->data_path = MPDDRC_RD_DATA_PATH_SHIFT_SAMPLING_SHIFT_ONE_CYCLE;
    367          #endif
    368          
    369          	desc->control = MPDDRC_CR_NR_12_ROW_BITS
    370          	              | MPDDRC_CR_NC_DDR_9_COL_BITS
    371          	              | MPDDRC_CR_CAS_DDR_CAS3
    372          	              | MPDDRC_CR_DIC_DS_DDR2_WEAKSTRENGTH
    373          	              | MPDDRC_CR_NB_4_BANKS
    374          	              | MPDDRC_CR_DECOD_INTERLEAVED
    375          	              | MPDDRC_CR_UNAL_SUPPORTED;
    376          
    377          #ifdef CONFIG_HAVE_MPDDRC_IO_CALIBRATION
    378          	desc->io_calibr = MPDDRC_IO_CALIBR_TZQIO(TZQIO_CYCLES(mck));
    379          #ifdef MPDDRC_IO_CALIBR_RDIV
    380          	desc->io_calibr |= MPDDRC_IO_CALIBR_RDIV(4);
    381          #endif
    382          #endif
    383          
    384          	/* timings */
    385          
    386          	memset(&desc->timings, 0, sizeof(desc->timings));
    387          	desc->timings.tras   = NS2CYCLES(45, mck);  // 45ns
    388          	desc->timings.trcd   = NS2CYCLES(13, mck);  // 12.5ns
    389          	desc->timings.twr    = NS2CYCLES(15, mck);  // 15ns
    390          	desc->timings.trc    = NS2CYCLES(58, mck);  // 57.5ns
    391          	desc->timings.trp    = NS2CYCLES(13, mck);  // 12.5ns
    392          	desc->timings.trrd   = NS2CYCLES(8, mck);   // 7.5ns
    393          	desc->timings.twtr   = NS2CYCLES(8, mck);   // 7.5ns
    394          	desc->timings.tmrd   = 2;                   // 2ck
    395          	desc->timings.trfc   = NS2CYCLES(75, mck);  // 75ns
    396          	desc->timings.txsnr  = NS2CYCLES(85, mck); // tRFC+10ns
    397          	desc->timings.txsrd  = 200;                 // 200ck
    398          	desc->timings.txp    = 2;                   // 2ck
    399          	desc->timings.txard  = 2;                   // 2ck
    400          	desc->timings.txards = 8;                   // 8ck
    401          	desc->timings.trpa   = desc->timings.trp + 1; // tRP+1ck
    402          	desc->timings.trtp   = NS2CYCLES(8, mck);   // 7.5ns
    403          	desc->timings.tfaw   = NS2CYCLES(35, mck);  // 35ns
    404          
    405          	desc->refresh_window = 64;
    406          	desc->refresh_cycles = 8192;
    407          }
    408          
    409          #endif /* CONFIG_HAVE_DDR2_W9712G6KB */
    410          
    411          
    412          #ifdef CONFIG_HAVE_DDR2_W9751G6KB
    413          static void _init_w9751g6kb(struct _mpddrc_desc* desc)
    414          {
    415          	uint32_t mck = pmc_get_master_clock() / 1000000;
    416          
    417          	desc->type = MPDDRC_TYPE_DDR2;
    418          
    419          	desc->mode = MPDDRC_MD_MD_DDR2_SDRAM
    420          	           | MPDDRC_MD_DBW_DBW_16_BITS;
    421          
    422          #ifdef CONFIG_HAVE_MPDDRC_DATA_PATH
    423          	desc->data_path = MPDDRC_RD_DATA_PATH_SHIFT_SAMPLING_SHIFT_ONE_CYCLE;
    424          #endif
    425          
    426          	desc->control = MPDDRC_CR_NR_13_ROW_BITS
    427          	              | MPDDRC_CR_NC_DDR_10_COL_BITS
    428          	              | MPDDRC_CR_CAS_DDR_CAS3
    429          	              | MPDDRC_CR_DIC_DS_DDR2_WEAKSTRENGTH
    430          	              | MPDDRC_CR_NB_4_BANKS
    431          	              | MPDDRC_CR_DECOD_INTERLEAVED
    432          	              | MPDDRC_CR_UNAL_SUPPORTED;
    433          
    434          #ifdef CONFIG_HAVE_MPDDRC_IO_CALIBRATION
    435          	desc->io_calibr = MPDDRC_IO_CALIBR_TZQIO(TZQIO_CYCLES(mck));
    436          #ifdef MPDDRC_IO_CALIBR_RDIV
    437          	desc->io_calibr |= MPDDRC_IO_CALIBR_RDIV(4);
    438          #endif
    439          #endif
    440          
    441          	/* timings */
    442          
    443          	memset(&desc->timings, 0, sizeof(desc->timings));
    444          	desc->timings.tras   = NS2CYCLES(45, mck);  // 45ns
    445          	desc->timings.trcd   = NS2CYCLES(14, mck);  // 13.5ns
    446          	desc->timings.twr    = NS2CYCLES(15, mck);  // 15ns
    447          	desc->timings.trc    = NS2CYCLES(59, mck);  // 58.5ns
    448          	desc->timings.trp    = NS2CYCLES(14, mck);  // 13.5ns
    449          	desc->timings.trrd   = NS2CYCLES(10, mck);  // 10ns
    450          	desc->timings.twtr   = 4;                   // 4 clk
    451          	desc->timings.tmrd   = 4;                   // 4ck
    452          	desc->timings.trfc   = NS2CYCLES(105, mck); // 105ns
    453          	desc->timings.txsnr  = NS2CYCLES(115, mck); // tRFC+10ns
    454          	desc->timings.txsrd  = 200;                 // 200ck
    455          	desc->timings.txp    = 4;                   // 4ck
    456          	desc->timings.txard  = 4;                   // 4ck
    457          	desc->timings.txards = 12;                  // 12ck
    458          	desc->timings.trpa   = desc->timings.trp + 1; // tRP+1ck
    459          	desc->timings.trtp   = 4;                   // 4 clk
    460          	desc->timings.tfaw   = NS2CYCLES(45, mck);  // 45ns
    461          
    462          	desc->refresh_window = 64;
    463          	desc->refresh_cycles = 8192;
    464          }
    465          #endif /* CONFIG_HAVE_DDR2_W9751G6KB */
    466          
    467          
    468          #ifdef CONFIG_HAVE_DDR2_MT47H128M8
    469          static void _init_mt47h128m8(struct _mpddrc_desc* desc)
    470          {
    471          	uint32_t mck = pmc_get_master_clock() / 1000000;
    472          
    473          	desc->type = MPDDRC_TYPE_DDR2;
    474          
    475          	desc->mode = MPDDRC_MD_MD_DDR2_SDRAM
    476          	           | MPDDRC_MD_DBW_DBW_32_BITS;
    477          
    478          #ifdef CONFIG_HAVE_MPDDRC_DATA_PATH
    479          	desc->data_path = MPDDRC_RD_DATA_PATH_SHIFT_SAMPLING_SHIFT_ONE_CYCLE;
    480          #endif
    481          
    482          	desc->control = MPDDRC_CR_NR_14_ROW_BITS
    483          	              | MPDDRC_CR_NC_DDR_10_COL_BITS
    484          	              | MPDDRC_CR_CAS_DDR_CAS3
    485          	              | MPDDRC_CR_NB_8_BANKS
    486          	              | MPDDRC_CR_NDQS_DISABLED
    487          	              | MPDDRC_CR_UNAL_SUPPORTED;
    488          
    489          #ifdef CONFIG_HAVE_MPDDRC_IO_CALIBRATION
    490          	desc->io_calibr = MPDDRC_IO_CALIBR_TZQIO(TZQIO_CYCLES(mck));
    491          #ifdef MPDDRC_IO_CALIBR_RDIV
    492          	desc->io_calibr |= MPDDRC_IO_CALIBR_RDIV(4);
    493          #endif
    494          #ifdef MPDDRC_IO_CALIBR_EN_CALIB_ENABLE_CALIBRATION
    495          	desc->io_calibr |= MPDDRC_IO_CALIBR_EN_CALIB_ENABLE_CALIBRATION;
    496          #endif
    497          #endif
    498          
    499          	/* timings */
    500          
    501          	memset(&desc->timings, 0, sizeof(desc->timings));
    502          	desc->timings.tras   = NS2CYCLES(40, mck);  // 40ns
    503          	desc->timings.trcd   = NS2CYCLES(13, mck);  // 12.5ns
    504          	desc->timings.twr    = NS2CYCLES(15, mck);  // 15ns
    505          	desc->timings.trc    = NS2CYCLES(55, mck);  // 55ns
    506          	desc->timings.trp    = NS2CYCLES(13, mck);  // 12.5ns
    507          	desc->timings.trrd   = NS2CYCLES(8, mck);   // 7.5ns
    508          	desc->timings.twtr   = NS2CYCLES(10, mck);  // 10ns
    509          	desc->timings.tmrd   = 2;                   // 2ck
    510          	desc->timings.trfc   = NS2CYCLES(128, mck); // 127.5ns
    511          	desc->timings.txsnr  = NS2CYCLES(138, mck); // tRFC+10ns
    512          	desc->timings.txsrd  = 200;                 // 200ck
    513          	desc->timings.txp    = 2;                   // 2ck
    514          	desc->timings.txard  = 8;                   // 8ck
    515          	desc->timings.txards = 2;                   // 2ck
    516          	desc->timings.trpa   = NS2CYCLES(15, mck);  // 15ns
    517          	desc->timings.trtp   = NS2CYCLES(8, mck);   // 7.5ns
    518          	desc->timings.tfaw   = NS2CYCLES(35, mck);  // 35ns
    519          
    520          	desc->refresh_window = 64;
    521          	desc->refresh_cycles = 8192;
    522          }
    523          #endif /* CONFIG_HAVE_DDR2_MT47H128M8 */
    524          
    525          #ifdef CONFIG_HAVE_DDR2_MT47H64M16
    526          static void _init_mt47h64m16(struct _mpddrc_desc* desc)
    527          {
    528          	uint32_t mck = pmc_get_master_clock() / 1000000;
    529          
    530          	desc->type = MPDDRC_TYPE_DDR2;
    531          
    532          	desc->mode = MPDDRC_MD_MD_DDR2_SDRAM
    533          	           | MPDDRC_MD_DBW_DBW_16_BITS;
    534          
    535          #ifdef CONFIG_HAVE_MPDDRC_DATA_PATH
    536          	desc->data_path = MPDDRC_RD_DATA_PATH_SHIFT_SAMPLING_SHIFT_ONE_CYCLE;
    537          #endif
    538          
    539          	desc->control = MPDDRC_CR_NR_13_ROW_BITS
    540          	              | MPDDRC_CR_NC_DDR_10_COL_BITS
    541          	              | MPDDRC_CR_CAS_DDR_CAS3
    542          	              | MPDDRC_CR_NB_8_BANKS
    543          	              | MPDDRC_CR_DECOD_INTERLEAVED
    544          	              | MPDDRC_CR_NDQS_DISABLED
    545          	              | MPDDRC_CR_UNAL_SUPPORTED;
    546          
    547          #ifdef CONFIG_HAVE_MPDDRC_IO_CALIBRATION
    548          	desc->io_calibr = MPDDRC_IO_CALIBR_TZQIO(TZQIO_CYCLES(mck));
    549          #ifdef MPDDRC_IO_CALIBR_RDIV
    550          	desc->io_calibr |= MPDDRC_IO_CALIBR_RDIV(4);
    551          #endif
    552          #ifdef MPDDRC_IO_CALIBR_EN_CALIB_ENABLE_CALIBRATION
    553          	desc->io_calibr |= MPDDRC_IO_CALIBR_EN_CALIB_ENABLE_CALIBRATION;
    554          #endif
    555          #endif
    556          
    557          	/* timings */
    558          
    559          	memset(&desc->timings, 0, sizeof(desc->timings));
    560          	desc->timings.tras   = NS2CYCLES(45, mck);  // 45ns
    561          	desc->timings.trcd   = NS2CYCLES(15, mck);  // 15ns
    562          	desc->timings.twr    = NS2CYCLES(15, mck);  // 15ns
    563          	desc->timings.trc    = NS2CYCLES(55, mck);  // 55ns
    564          	desc->timings.trp    = NS2CYCLES(15, mck);  // 15ns
    565          	desc->timings.trrd   = NS2CYCLES(13, mck);  // 12.5ns
    566          	desc->timings.twtr   = NS2CYCLES(10, mck);  // 10ns
    567          	desc->timings.tmrd   = NS2CYCLES(8, mck);   // 8ns
    568          	desc->timings.trfc   = NS2CYCLES(198, mck); // 198ns
    569          	desc->timings.txsnr  = NS2CYCLES(208, mck); // tRFC+10ns
    570          	desc->timings.txsrd  = 200;                 // 200ck
    571          	desc->timings.txp    = 2;                   // 2ck
    572          	desc->timings.txard  = 8;                   // 8ck
    573          	desc->timings.txards = 2;                   // 2ck
    574          	desc->timings.trpa   = NS2CYCLES(15, mck);  // 15ns
    575          	desc->timings.trtp   = NS2CYCLES(8, mck);   // 8ns
    576          	desc->timings.tfaw   = NS2CYCLES(45, mck);  // 45ns
    577          
    578          	desc->refresh_window = 64;
    579          	desc->refresh_cycles = 8192;
    580          }
    581          #endif /* CONFIG_HAVE_DDR2_MT47H64M16 */
    582          
    583          #ifdef CONFIG_HAVE_DDR2_MT47H128M16
    584          static void _init_mt47h128m16(struct _mpddrc_desc* desc)
    585          {
    586          	uint32_t mck = pmc_get_master_clock() / 1000000;
    587          
    588          	desc->type = MPDDRC_TYPE_DDR2;
    589          
    590          	desc->mode = MPDDRC_MD_MD_DDR2_SDRAM
    591          	           | MPDDRC_MD_DBW_DBW_32_BITS;
    592          
    593          #ifdef CONFIG_HAVE_MPDDRC_DATA_PATH
    594          	desc->data_path = MPDDRC_RD_DATA_PATH_SHIFT_SAMPLING_SHIFT_ONE_CYCLE;
    595          #endif
    596          
    597          	desc->control = MPDDRC_CR_NR_14_ROW_BITS
    598          	              | MPDDRC_CR_NC_DDR_10_COL_BITS
    599          	              | MPDDRC_CR_CAS_DDR_CAS3
    600          	              | MPDDRC_CR_NB_8_BANKS
    601          	              | MPDDRC_CR_NDQS_DISABLED
    602          	              | MPDDRC_CR_UNAL_SUPPORTED;
    603          
    604          #ifdef CONFIG_HAVE_MPDDRC_IO_CALIBRATION
    605          	desc->io_calibr = MPDDRC_IO_CALIBR_TZQIO(TZQIO_CYCLES(mck));
    606          #ifdef MPDDRC_IO_CALIBR_RDIV
    607          	desc->io_calibr |= MPDDRC_IO_CALIBR_RDIV(4);
    608          #endif
    609          #ifdef MPDDRC_IO_CALIBR_EN_CALIB_ENABLE_CALIBRATION
    610          	desc->io_calibr |= MPDDRC_IO_CALIBR_EN_CALIB_ENABLE_CALIBRATION;
    611          #endif
    612          #endif
    613          
    614          	/* timings */
    615          
    616          	memset(&desc->timings, 0, sizeof(desc->timings));
    617          	desc->timings.tras   = NS2CYCLES(45, mck);  // 45ns
    618          	desc->timings.trcd   = NS2CYCLES(15, mck);  // 15ns
    619          	desc->timings.twr    = NS2CYCLES(15, mck);  // 15ns
    620          	desc->timings.trc    = NS2CYCLES(55, mck);  // 55ns
    621          	desc->timings.trp    = NS2CYCLES(15, mck);  // 15ns
    622          	desc->timings.trrd   = NS2CYCLES(13, mck);  // 12.5ns
    623          	desc->timings.twtr   = NS2CYCLES(10, mck);  // 10ns
    624          	desc->timings.tmrd   = NS2CYCLES(8, mck);   // 8ns
    625          	desc->timings.trfc   = NS2CYCLES(186, mck); // 186ns
    626          	desc->timings.txsnr  = NS2CYCLES(208, mck); // tRFC+10s
    627          	desc->timings.txsrd  = 202;                 // 202ck
    628          	desc->timings.txp    = 3;                   // 3ck
    629          	desc->timings.txard  = 3;                   // 3ck
    630          	desc->timings.txards = 10;                  // 10ck
    631          	desc->timings.trpa   = NS2CYCLES(15, mck);  // 15ns
    632          	desc->timings.trtp   = NS2CYCLES(8, mck);   // 8ns
    633          	desc->timings.tfaw   = NS2CYCLES(45, mck);  // 45ns
    634          
    635          	desc->refresh_window = 64;
    636          	desc->refresh_cycles = 8192;
    637          }
    638          #endif /* CONFIG_HAVE_DDR2_MT47H128M16 */
    639          
    640          #endif /* CONFIG_HAVE_MPDDRC_DDR2 */
    641          
    642          #ifdef CONFIG_HAVE_MPDDRC_LPDDR2
    643          
    644          #ifdef CONFIG_HAVE_LPDDR2_MT42L128M16
    645          static void _init_mt42l128m16(struct _mpddrc_desc* desc)
    646          {
    647          	uint32_t mck = pmc_get_master_clock() / 1000000;
    648          
    649          	desc->type = MPDDRC_TYPE_LPDDR2;
    650          
    651          	desc->mode = MPDDRC_MD_MD_LPDDR2_SDRAM
    652          	           | MPDDRC_MD_DBW_DBW_32_BITS;
    653          
    654          #ifdef CONFIG_HAVE_MPDDRC_DATA_PATH
    655          	desc->data_path = MPDDRC_RD_DATA_PATH_SHIFT_SAMPLING_SHIFT_ONE_CYCLE;
    656          #endif
    657          
    658          	desc->control = MPDDRC_CR_NR_14_ROW_BITS
    659          	              | MPDDRC_CR_NC_DDR_10_COL_BITS
    660          	              | MPDDRC_CR_CAS_DDR_CAS3
    661          	              | MPDDRC_CR_NB_8_BANKS
    662          	              | MPDDRC_CR_UNAL_SUPPORTED;
    663          
    664          #ifdef CONFIG_HAVE_MPDDRC_IO_CALIBRATION
    665          	desc->io_calibr = 0;
    666          #ifdef MPDDRC_IO_CALIBR_RDIV
    667          	desc->io_calibr |= MPDDRC_IO_CALIBR_RDIV(4);
    668          #endif
    669          #endif
    670          
    671          	/* timings */
    672          
    673          	memset(&desc->timings, 0, sizeof(desc->timings));
    674          	desc->timings.tras   = NS2CYCLES(40, mck);  // 40ns
    675          	desc->timings.trcd   = NS2CYCLES(15, mck);  // 15ns
    676          	desc->timings.twr    = NS2CYCLES(15, mck);  // 15ns
    677          	desc->timings.trc    = NS2CYCLES(60, mck);  // 60ns
    678          	desc->timings.trp    = NS2CYCLES(15, mck);  // 15ns
    679          	desc->timings.trrd   = NS2CYCLES(11, mck);  // 11ns
    680          	desc->timings.twtr   = NS2CYCLES(8, mck);   // 7.5ns
    681          	desc->timings.tmrd   = 2;                   // 2ck
    682          	desc->timings.trfc   = NS2CYCLES(130, mck); // 130ns
    683          	desc->timings.txsnr  = NS2CYCLES(140, mck); // 140ns
    684          	desc->timings.txp    = 2;                   // 2ck
    685          	desc->timings.trtp   = NS2CYCLES(8, mck);   // 8ns
    686          	desc->timings.tfaw   = NS2CYCLES(50, mck);  // 50ns
    687          
    688          	desc->refresh_window = 32;
    689          	desc->refresh_cycles = 8192;
    690          }
    691          #endif /* CONFIG_HAVE_LPDDR2_MT42L128M16 */
    692          
    693          #ifdef CONFIG_HAVE_LPDDR2_AD220032D
    694          static void _init_ad220032d(struct _mpddrc_desc* desc)
    695          {
    696          	uint32_t mck = pmc_get_master_clock() / 1000000;
    697          
    698          	desc->type = MPDDRC_TYPE_LPDDR2;
    699          
    700          	desc->mode = MPDDRC_MD_MD_LPDDR2_SDRAM
    701          	           | MPDDRC_MD_DBW_DBW_32_BITS;
    702          
    703            #ifdef CONFIG_HAVE_MPDDRC_DATA_PATH
    704          	desc->data_path = MPDDRC_RD_DATA_PATH_SHIFT_SAMPLING_SHIFT_ONE_CYCLE;
    705            #endif
    706          
    707          	desc->control = MPDDRC_CR_NR_14_ROW_BITS
    708          	              | MPDDRC_CR_NC_DDR_9_COL_BITS
    709          	              | MPDDRC_CR_CAS_DDR_CAS3
    710          	              | MPDDRC_CR_NB_8_BANKS
    711          	              | MPDDRC_CR_UNAL_SUPPORTED;
    712          
    713            #ifdef CONFIG_HAVE_MPDDRC_IO_CALIBRATION
    714          	desc->io_calibr = MPDDRC_IO_CALIBR_RDIV(4);
    715            #endif
    716          
    717          	/* timings */
    718          
    719          	memset(&desc->timings, 0, sizeof(desc->timings));
    720          	desc->timings.tras   = NS2CYCLES( 42, mck); //  42ns
    721          	desc->timings.trcd   = NS2CYCLES( 18, mck); //  18ns
    722          	desc->timings.twr    = NS2CYCLES( 15, mck); //  15ns
    723          	desc->timings.trc    = NS2CYCLES( 63, mck); //  63ns
    724          	desc->timings.trp    = NS2CYCLES( 21, mck); //  21ns
    725          	desc->timings.trrd   = NS2CYCLES( 10, mck); //  10ns
    726          	desc->timings.twtr   = NS2CYCLES( 10, mck); //  10ns
    727          	desc->timings.tmrd   = 5;                   //   5ck
    728          	desc->timings.trfc   = NS2CYCLES(130, mck); // 130ns 
    729          	desc->timings.txsnr  = NS2CYCLES(140, mck); // 140ns 
    730          	desc->timings.txp    = 8;                   //   8ck
    731          	desc->timings.trtp   = NS2CYCLES(  8, mck); //   8ns
    732          	desc->timings.tfaw   = NS2CYCLES( 60, mck); //  60ns
    733          
    734          	desc->refresh_window = 32;                  //  32ms
    735          	desc->refresh_cycles = 8192;                // 8K ck
    736          }
    737          #endif /* CONFIG_HAVE_LPDDR2_AD220032D */
    738          
    739          #ifdef CONFIG_HAVE_LPDDR2_AD210032D
    740          static void _init_ad210032d(struct _mpddrc_desc* desc)
    741          {
    742          	uint32_t mck = pmc_get_master_clock() / 1000000;
    743          
    744          	desc->type = MPDDRC_TYPE_LPDDR2;
    745          
    746          	desc->mode = MPDDRC_MD_MD_LPDDR2_SDRAM
    747          	           | MPDDRC_MD_DBW_DBW_32_BITS;
    748          
    749            #ifdef CONFIG_HAVE_MPDDRC_DATA_PATH
    750          	desc->data_path = MPDDRC_RD_DATA_PATH_SHIFT_SAMPLING_SHIFT_ONE_CYCLE;
    751            #endif
    752          
    753          	desc->control = MPDDRC_CR_NR_13_ROW_BITS
    754          	              | MPDDRC_CR_NC_DDR_9_COL_BITS
    755          	              | MPDDRC_CR_CAS_DDR_CAS3
    756          	              | MPDDRC_CR_NB_8_BANKS
    757          	              | MPDDRC_CR_UNAL_SUPPORTED;
    758          
    759            #ifdef CONFIG_HAVE_MPDDRC_IO_CALIBRATION
    760          	desc->io_calibr = MPDDRC_IO_CALIBR_RDIV(4);
    761            #endif
    762          
    763          	/* timings */
    764          
    765          	memset(&desc->timings, 0, sizeof(desc->timings));
    766          	desc->timings.tras   = NS2CYCLES( 42, mck); //  42ns
    767          	desc->timings.trcd   = NS2CYCLES( 18, mck); //  18ns
    768          	desc->timings.twr    = NS2CYCLES( 15, mck); //  15ns
    769          	desc->timings.trc    = NS2CYCLES( 63, mck); //  63ns
    770          	desc->timings.trp    = NS2CYCLES( 21, mck); //  21ns
    771          	desc->timings.trrd   = NS2CYCLES( 10, mck); //  10ns
    772          	desc->timings.twtr   = NS2CYCLES( 10, mck); //  10ns
    773          	desc->timings.tmrd   = 5;                   //   5ck
    774          	desc->timings.trfc   = NS2CYCLES(130, mck); // 130ns 
    775          	desc->timings.txsnr  = NS2CYCLES(140, mck); // 140ns 
    776          	desc->timings.txp    = 8;                   //   8ck
    777          	desc->timings.trtp   = NS2CYCLES(  8, mck); //   8ns
    778          	desc->timings.tfaw   = NS2CYCLES( 60, mck); //  60ns
    779          
    780          	desc->refresh_window = 32;                  //  32ms
    781          	desc->refresh_cycles = 8192;                // 8K ck
    782          }
    783          #endif /* CONFIG_HAVE_LPDDR2_AD210032D */
    784          
    785          #endif /* CONFIG_HAVE_MPDDRC_LPDDR2 */
    786          
    787          #ifdef CONFIG_HAVE_MPDDRC_LPDDR
    788          
    789          #ifdef CONFIG_HAVE_LPDDR_MT46H64M16
    790          static void _init_mt46h64m16(struct _mpddrc_desc *desc)
    791          {
    792          	uint32_t mck = pmc_get_master_clock() / 1000000;
    793          
    794          	desc->type = MPDDRC_TYPE_LPDDR;
    795          
    796          	desc->mode = MPDDRC_MD_MD_LPDDR_SDRAM
    797          	           | MPDDRC_MD_DBW_DBW_16_BITS;
    798          
    799          #ifdef CONFIG_HAVE_MPDDRC_DATA_PATH
    800          	desc->data_path = MPDDRC_RD_DATA_PATH_SHIFT_SAMPLING_SHIFT_ONE_CYCLE;
    801          #endif
    802          
    803          	desc->control = MPDDRC_CR_NR_14_ROW_BITS
    804          	              | MPDDRC_CR_NC_DDR_10_COL_BITS
    805          	              | MPDDRC_CR_CAS_DDR_CAS3
    806          	              | MPDDRC_CR_NB_4_BANKS
    807          	              | MPDDRC_CR_DECOD_INTERLEAVED
    808          	              | MPDDRC_CR_UNAL_SUPPORTED;
    809          
    810          	/* timings -5 (MCK = 200MHz) */
    811          
    812          	memset(&desc->timings, 0, sizeof(desc->timings));
    813          	desc->timings.tras   = NS2CYCLES(40, mck);  // 40ns
    814          	desc->timings.trcd   = NS2CYCLES(15, mck);  // 15ns
    815          	desc->timings.twr    = NS2CYCLES(15, mck);  // 15ns
    816          	desc->timings.trc    = NS2CYCLES(55, mck);  // 55ns
    817          	desc->timings.trp    = NS2CYCLES(15, mck);  // 15ns
    818          	desc->timings.trrd   = NS2CYCLES(10, mck);  // 10ns
    819          	desc->timings.twtr   = 2;                   // 2ck
    820          	desc->timings.tmrd   = 2;                   // 2ck
    821          	desc->timings.trfc   = NS2CYCLES(72, mck);  // 72ns
    822          	desc->timings.txsnr  = NS2CYCLES(113, mck); // 112.5ns
    823          	desc->timings.txp    = 2;                   // 2ck
    824          	desc->timings.trtp   = 2;                   // 2ck
    825          
    826          	desc->refresh_window = 64;   /* tref = 64ms */
    827          	desc->refresh_cycles = 8192; /* REFRESH count = 8K */
    828          }
    829          #endif /* CONFIG_HAVE_LPDDR_MT46H64M16 */
    830          
    831          #ifdef CONFIG_HAVE_LPDDR_MT46H16M32
    832          static void _init_mt46h16m32(struct _mpddrc_desc *desc)
    833          {
    834          	uint32_t mck = pmc_get_master_clock() / 1000000;
    835          
    836          	desc->type = MPDDRC_TYPE_LPDDR;
    837          
    838          	desc->mode = MPDDRC_MD_MD_LPDDR_SDRAM
    839          	           | MPDDRC_MD_DBW_DBW_32_BITS;
    840          
    841          #ifdef CONFIG_HAVE_MPDDRC_DATA_PATH
    842          	desc->data_path = MPDDRC_RD_DATA_PATH_SHIFT_SAMPLING_SHIFT_ONE_CYCLE;
    843          #endif
    844          
    845          	desc->control = MPDDRC_CR_NR_13_ROW_BITS
    846          	              | MPDDRC_CR_NC_DDR_10_COL_BITS
    847          	              | MPDDRC_CR_CAS_DDR_CAS3
    848          	              | MPDDRC_CR_NB_4_BANKS
    849          	              | MPDDRC_CR_DECOD_INTERLEAVED
    850          	              | MPDDRC_CR_UNAL_SUPPORTED;
    851          
    852          	/* timings -5 (MCK = 200MHz) */
    853          
    854          	memset(&desc->timings, 0, sizeof(desc->timings));
    855          	desc->timings.tras   = NS2CYCLES(40, mck);  // 40ns
    856          	desc->timings.trcd   = NS2CYCLES(15, mck);  // 15ns
    857          	desc->timings.twr    = NS2CYCLES(15, mck);  // 15ns
    858          	desc->timings.trc    = NS2CYCLES(55, mck);  // 55ns
    859          	desc->timings.trp    = NS2CYCLES(15, mck);  // 15ns
    860          	desc->timings.trrd   = NS2CYCLES(10, mck);  // 10ns
    861          	desc->timings.twtr   = 2;                   // 2ck
    862          	desc->timings.tmrd   = 2;                   // 2ck
    863          	desc->timings.trfc   = NS2CYCLES(72, mck);  // 72ns
    864          	desc->timings.txsnr  = NS2CYCLES(113, mck); // 112.5ns
    865          	desc->timings.txp    = 2;                   // 2ck
    866          	desc->timings.trtp   = 2;                   // 2ck
    867          
    868          	desc->refresh_window = 64;   /* tref = 64ms */
    869          	desc->refresh_cycles = 8192; /* REFRESH count = 8K */
    870          }
    871          #endif /* CONFIG_HAVE_LPDDR_MT46H16M32 */
    872          
    873          #endif /* CONFIG_HAVE_MPDDR_LPDDR */
    874          
    875          #ifdef CONFIG_HAVE_MPDDRC_SDRAM
    876          
    877          #ifdef CONFIG_HAVE_SDRAM_AS4C16M16SA
    878          static void _init_as4c16m16sa(struct _mpddrc_desc* desc)
    879          {
    880          	uint32_t mck = pmc_get_master_clock() / 1000000;
    881          
    882          	desc->type = MPDDRC_TYPE_SDRAM;
    883          
    884          	desc->mode = MPDDRC_MD_MD_SDRAM;
    885          
    886          	desc->control = MPDDRC_CR_NC_SDRAM_9_COL_BITS
    887          	              | MPDDRC_CR_NR_13_ROW_BITS
    888          	              | MPDDRC_CR_CAS_SDRAM_CAS3
    889          	              | MPDDRC_CR_NB_BANK4
    890          	              | MPDDRC_CR_DBW;
    891          
    892          	/* timings */
    893          
    894          	memset(&desc->timings, 0, sizeof(desc->timings));
    895          	desc->timings.twr   = NS2CYCLES(12, mck) + 2; // tRP+2ck (tDAL)
    896          	desc->timings.trc   = NS2CYCLES(65, mck);     // 65ns
    897          	desc->timings.trfc  = desc->timings.trc;      // same as tRC
    898          	desc->timings.trp   = NS2CYCLES(20, mck);     // 20ns
    899          	desc->timings.trcd  = NS2CYCLES(20, mck);     // 20ns
    900          	desc->timings.tras  = NS2CYCLES(45, mck);     // 45ns
    901          	desc->timings.txsrd = NS2CYCLES(3, mck) + 1;  // 3ns+1ck (tCKA)
    902          	desc->timings.txsnr = desc->timings.txsrd;    // same as tXSRD
    903          
    904          	desc->refresh_window = 64;
    905          	desc->refresh_cycles = 8192;
    906          }
    907          #endif /* CONFIG_HAVE_SDRAM_AS4C416M16SA */
    908          
    909          #ifdef CONFIG_HAVE_SDRAM_IS42S16100E
    910          static void _init_is42s16100e(struct _mpddrc_desc* desc)
    911          {
    912          	uint32_t mck = pmc_get_master_clock() / 1000000;
    913          
    914          	desc->type = MPDDRC_TYPE_SDRAM;
    915          
    916          	desc->mode = MPDDRC_MD_MD_SDRAM;
    917          
    918          	desc->control = MPDDRC_CR_NC_SDRAM_8_COL_BITS
    919          	              | MPDDRC_CR_NR_11_ROW_BITS
    920          	              | MPDDRC_CR_CAS_SDRAM_CAS3
    921          	              | MPDDRC_CR_NB_BANK2
    922          	              | MPDDRC_CR_DBW;
    923          
    924          	/* timings */
    925          
    926          	memset(&desc->timings, 0, sizeof(desc->timings));
    927          	desc->timings.twr   = NS2CYCLES(20, mck) + 2; // tRP+2ck (tDAL)
    928          	desc->timings.trc   = NS2CYCLES(63, mck);     // 63ns
    929          	desc->timings.trfc  = desc->timings.trc;      // same as tRC
    930          	desc->timings.trp   = NS2CYCLES(20, mck);     // 20ns
    931          	desc->timings.trcd  = NS2CYCLES(16, mck);     // 16ns
    932          	desc->timings.tras  = NS2CYCLES(42, mck);     // 42ns
    933          	desc->timings.txsrd = NS2CYCLES(3, mck) + 1;  // 3ns+1ck (tCKA)
    934          	desc->timings.txsnr = desc->timings.txsrd;    // same as tXSRD
    935          
    936          	desc->refresh_window = 32;
    937          	desc->refresh_cycles = 2048;
    938          }
    939          #endif /* CONFIG_HAVE_SDRAM_IS42S16100E */
    940          
    941          
    942          #ifdef CONFIG_HAVE_SDRAM_W981216BH
    943          static void _init_w981216bh(struct _mpddrc_desc* desc)
    944          {
    945          	uint32_t mck = pmc_get_master_clock() / 1000000;
    946          
    947          	desc->type = MPDDRC_TYPE_SDRAM;
    948          
    949          	desc->mode = MPDDRC_MD_MD_SDRAM;
    950          
    951          	desc->control = MPDDRC_CR_NC_SDRAM_9_COL_BITS
    952          	              | MPDDRC_CR_NR_12_ROW_BITS
    953          	              | MPDDRC_CR_CAS_SDRAM_CAS3
    954          	              | MPDDRC_CR_NB_BANK4
    955          	              | MPDDRC_CR_DBW;
    956          
    957          	/* timings */
    958          
    959          	memset(&desc->timings, 0, sizeof(desc->timings));
    960          	desc->timings.twr   = NS2CYCLES(10, mck) + 2; // tRP+2ck (tDAL)
    961          	desc->timings.trc   = NS2CYCLES(65, mck);     // 65ns
    962          	desc->timings.trfc  = desc->timings.trc;      // same as tRC
    963          	desc->timings.trp   = NS2CYCLES(20, mck);     // 20ns
    964          	desc->timings.trcd  = NS2CYCLES(20, mck);     // 20ns
    965          	desc->timings.tras  = NS2CYCLES(45, mck);     // 45ns
    966          	desc->timings.txsrd = NS2CYCLES(3, mck) + 1;  // 3ns+1ck (tCKA)
    967          	desc->timings.txsnr = desc->timings.txsrd;    // same as tXSRD
    968          
    969          	desc->refresh_window = 64;
    970          	desc->refresh_cycles = 4096;
    971          }
    972          #endif /* CONFIG_HAVE_SDRAM_W981216BH */
    973          
    974          
    975          #ifdef CONFIG_HAVE_SDRAM_MT48LC16M16
    976          static void _init_mt48lc16m16(struct _mpddrc_desc* desc)
    977          {
    978          	uint32_t mck = pmc_get_master_clock() / 1000000;
    979          
    980          	desc->type = MPDDRC_TYPE_SDRAM;
    981          
    982          	desc->mode = MPDDRC_MD_MD_SDR_SDRAM
    983          	           | MPDDRC_MD_DBW_DBW_16_BITS;
    984          
    985          	desc->control = MPDDRC_CR_NC_SDR_9_COL_BITS
    986          	              | MPDDRC_CR_NR_13_ROW_BITS
    987          	              | MPDDRC_CR_CAS_SDR_CAS3
    988          	              | MPDDRC_CR_NB_4_BANKS
    989          	              | MPDDRC_CR_DECOD_INTERLEAVED;
    990          
    991          	/* timings */
    992          
    993          	memset(&desc->timings, 0, sizeof(desc->timings));
    994          	desc->timings.twr   = NS2CYCLES(15, mck) + 2; // tRP+2ck (tDAL)
    995          	desc->timings.trc   = NS2CYCLES(66, mck);     // 66ns
    996          	desc->timings.trfc  = desc->timings.trc;      // same as tRC
    997          	desc->timings.trp   = NS2CYCLES(20, mck);     // 20ns
    998          	desc->timings.trcd  = NS2CYCLES(20, mck);     // 20ns
    999          	desc->timings.tras  = NS2CYCLES(44, mck);     // 44ns
   1000          	desc->timings.txsrd = NS2CYCLES(75, mck);     // 75ns
   1001          	desc->timings.txsnr = desc->timings.txsrd;    // same as tXSRD
   1002          	desc->timings.trrd  = NS2CYCLES(15, mck);     // 15ns
   1003          	desc->timings.tmrd =  2;                      // 2 cycles
   1004          
   1005          	desc->refresh_window = 64;
   1006          	desc->refresh_cycles = 8192;
   1007          }
   1008          #endif /* CONFIG_HAVE_SDRAM_MT48LC16M16 */
   1009          
   1010          #endif /* CONFIG_HAVE_MPDDRC_SDRAM */
   1011          

   \                                 In section SOFTPACK, align 4, keep-with-next
   1012          void ddram_init_descriptor(struct _mpddrc_desc* desc,
   1013          			   enum _ddram_devices device)
   1014          {
   \                     ddram_init_descriptor:
   \        0x0   0xE92D'4FF8        PUSH     {R3-R11,LR}
   1015          	switch(device) {
   \        0x4   0xE351'000D        CMP      R1,#+13
   \        0x8   0xE1A0'4000        MOV      R4,R0
   \        0xC   0x8A00'034D        BHI      ??ddram_init_descriptor_2
   \       0x10   0xE1A0'1081        MOV      R1,R1, LSL #+1
   \       0x14   0xE19F'00B1        LDRH     R0,[PC, R1]
   \       0x18   0xE08F'F100        ADD      PC,PC,R0, LSL #+2
   \                     ??ddram_init_descriptor_0:
   \       0x1C   0x0006 0x0065      DC16     0x6,0x65,0xC0,0x16D

   \               0x00C0 0x016

   \              D
   \       0x24   0x022C 0x0228      DC16     0x22C,0x228,0x113,0x1D8

   \               0x0113 0x01D

   \              8
   \       0x2C   0x022E 0x0277      DC16     0x22E,0x277,0x2CE,0x2DE

   \               0x02CE 0x02D

   \              E
   \       0x34   0x02DA 0x02E0      DC16     0x2DA,0x2E0
   1016          #ifdef CONFIG_HAVE_MPDDRC_SDRAM
   1017            #ifdef CONFIG_HAVE_SDRAM_AS4C16M16SA
   1018          	case AS4C16M16SA:
   1019          		_init_as4c16m16sa(desc);
   1020          		break;
   1021            #endif
   1022            #ifdef CONFIG_HAVE_SDRAM_IS42S16100E
   1023          	case IS42S16100E:
   1024          		_init_is42s16100e(desc);
   1025          		break;
   1026            #endif
   1027            #ifdef CONFIG_HAVE_SDRAM_W981216BH
   1028          	case W981216BH:
   1029          		_init_w981216bh(desc);
   1030          		break;
   1031            #endif
   1032            #ifdef CONFIG_HAVE_SDRAM_MT48LC16M16
   1033          	case MT48LC16M16:
   1034          		_init_mt48lc16m16(desc);
   1035          		break;
   1036            #endif
   1037          #endif
   1038          #ifdef CONFIG_HAVE_MPDDRC_LPDDR
   1039            #ifdef CONFIG_HAVE_LPDDR_MT46H64M16
   1040          	case MT46H64M16:
   1041          		_init_mt46h64m16(desc);
   1042          		break;
   1043            #endif
   1044            #ifdef CONFIG_HAVE_LPDDR_MT46H16M32
   1045          	case MT46H16M32:
   1046          		_init_mt46h16m32(desc);
   1047          		break;
   1048            #endif
   1049          #endif
   1050          #ifdef CONFIG_HAVE_MPDDRC_DDR2
   1051            #ifdef CONFIG_HAVE_DDR2_MT47H128M8
   1052          	case MT47H128M8:
   1053          		_init_mt47h128m8(desc);
   \                     ??ddram_init_descriptor_3:
   \       0x38   0x....'....        BL       pmc_get_master_clock
   \       0x3C   0xE59F'2B40        LDR      R2,??ddram_init_descriptor_1  ;; 0x8637bd06
   \       0x40   0xE081'2290        UMULL    R2,R1,R0,R2
   \       0x44   0xE3A0'0000        MOV      R0,#+0
   \       0x48   0xE3A0'C001        MOV      R12,#+1
   \       0x4C   0xE300'63E7        MOVW     R6,#+999
   \       0x50   0xE5C4'0000        STRB     R0,[R4, #+0]
   \       0x54   0xE3A0'0F96        MOV      R0,#+600
   \       0x58   0xE584'C008        STR      R12,[R4, #+8]
   \       0x5C   0xE3A0'3006        MOV      R3,#+6
   \       0x60   0xE1A0'59A1        LSR      R5,R1,#+19
   \       0x64   0xE102'6580        SMLABB   R2,R0,R5,R6
   \       0x68   0x....'....        LDR      R12,??DataTable6_3  ;; 0x83126e98
   \       0x6C   0xE584'300C        STR      R3,[R4, #+12]
   \       0x70   0xE083'CC92        UMULL    R12,R3,R2,R12
   \       0x74   0xE3A0'103D        MOV      R1,#+61
   \       0x78   0xE381'18B0        ORR      R1,R1,#0xB00000
   \       0x7C   0xE3A0'E001        MOV      LR,#+1
   \       0x80   0xE584'1010        STR      R1,[R4, #+16]
   \       0x84   0xE08E'E4A3        ADD      LR,LR,R3, LSR #+9
   \       0x88   0xE3A0'1C7F        MOV      R1,#+32512
   \       0x8C   0xE284'0014        ADD      R0,R4,#+20
   \       0x90   0x....'....        LDR      R8,??DataTable6_3  ;; 0x83126e98
   \       0x94   0xE001'140E        AND      R1,R1,LR, LSL #+8
   \       0x98   0x....'....        LDR      R10,??DataTable6_3  ;; 0x83126e98
   \       0x9C   0xE381'7014        ORR      R7,R1,#0x14
   \       0xA0   0xE3A0'1011        MOV      R1,#+17
   \       0xA4   0xE584'7004        STR      R7,[R4, #+4]
   \       0xA8   0x....'....        BL       __aeabi_memclr4
   \       0xAC   0xE085'0105        ADD      R0,R5,R5, LSL #+2
   \       0xB0   0x....'....        LDR      R2,??DataTable6_3  ;; 0x83126e98
   \       0xB4   0xE3A0'300D        MOV      R3,#+13
   \       0xB8   0x....'....        LDR      R7,??DataTable6_3  ;; 0x83126e98
   \       0xBC   0xE10C'6583        SMLABB   R12,R3,R5,R6
   \       0xC0   0xE086'0180        ADD      R0,R6,R0, LSL #+3
   \       0xC4   0xE081'2290        UMULL    R2,R1,R0,R2
   \       0xC8   0xE3A0'3037        MOV      R3,#+55
   \       0xCC   0xE08E'779C        UMULL    R7,LR,R12,R7
   \       0xD0   0xE065'0205        RSB      R0,R5,R5, LSL #+4
   \       0xD4   0xE10C'6583        SMLABB   R12,R3,R5,R6
   \       0xD8   0x....'....        LDR      R7,??DataTable6_3  ;; 0x83126e98
   \       0xDC   0xE1A0'14A1        LSR      R1,R1,#+9
   \       0xE0   0xE086'0000        ADD      R0,R6,R0
   \       0xE4   0xE5C4'101B        STRB     R1,[R4, #+27]
   \       0xE8   0xE082'8890        UMULL    R8,R2,R0,R8
   \       0xEC   0xE1A0'14AE        LSR      R1,LR,#+9
   \       0xF0   0xE08E'779C        UMULL    R7,LR,R12,R7
   \       0xF4   0xE085'3105        ADD      R3,R5,R5, LSL #+2
   \       0xF8   0xE5C4'101A        STRB     R1,[R4, #+26]
   \       0xFC   0xE1A0'E4AE        LSR      LR,LR,#+9
   \      0x100   0xE5C4'1017        STRB     R1,[R4, #+23]
   \      0x104   0xE5C4'E018        STRB     LR,[R4, #+24]
   \      0x108   0xE086'3083        ADD      R3,R6,R3, LSL #+1
   \      0x10C   0xE086'7385        ADD      R7,R6,R5, LSL #+7
   \      0x110   0xE086'1185        ADD      R1,R6,R5, LSL #+3
   \      0x114   0x....'....        LDR      LR,??DataTable6_3  ;; 0x83126e98
   \      0x118   0xE08C'EE93        UMULL    LR,R12,R3,LR
   \      0x11C   0x....'....        LDR      R8,??DataTable6_3  ;; 0x83126e98
   \      0x120   0xE1A0'04A2        LSR      R0,R2,#+9
   \      0x124   0xE082'8891        UMULL    R8,R2,R1,R8
   \      0x128   0xE1A0'C4AC        LSR      R12,R12,#+9
   \      0x12C   0x....'....        LDR      R8,??DataTable6_3  ;; 0x83126e98
   \      0x130   0xE083'8897        UMULL    R8,R3,R7,R8
   \      0x134   0xE1A0'14A2        LSR      R1,R2,#+9
   \      0x138   0xE5C4'0019        STRB     R0,[R4, #+25]
   \      0x13C   0xE1A0'34A3        LSR      R3,R3,#+9
   \      0x140   0xE5C4'C015        STRB     R12,[R4, #+21]
   \      0x144   0xE5C4'301F        STRB     R3,[R4, #+31]
   \      0x148   0xE5C4'0022        STRB     R0,[R4, #+34]
   \      0x14C   0xE5C4'1016        STRB     R1,[R4, #+22]
   \      0x150   0xE3A0'C08A        MOV      R12,#+138
   \      0x154   0xE3A0'3008        MOV      R3,#+8
   \      0x158   0xE5C4'1021        STRB     R1,[R4, #+33]
   \      0x15C   0xE10E'658C        SMLABB   LR,R12,R5,R6
   \      0x160   0xE3A0'0023        MOV      R0,#+35
   \      0x164   0xE3A0'2002        MOV      R2,#+2
   \      0x168   0xE5C4'3024        STRB     R3,[R4, #+36]
   \      0x16C   0xE101'6580        SMLABB   R1,R0,R5,R6
   \      0x170   0xE5C4'2014        STRB     R2,[R4, #+20]
   \      0x174   0xE5C4'201C        STRB     R2,[R4, #+28]
   \      0x178   0xE5C4'2023        STRB     R2,[R4, #+35]
   \      0x17C   0xE089'AA9E        UMULL    R10,R9,LR,R10
   \      0x180   0x....'....        LDR      R3,??DataTable6_3  ;; 0x83126e98
   \      0x184   0xE082'3391        UMULL    R3,R2,R1,R3
   \      0x188   0xE3A0'70C8        MOV      R7,#+200
   \      0x18C   0xE1A0'94A9        LSR      R9,R9,#+9
   \      0x190   0xE5C4'701D        STRB     R7,[R4, #+29]
   \      0x194   0xE1A0'24A2        LSR      R2,R2,#+9
   \      0x198   0xE5C4'901E        STRB     R9,[R4, #+30]
   \      0x19C   0xE5C4'2020        STRB     R2,[R4, #+32]
   \      0x1A0   0xE3A0'C040        MOV      R12,#+64
   \                     ??ddram_init_descriptor_4:
   \      0x1A4   0xE584'C028        STR      R12,[R4, #+40]
   \                     ??ddram_init_descriptor_5:
   \      0x1A8   0xE3A0'ED80        MOV      LR,#+8192
   \                     ??ddram_init_descriptor_6:
   \      0x1AC   0xE584'E02C        STR      LR,[R4, #+44]
   1054          		break;
   1055            #endif
   1056            #ifdef CONFIG_HAVE_DDR2_MT47H64M16
   1057          	case MT47H64M16:
   1058          		_init_mt47h64m16(desc);
   1059          		break;
   1060            #endif
   1061            #ifdef CONFIG_HAVE_DDR2_MT47H128M16
   1062          	case MT47H128M16:
   1063          		_init_mt47h128m16(desc);
   1064          		break;
   1065            #endif
   1066            #ifdef CONFIG_HAVE_DDR2_W9712G6KB
   1067          	case W9712G6KB:
   1068          		_init_w9712g6kb(desc);
   1069          		break;
   1070            #endif
   1071            #ifdef CONFIG_HAVE_DDR2_W971GG6SB
   1072          	case W971GG6SB:
   1073          		_init_w971gg6sb(desc);
   1074          		break;
   1075            #endif
   1076            #ifdef CONFIG_HAVE_DDR2_W9751G6KB
   1077          	case W9751G6KB:
   1078          		_init_w9751g6kb(desc);
   1079          		break;
   1080            #endif
   1081            #ifdef CONFIG_HAVE_DDR2_W972GG6KB
   1082          	case W972GG6KB:
   1083          		_init_w972gg6kb(desc, 32);
   1084          		break;
   1085          	case W972GG6KB_16:
   1086          		_init_w972gg6kb(desc, 16);
   1087          		break;
   1088            #endif
   1089          #endif
   1090          #ifdef CONFIG_HAVE_MPDDRC_LPDDR2
   1091            #ifdef CONFIG_HAVE_LPDDR2_MT42L128M16
   1092          	case MT42L128M16:
   1093          		_init_mt42l128m16(desc);
   1094          		break;
   1095            #endif
   1096            #ifdef CONFIG_HAVE_LPDDR2_AD220032D
   1097          	case AD220032D:
   1098          		_init_ad220032d(desc);
   1099          		break;
   1100            #endif
   1101            #ifdef CONFIG_HAVE_LPDDR2_AD210032D
   1102          	case AD210032D:
   1103          		_init_ad210032d(desc);
   1104          		break;
   1105            #endif
   1106          #endif
   1107          #ifdef CONFIG_HAVE_MPDDRC_DDR3
   1108            #ifdef CONFIG_HAVE_DDR3_MT41K128M16
   1109          	case MT41K128M16:
   1110          		_init_mt41k128m16(desc, 32);
   1111          		break;
   1112          	case MT41K128M16_16:
   1113          		_init_mt41k128m16(desc, 16);
   1114          		break;
   1115            #endif
   1116          #endif
   1117          #ifdef CONFIG_HAVE_MPDDRC_LPDDR3
   1118            #ifdef CONFIG_HAVE_LPDDR3_EDF8164A3MA
   1119          	case EDF8164A3MA:
   1120          		_init_edf8164a3ma(desc);
   1121          		break;
   1122            #endif
   1123          #endif
   1124          	default:
   1125          		trace_fatal("Unsupported DDRAM type\r\n");
   1126          		break;
   1127          	}
   1128          }
   \      0x1B0   0xE8BD'8FF1        POP      {R0,R4-R11,PC}   ;; return
   \                     ??ddram_init_descriptor_7:
   \      0x1B4   0x....'....        BL       pmc_get_master_clock
   \      0x1B8   0xE59F'29C4        LDR      R2,??ddram_init_descriptor_1  ;; 0x8637bd06
   \      0x1BC   0xE081'2290        UMULL    R2,R1,R0,R2
   \      0x1C0   0xE3A0'0000        MOV      R0,#+0
   \      0x1C4   0xE3A0'C001        MOV      R12,#+1
   \      0x1C8   0xE300'63E7        MOVW     R6,#+999
   \      0x1CC   0xE5C4'0000        STRB     R0,[R4, #+0]
   \      0x1D0   0xE3A0'0F96        MOV      R0,#+600
   \      0x1D4   0xE584'C008        STR      R12,[R4, #+8]
   \      0x1D8   0xE3A0'3016        MOV      R3,#+22
   \      0x1DC   0xE1A0'59A1        LSR      R5,R1,#+19
   \      0x1E0   0xE102'6580        SMLABB   R2,R0,R5,R6
   \      0x1E4   0x....'....        LDR      R12,??DataTable6_3  ;; 0x83126e98
   \      0x1E8   0xE584'300C        STR      R3,[R4, #+12]
   \      0x1EC   0xE083'CC92        UMULL    R12,R3,R2,R12
   \      0x1F0   0xE3A0'1039        MOV      R1,#+57
   \      0x1F4   0xE381'18F0        ORR      R1,R1,#0xF00000
   \      0x1F8   0xE3A0'E001        MOV      LR,#+1
   \      0x1FC   0x....'....        LDR      R9,??DataTable6_3  ;; 0x83126e98
   \      0x200   0xE584'1010        STR      R1,[R4, #+16]
   \      0x204   0xE08E'E4A3        ADD      LR,LR,R3, LSR #+9
   \      0x208   0xE3A0'1C7F        MOV      R1,#+32512
   \      0x20C   0xE284'0014        ADD      R0,R4,#+20
   \      0x210   0x....'....        LDR      R10,??DataTable6_3  ;; 0x83126e98
   \      0x214   0xE001'140E        AND      R1,R1,LR, LSL #+8
   \      0x218   0xE381'7014        ORR      R7,R1,#0x14
   \      0x21C   0xE3A0'1011        MOV      R1,#+17
   \      0x220   0xE584'7004        STR      R7,[R4, #+4]
   \      0x224   0x....'....        BL       __aeabi_memclr4
   \      0x228   0xE3A0'002D        MOV      R0,#+45
   \      0x22C   0xE065'C205        RSB      R12,R5,R5, LSL #+4
   \      0x230   0xE101'6580        SMLABB   R1,R0,R5,R6
   \      0x234   0x....'....        LDR      R3,??DataTable6_3  ;; 0x83126e98
   \      0x238   0xE086'C00C        ADD      R12,R6,R12
   \      0x23C   0x....'....        LDR      R7,??DataTable6_3  ;; 0x83126e98
   \      0x240   0xE082'3391        UMULL    R3,R2,R1,R3
   \      0x244   0xE08E'779C        UMULL    R7,LR,R12,R7
   \      0x248   0xE3A0'C00D        MOV      R12,#+13
   \      0x24C   0xE1A0'04A2        LSR      R0,R2,#+9
   \      0x250   0xE3A0'2037        MOV      R2,#+55
   \      0x254   0xE103'6582        SMLABB   R3,R2,R5,R6
   \      0x258   0xE085'2105        ADD      R2,R5,R5, LSL #+2
   \      0x25C   0xE088'9993        UMULL    R9,R8,R3,R9
   \      0x260   0xE1A0'14AE        LSR      R1,LR,#+9
   \      0x264   0xE10E'658C        SMLABB   LR,R12,R5,R6
   \      0x268   0xE086'2082        ADD      R2,R6,R2, LSL #+1
   \      0x26C   0xE087'AA9E        UMULL    R10,R7,LR,R10
   \      0x270   0xE1A0'84A8        LSR      R8,R8,#+9
   \      0x274   0xE5C4'8018        STRB     R8,[R4, #+24]
   \      0x278   0x....'....        LDR      R8,??DataTable6_3  ;; 0x83126e98
   \      0x27C   0xE083'8892        UMULL    R8,R3,R2,R8
   \      0x280   0xE3A0'90C6        MOV      R9,#+198
   \      0x284   0xE10A'6589        SMLABB   R10,R9,R5,R6
   \      0x288   0x....'....        LDR      R8,??DataTable6_3  ;; 0x83126e98
   \      0x28C   0xE1A0'34A3        LSR      R3,R3,#+9
   \      0x290   0xE1A0'74A7        LSR      R7,R7,#+9
   \      0x294   0xE5C4'3015        STRB     R3,[R4, #+21]
   \      0x298   0xE083'889A        UMULL    R8,R3,R10,R8
   \      0x29C   0xE5C4'7016        STRB     R7,[R4, #+22]
   \      0x2A0   0xE086'C185        ADD      R12,R6,R5, LSL #+3
   \      0x2A4   0x....'....        LDR      R7,??DataTable6_3  ;; 0x83126e98
   \      0x2A8   0xE08E'779C        UMULL    R7,LR,R12,R7
   \      0x2AC   0xE3A0'C0D0        MOV      R12,#+208
   \      0x2B0   0xE105'658C        SMLABB   R5,R12,R5,R6
   \      0x2B4   0x....'....        LDR      R6,??DataTable6_3  ;; 0x83126e98
   \      0x2B8   0xE1A0'34A3        LSR      R3,R3,#+9
   \      0x2BC   0xE1A0'24AE        LSR      R2,LR,#+9
   \      0x2C0   0xE08E'6695        UMULL    R6,LR,R5,R6
   \      0x2C4   0xE5C4'301F        STRB     R3,[R4, #+31]
   \      0x2C8   0xE3A0'70C8        MOV      R7,#+200
   \      0x2CC   0xE3A0'3002        MOV      R3,#+2
   \      0x2D0   0xE1A0'E4AE        LSR      LR,LR,#+9
   \      0x2D4   0xE3A0'C008        MOV      R12,#+8
   \      0x2D8   0xE5C4'001B        STRB     R0,[R4, #+27]
   \      0x2DC   0xE5C4'101A        STRB     R1,[R4, #+26]
   \      0x2E0   0xE5C4'1019        STRB     R1,[R4, #+25]
   \      0x2E4   0xE5C4'1017        STRB     R1,[R4, #+23]
   \      0x2E8   0xE5C4'2014        STRB     R2,[R4, #+20]
   \      0x2EC   0xE5C4'E01E        STRB     LR,[R4, #+30]
   \      0x2F0   0xE5C4'701D        STRB     R7,[R4, #+29]
   \      0x2F4   0xE5C4'301C        STRB     R3,[R4, #+28]
   \      0x2F8   0xE5C4'C024        STRB     R12,[R4, #+36]
   \                     ??ddram_init_descriptor_8:
   \      0x2FC   0xE5C4'3023        STRB     R3,[R4, #+35]
   \                     ??ddram_init_descriptor_9:
   \      0x300   0xE5C4'0020        STRB     R0,[R4, #+32]
   \      0x304   0xE5C4'1022        STRB     R1,[R4, #+34]
   \      0x308   0xE5C4'2021        STRB     R2,[R4, #+33]
   \      0x30C   0xE3A0'0040        MOV      R0,#+64
   \                     ??ddram_init_descriptor_10:
   \      0x310   0xE3A0'1D80        MOV      R1,#+8192
   \      0x314   0xE584'0028        STR      R0,[R4, #+40]
   \      0x318   0xE584'102C        STR      R1,[R4, #+44]
   \      0x31C   0xE8BD'8FF1        POP      {R0,R4-R11,PC}
   \                     ??ddram_init_descriptor_11:
   \      0x320   0x....'....        BL       pmc_get_master_clock
   \      0x324   0xE59F'3858        LDR      R3,??ddram_init_descriptor_1  ;; 0x8637bd06
   \      0x328   0xE082'3390        UMULL    R3,R2,R0,R3
   \      0x32C   0xE3A0'0000        MOV      R0,#+0
   \      0x330   0xE5C4'0000        STRB     R0,[R4, #+0]
   \      0x334   0xE3A0'1006        MOV      R1,#+6
   \      0x338   0xE3A0'C001        MOV      R12,#+1
   \      0x33C   0xE584'100C        STR      R1,[R4, #+12]
   \      0x340   0xE300'63E7        MOVW     R6,#+999
   \      0x344   0xE3A0'0F96        MOV      R0,#+600
   \      0x348   0xE584'C008        STR      R12,[R4, #+8]
   \      0x34C   0xE1A0'59A2        LSR      R5,R2,#+19
   \      0x350   0x....'....        LDR      R12,??DataTable6_3  ;; 0x83126e98
   \      0x354   0xE101'6580        SMLABB   R1,R0,R5,R6
   \      0x358   0xE3A0'203D        MOV      R2,#+61
   \      0x35C   0xE083'CC91        UMULL    R12,R3,R1,R12
   \      0x360   0x....'....        LDR      R9,??DataTable6_3  ;; 0x83126e98
   \      0x364   0xE382'28B0        ORR      R2,R2,#0xB00000
   \      0x368   0xE3A0'E001        MOV      LR,#+1
   \      0x36C   0xE584'2010        STR      R2,[R4, #+16]
   \      0x370   0xE08E'E4A3        ADD      LR,LR,R3, LSR #+9
   \      0x374   0xE3A0'2C7F        MOV      R2,#+32512
   \      0x378   0xE3A0'1011        MOV      R1,#+17
   \      0x37C   0xE284'0014        ADD      R0,R4,#+20
   \      0x380   0xE002'240E        AND      R2,R2,LR, LSL #+8
   \      0x384   0x....'....        LDR      R10,??DataTable6_3  ;; 0x83126e98
   \      0x388   0xE382'7014        ORR      R7,R2,#0x14
   \      0x38C   0xE584'7004        STR      R7,[R4, #+4]
   \      0x390   0x....'....        BL       __aeabi_memclr4
   \      0x394   0xE3A0'002D        MOV      R0,#+45
   \      0x398   0xE065'C205        RSB      R12,R5,R5, LSL #+4
   \      0x39C   0xE101'6580        SMLABB   R1,R0,R5,R6
   \      0x3A0   0x....'....        LDR      R3,??DataTable6_3  ;; 0x83126e98
   \      0x3A4   0xE086'C00C        ADD      R12,R6,R12
   \      0x3A8   0x....'....        LDR      R7,??DataTable6_3  ;; 0x83126e98
   \      0x3AC   0xE082'3391        UMULL    R3,R2,R1,R3
   \      0x3B0   0xE08E'779C        UMULL    R7,LR,R12,R7
   \      0x3B4   0xE3A0'C00D        MOV      R12,#+13
   \      0x3B8   0xE1A0'04A2        LSR      R0,R2,#+9
   \      0x3BC   0xE3A0'2037        MOV      R2,#+55
   \      0x3C0   0xE103'6582        SMLABB   R3,R2,R5,R6
   \      0x3C4   0xE085'2105        ADD      R2,R5,R5, LSL #+2
   \      0x3C8   0xE088'9993        UMULL    R9,R8,R3,R9
   \      0x3CC   0xE1A0'14AE        LSR      R1,LR,#+9
   \      0x3D0   0xE10E'658C        SMLABB   LR,R12,R5,R6
   \      0x3D4   0xE086'2082        ADD      R2,R6,R2, LSL #+1
   \      0x3D8   0xE087'AA9E        UMULL    R10,R7,LR,R10
   \      0x3DC   0xE1A0'84A8        LSR      R8,R8,#+9
   \      0x3E0   0xE5C4'8018        STRB     R8,[R4, #+24]
   \      0x3E4   0x....'....        LDR      R8,??DataTable6_3  ;; 0x83126e98
   \      0x3E8   0xE083'8892        UMULL    R8,R3,R2,R8
   \      0x3EC   0xE3A0'90BA        MOV      R9,#+186
   \      0x3F0   0xE10A'6589        SMLABB   R10,R9,R5,R6
   \      0x3F4   0x....'....        LDR      R8,??DataTable6_3  ;; 0x83126e98
   \      0x3F8   0xE1A0'34A3        LSR      R3,R3,#+9
   \      0x3FC   0xE1A0'74A7        LSR      R7,R7,#+9
   \      0x400   0xE5C4'3015        STRB     R3,[R4, #+21]
   \      0x404   0xE083'889A        UMULL    R8,R3,R10,R8
   \      0x408   0xE5C4'7016        STRB     R7,[R4, #+22]
   \      0x40C   0xE086'C185        ADD      R12,R6,R5, LSL #+3
   \      0x410   0x....'....        LDR      R7,??DataTable6_3  ;; 0x83126e98
   \      0x414   0xE08E'779C        UMULL    R7,LR,R12,R7
   \      0x418   0xE3A0'C0D0        MOV      R12,#+208
   \      0x41C   0xE105'658C        SMLABB   R5,R12,R5,R6
   \      0x420   0x....'....        LDR      R6,??DataTable6_3  ;; 0x83126e98
   \      0x424   0xE1A0'34A3        LSR      R3,R3,#+9
   \      0x428   0xE1A0'24AE        LSR      R2,LR,#+9
   \      0x42C   0xE08E'6695        UMULL    R6,LR,R5,R6
   \      0x430   0xE5C4'301F        STRB     R3,[R4, #+31]
   \      0x434   0xE3A0'3003        MOV      R3,#+3
   \      0x438   0xE3A0'70CA        MOV      R7,#+202
   \      0x43C   0xE1A0'E4AE        LSR      LR,LR,#+9
   \      0x440   0xE5C4'301C        STRB     R3,[R4, #+28]
   \      0x444   0xE5C4'3024        STRB     R3,[R4, #+36]
   \      0x448   0xE5C4'001B        STRB     R0,[R4, #+27]
   \      0x44C   0xE5C4'101A        STRB     R1,[R4, #+26]
   \      0x450   0xE5C4'1019        STRB     R1,[R4, #+25]
   \      0x454   0xE5C4'1017        STRB     R1,[R4, #+23]
   \      0x458   0xE5C4'2014        STRB     R2,[R4, #+20]
   \      0x45C   0xE5C4'E01E        STRB     LR,[R4, #+30]
   \      0x460   0xE5C4'701D        STRB     R7,[R4, #+29]
   \      0x464   0xE3A0'300A        MOV      R3,#+10
   \      0x468   0xEAFF'FFA3        B        ??ddram_init_descriptor_8
   \                     ??ddram_init_descriptor_12:
   \      0x46C   0x....'....        BL       pmc_get_master_clock
   \      0x470   0xE59F'370C        LDR      R3,??ddram_init_descriptor_1  ;; 0x8637bd06
   \      0x474   0xE082'3390        UMULL    R3,R2,R0,R3
   \      0x478   0xE3A0'0000        MOV      R0,#+0
   \      0x47C   0xE5C4'0000        STRB     R0,[R4, #+0]
   \      0x480   0xE3A0'1016        MOV      R1,#+22
   \      0x484   0xE3A0'C001        MOV      R12,#+1
   \      0x488   0xE584'100C        STR      R1,[R4, #+12]
   \      0x48C   0xE300'63E7        MOVW     R6,#+999
   \      0x490   0xE3A0'0F96        MOV      R0,#+600
   \      0x494   0xE584'C008        STR      R12,[R4, #+8]
   \      0x498   0xE1A0'59A2        LSR      R5,R2,#+19
   \      0x49C   0x....'....        LDR      R12,??DataTable6_3  ;; 0x83126e98
   \      0x4A0   0xE101'6580        SMLABB   R1,R0,R5,R6
   \      0x4A4   0xE3A0'28C0        MOV      R2,#+12582912
   \      0x4A8   0xE083'CC91        UMULL    R12,R3,R1,R12
   \      0x4AC   0xE382'2F4D        ORR      R2,R2,#0x134
   \      0x4B0   0xE3A0'E001        MOV      LR,#+1
   \      0x4B4   0xE584'2010        STR      R2,[R4, #+16]
   \      0x4B8   0xE08E'E4A3        ADD      LR,LR,R3, LSR #+9
   \      0x4BC   0xE3A0'2C7F        MOV      R2,#+32512
   \      0x4C0   0xE3A0'1011        MOV      R1,#+17
   \      0x4C4   0xE284'0014        ADD      R0,R4,#+20
   \      0x4C8   0xE002'240E        AND      R2,R2,LR, LSL #+8
   \      0x4CC   0x....'....        LDR      R8,??DataTable6_3  ;; 0x83126e98
   \      0x4D0   0x....'....        LDR      R11,??DataTable6_3  ;; 0x83126e98
   \      0x4D4   0xE382'7004        ORR      R7,R2,#0x4
   \      0x4D8   0xE584'7004        STR      R7,[R4, #+4]
   \      0x4DC   0x....'....        BL       __aeabi_memclr4
   \      0x4E0   0xE3A0'002D        MOV      R0,#+45
   \      0x4E4   0x....'....        LDR      R3,??DataTable6_3  ;; 0x83126e98
   \      0x4E8   0xE101'6580        SMLABB   R1,R0,R5,R6
   \      0x4EC   0xE3A0'C00D        MOV      R12,#+13
   \      0x4F0   0xE082'3391        UMULL    R3,R2,R1,R3
   \      0x4F4   0xE065'1205        RSB      R1,R5,R5, LSL #+4
   \      0x4F8   0xE10E'658C        SMLABB   LR,R12,R5,R6
   \      0x4FC   0xE3A0'C03A        MOV      R12,#+58
   \      0x500   0xE087'889E        UMULL    R8,R7,LR,R8
   \      0x504   0xE1A0'24A2        LSR      R2,R2,#+9
   \      0x508   0xE10E'658C        SMLABB   LR,R12,R5,R6
   \      0x50C   0xE5C4'201B        STRB     R2,[R4, #+27]
   \      0x510   0xE086'1001        ADD      R1,R6,R1
   \      0x514   0x....'....        LDR      R3,??DataTable6_3  ;; 0x83126e98
   \      0x518   0xE082'3391        UMULL    R3,R2,R1,R3
   \      0x51C   0x....'....        LDR      R8,??DataTable6_3  ;; 0x83126e98
   \      0x520   0xE086'1185        ADD      R1,R6,R5, LSL #+3
   \      0x524   0xE3A0'C04B        MOV      R12,#+75
   \      0x528   0xE1A0'24A2        LSR      R2,R2,#+9
   \      0x52C   0xE1A0'04A7        LSR      R0,R7,#+9
   \      0x530   0xE087'889E        UMULL    R8,R7,LR,R8
   \      0x534   0xE5C4'2019        STRB     R2,[R4, #+25]
   \      0x538   0xE10E'658C        SMLABB   LR,R12,R5,R6
   \      0x53C   0x....'....        LDR      R3,??DataTable6_3  ;; 0x83126e98
   \      0x540   0xE082'3391        UMULL    R3,R2,R1,R3
   \      0x544   0xE1A0'74A7        LSR      R7,R7,#+9
   \      0x548   0xE5C4'7018        STRB     R7,[R4, #+24]
   \      0x54C   0x....'....        LDR      R7,??DataTable6_3  ;; 0x83126e98
   \      0x550   0xE083'779E        UMULL    R7,R3,LR,R7
   \      0x554   0xE1A0'14A2        LSR      R1,R2,#+9
   \      0x558   0xE5C4'1016        STRB     R1,[R4, #+22]
   \      0x55C   0xE5C4'1015        STRB     R1,[R4, #+21]
   \      0x560   0xE3A0'2002        MOV      R2,#+2
   \      0x564   0xE5C4'1021        STRB     R1,[R4, #+33]
   \      0x568   0xE1A0'34A3        LSR      R3,R3,#+9
   \      0x56C   0xE3A0'8055        MOV      R8,#+85
   \      0x570   0xE5C4'2014        STRB     R2,[R4, #+20]
   \      0x574   0xE5C4'301F        STRB     R3,[R4, #+31]
   \      0x578   0xE3A0'C0C8        MOV      R12,#+200
   \      0x57C   0xE5C4'201C        STRB     R2,[R4, #+28]
   \      0x580   0xE5C4'2024        STRB     R2,[R4, #+36]
   \      0x584   0xE109'6588        SMLABB   R9,R8,R5,R6
   \      0x588   0xE3A0'1023        MOV      R1,#+35
   \      0x58C   0xE5C4'C01D        STRB     R12,[R4, #+29]
   \      0x590   0xE103'6581        SMLABB   R3,R1,R5,R6
   \      0x594   0xE3A0'2008        MOV      R2,#+8
   \      0x598   0xE5C4'001A        STRB     R0,[R4, #+26]
   \      0x59C   0xE5C4'0017        STRB     R0,[R4, #+23]
   \      0x5A0   0xE5C4'2023        STRB     R2,[R4, #+35]
   \      0x5A4   0xE08A'BB99        UMULL    R11,R10,R9,R11
   \      0x5A8   0x....'....        LDR      R12,??DataTable6_3  ;; 0x83126e98
   \      0x5AC   0xE082'CC93        UMULL    R12,R2,R3,R12
   \      0x5B0   0xE280'0001        ADD      R0,R0,#+1
   \      0x5B4   0xE5C4'0022        STRB     R0,[R4, #+34]
   \      0x5B8   0xE1A0'A4AA        LSR      R10,R10,#+9
   \      0x5BC   0xE1A0'24A2        LSR      R2,R2,#+9
   \      0x5C0   0xE3A0'0040        MOV      R0,#+64
   \      0x5C4   0xE5C4'A01E        STRB     R10,[R4, #+30]
   \      0x5C8   0xE5C4'2020        STRB     R2,[R4, #+32]
   \      0x5CC   0xE584'0028        STR      R0,[R4, #+40]
   \      0x5D0   0xEAFF'FEF4        B        ??ddram_init_descriptor_5
   \                     ??ddram_init_descriptor_13:
   \      0x5D4   0x....'....        BL       pmc_get_master_clock
   \      0x5D8   0xE59F'25A4        LDR      R2,??ddram_init_descriptor_1  ;; 0x8637bd06
   \      0x5DC   0xE081'2290        UMULL    R2,R1,R0,R2
   \      0x5E0   0xE1A0'59A1        LSR      R5,R1,#+19
   \      0x5E4   0xE245'007D        SUB      R0,R5,#+125
   \      0x5E8   0xE350'004B        CMP      R0,#+75
   \      0x5EC   0x9A00'0004        BLS      ??ddram_init_descriptor_14
   \      0x5F0   0xE3A0'20CE        MOV      R2,#+206
   \      0x5F4   0x....'....        LDR      R1,??DataTable6
   \      0x5F8   0x....'....        LDR      R0,??DataTable6_1
   \      0x5FC   0x....'....        BL       __aeabi_assert
   \      0x600   0x....'....        BL       __iar_EmptyStepPoint
   \                     ??ddram_init_descriptor_14:
   \      0x604   0xE3A0'0000        MOV      R0,#+0
   \      0x608   0xE3A0'1016        MOV      R1,#+22
   \      0x60C   0xE5C4'0000        STRB     R0,[R4, #+0]
   \      0x610   0xE584'100C        STR      R1,[R4, #+12]
   \      0x614   0xE300'63E7        MOVW     R6,#+999
   \      0x618   0xE3A0'0F96        MOV      R0,#+600
   \      0x61C   0xE101'6580        SMLABB   R1,R0,R5,R6
   \      0x620   0xE3A0'2001        MOV      R2,#+1
   \      0x624   0xE584'2008        STR      R2,[R4, #+8]
   \      0x628   0x....'....        LDR      R12,??DataTable6_3  ;; 0x83126e98
   \      0x62C   0xE082'CC91        UMULL    R12,R2,R1,R12
   \      0x630   0x....'....        LDR      R3,??DataTable6_4  ;; 0xd00139
   \      0x634   0xE3A0'E001        MOV      LR,#+1
   \      0x638   0xE584'3010        STR      R3,[R4, #+16]
   \      0x63C   0xE08E'E4A2        ADD      LR,LR,R2, LSR #+9
   \      0x640   0xE3A0'3C7F        MOV      R3,#+32512
   \      0x644   0xE3A0'1011        MOV      R1,#+17
   \      0x648   0xE284'0014        ADD      R0,R4,#+20
   \      0x64C   0xE003'340E        AND      R3,R3,LR, LSL #+8
   \      0x650   0xE065'8205        RSB      R8,R5,R5, LSL #+4
   \      0x654   0x....'....        LDR      R10,??DataTable6_3  ;; 0x83126e98
   \      0x658   0xE383'7004        ORR      R7,R3,#0x4
   \      0x65C   0xE086'8008        ADD      R8,R6,R8
   \      0x660   0xE584'7004        STR      R7,[R4, #+4]
   \      0x664   0x....'....        BL       __aeabi_memclr4
   \      0x668   0xE085'0105        ADD      R0,R5,R5, LSL #+2
   \      0x66C   0x....'....        LDR      R2,??DataTable6_3  ;; 0x83126e98
   \      0x670   0xE3A0'300D        MOV      R3,#+13
   \      0x674   0x....'....        LDR      R7,??DataTable6_3  ;; 0x83126e98
   \      0x678   0xE10C'6583        SMLABB   R12,R3,R5,R6
   \      0x67C   0xE086'0180        ADD      R0,R6,R0, LSL #+3
   \      0x680   0xE081'2290        UMULL    R2,R1,R0,R2
   \      0x684   0xE3A0'3035        MOV      R3,#+53
   \      0x688   0xE08E'779C        UMULL    R7,LR,R12,R7
   \      0x68C   0x....'....        LDR      R2,??DataTable6_3  ;; 0x83126e98
   \      0x690   0xE10C'6583        SMLABB   R12,R3,R5,R6
   \      0x694   0xE1A0'14A1        LSR      R1,R1,#+9
   \      0x698   0xE5C4'101B        STRB     R1,[R4, #+27]
   \      0x69C   0xE081'2298        UMULL    R2,R1,R8,R2
   \      0x6A0   0x....'....        LDR      R8,??DataTable6_3  ;; 0x83126e98
   \      0x6A4   0xE086'3185        ADD      R3,R6,R5, LSL #+3
   \      0x6A8   0x....'....        LDR      R7,??DataTable6_3  ;; 0x83126e98
   \      0x6AC   0xE1A0'14A1        LSR      R1,R1,#+9
   \      0x6B0   0xE1A0'04AE        LSR      R0,LR,#+9
   \      0x6B4   0xE08E'779C        UMULL    R7,LR,R12,R7
   \      0x6B8   0xE5C4'1019        STRB     R1,[R4, #+25]
   \      0x6BC   0xE085'1105        ADD      R1,R5,R5, LSL #+2
   \      0x6C0   0x....'....        LDR      R12,??DataTable6_3  ;; 0x83126e98
   \      0x6C4   0xE1A0'E4AE        LSR      LR,LR,#+9
   \      0x6C8   0xE3A0'708A        MOV      R7,#+138
   \      0x6CC   0xE086'1081        ADD      R1,R6,R1, LSL #+1
   \      0x6D0   0xE5C4'E018        STRB     LR,[R4, #+24]
   \      0x6D4   0xE082'8891        UMULL    R8,R2,R1,R8
   \      0x6D8   0x....'....        LDR      LR,??DataTable6_3  ;; 0x83126e98
   \      0x6DC   0xE108'6587        SMLABB   R8,R7,R5,R6
   \      0x6E0   0xE3A0'1002        MOV      R1,#+2
   \      0x6E4   0xE089'AA98        UMULL    R10,R9,R8,R10
   \      0x6E8   0xE1A0'24A2        LSR      R2,R2,#+9
   \      0x6EC   0xE352'0002        CMP      R2,#+2
   \      0x6F0   0xE5C4'1014        STRB     R1,[R4, #+20]
   \      0x6F4   0x93A0'2002        MOVLS    R2,#+2
   \      0x6F8   0xE5C4'101C        STRB     R1,[R4, #+28]
   \      0x6FC   0xE5C4'2016        STRB     R2,[R4, #+22]
   \      0x700   0xE082'CC93        UMULL    R12,R2,R3,R12
   \      0x704   0xE5C4'1024        STRB     R1,[R4, #+36]
   \      0x708   0xE3A0'1008        MOV      R1,#+8
   \      0x70C   0xE5C4'001A        STRB     R0,[R4, #+26]
   \      0x710   0xE1A0'24A2        LSR      R2,R2,#+9
   \      0x714   0xE5C4'0017        STRB     R0,[R4, #+23]
   \      0x718   0xE352'0002        CMP      R2,#+2
   \      0x71C   0xE5C4'2021        STRB     R2,[R4, #+33]
   \      0x720   0x81A0'3002        MOVHI    R3,R2
   \      0x724   0xE3A0'202D        MOV      R2,#+45
   \      0x728   0x93A0'3002        MOVLS    R3,#+2
   \      0x72C   0xE5C4'1023        STRB     R1,[R4, #+35]
   \      0x730   0xE5C4'3015        STRB     R3,[R4, #+21]
   \      0x734   0xE086'3385        ADD      R3,R6,R5, LSL #+7
   \      0x738   0xE280'0001        ADD      R0,R0,#+1
   \      0x73C   0xE08C'EE93        UMULL    LR,R12,R3,LR
   \      0x740   0xE3A0'30C8        MOV      R3,#+200
   \      0x744   0xE5C4'301D        STRB     R3,[R4, #+29]
   \      0x748   0xE103'6582        SMLABB   R3,R2,R5,R6
   \      0x74C   0xE1A0'C4AC        LSR      R12,R12,#+9
   \      0x750   0xE5C4'C01F        STRB     R12,[R4, #+31]
   \      0x754   0x....'....        LDR      R12,??DataTable6_3  ;; 0x83126e98
   \      0x758   0xE081'CC93        UMULL    R12,R1,R3,R12
   \      0x75C   0xE5C4'0022        STRB     R0,[R4, #+34]
   \      0x760   0xE1A0'94A9        LSR      R9,R9,#+9
   \      0x764   0xE3A0'0040        MOV      R0,#+64
   \      0x768   0xE1A0'14A1        LSR      R1,R1,#+9
   \      0x76C   0xE5C4'901E        STRB     R9,[R4, #+30]
   \      0x770   0xE5C4'1020        STRB     R1,[R4, #+32]
   \      0x774   0xE584'0028        STR      R0,[R4, #+40]
   \      0x778   0xE302'E00D        MOVW     LR,#+8205
   \      0x77C   0xEAFF'FE8A        B        ??ddram_init_descriptor_6
   \                     ??ddram_init_descriptor_15:
   \      0x780   0x....'....        BL       pmc_get_master_clock
   \      0x784   0xE59F'23F8        LDR      R2,??ddram_init_descriptor_1  ;; 0x8637bd06
   \      0x788   0xE3A0'C001        MOV      R12,#+1
   \      0x78C   0xE300'63E7        MOVW     R6,#+999
   \      0x790   0xE081'2290        UMULL    R2,R1,R0,R2
   \      0x794   0xE3A0'0000        MOV      R0,#+0
   \      0x798   0xE5C4'0000        STRB     R0,[R4, #+0]
   \      0x79C   0xE3A0'0F96        MOV      R0,#+600
   \      0x7A0   0xE3A0'3016        MOV      R3,#+22
   \      0x7A4   0xE584'C008        STR      R12,[R4, #+8]
   \      0x7A8   0xE584'300C        STR      R3,[R4, #+12]
   \      0x7AC   0x....'....        LDR      R12,??DataTable6_3  ;; 0x83126e98
   \      0x7B0   0xE1A0'59A1        LSR      R5,R1,#+19
   \      0x7B4   0x....'....        LDR      R1,??DataTable6_5  ;; 0xc00139
   \      0x7B8   0xE102'6580        SMLABB   R2,R0,R5,R6
   \      0x7BC   0xE065'8205        RSB      R8,R5,R5, LSL #+4
   \      0x7C0   0xE083'CC92        UMULL    R12,R3,R2,R12
   \      0x7C4   0xE3A0'E001        MOV      LR,#+1
   \      0x7C8   0xE086'8008        ADD      R8,R6,R8
   \      0x7CC   0xE584'1010        STR      R1,[R4, #+16]
   \      0x7D0   0xE08E'E4A3        ADD      LR,LR,R3, LSR #+9
   \      0x7D4   0xE3A0'1C7F        MOV      R1,#+32512
   \      0x7D8   0xE284'0014        ADD      R0,R4,#+20
   \      0x7DC   0xE001'140E        AND      R1,R1,LR, LSL #+8
   \      0x7E0   0xE381'7004        ORR      R7,R1,#0x4
   \      0x7E4   0xE3A0'1011        MOV      R1,#+17
   \      0x7E8   0xE584'7004        STR      R7,[R4, #+4]
   \      0x7EC   0x....'....        BL       __aeabi_memclr4
   \      0x7F0   0xE065'C185        RSB      R12,R5,R5, LSL #+3
   \      0x7F4   0xE3A0'002D        MOV      R0,#+45
   \      0x7F8   0xE101'6580        SMLABB   R1,R0,R5,R6
   \      0x7FC   0x....'....        LDR      R3,??DataTable6_3  ;; 0x83126e98
   \      0x800   0xE082'3391        UMULL    R3,R2,R1,R3
   \      0x804   0xE086'C08C        ADD      R12,R6,R12, LSL #+1
   \      0x808   0x....'....        LDR      R3,??DataTable6_3  ;; 0x83126e98
   \      0x80C   0x....'....        LDR      R7,??DataTable6_3  ;; 0x83126e98
   \      0x810   0xE08E'779C        UMULL    R7,LR,R12,R7
   \      0x814   0xE3A0'C03B        MOV      R12,#+59
   \      0x818   0xE109'658C        SMLABB   R9,R12,R5,R6
   \      0x81C   0x....'....        LDR      R7,??DataTable6_3  ;; 0x83126e98
   \      0x820   0xE3A0'C069        MOV      R12,#+105
   \      0x824   0xE1A0'14AE        LSR      R1,LR,#+9
   \      0x828   0xE08E'7799        UMULL    R7,LR,R9,R7
   \      0x82C   0x....'....        LDR      R9,??DataTable6_3  ;; 0x83126e98
   \      0x830   0x....'....        LDR      R7,??DataTable6_3  ;; 0x83126e98
   \      0x834   0xE1A0'E4AE        LSR      LR,LR,#+9
   \      0x838   0xE1A0'04A2        LSR      R0,R2,#+9
   \      0x83C   0xE082'3398        UMULL    R3,R2,R8,R3
   \      0x840   0x....'....        LDR      R8,??DataTable6_3  ;; 0x83126e98
   \      0x844   0xE5C4'E018        STRB     LR,[R4, #+24]
   \      0x848   0xE10E'658C        SMLABB   LR,R12,R5,R6
   \      0x84C   0xE1A0'24A2        LSR      R2,R2,#+9
   \      0x850   0xE5C4'2019        STRB     R2,[R4, #+25]
   \      0x854   0xE085'2105        ADD      R2,R5,R5, LSL #+2
   \      0x858   0xE5C4'101A        STRB     R1,[R4, #+26]
   \      0x85C   0xE5C4'1017        STRB     R1,[R4, #+23]
   \      0x860   0xE086'2082        ADD      R2,R6,R2, LSL #+1
   \      0x864   0xE3A0'C0C8        MOV      R12,#+200
   \      0x868   0xE083'8892        UMULL    R8,R3,R2,R8
   \      0x86C   0xE3A0'2004        MOV      R2,#+4
   \      0x870   0xE3A0'8073        MOV      R8,#+115
   \      0x874   0xE5C4'001B        STRB     R0,[R4, #+27]
   \      0x878   0xE105'6588        SMLABB   R5,R8,R5,R6
   \      0x87C   0xE1A0'34A3        LSR      R3,R3,#+9
   \      0x880   0xE086'9995        UMULL    R9,R6,R5,R9
   \      0x884   0xE5C4'3016        STRB     R3,[R4, #+22]
   \      0x888   0xE083'779E        UMULL    R7,R3,LR,R7
   \      0x88C   0xE5C4'2015        STRB     R2,[R4, #+21]
   \      0x890   0xE1A0'64A6        LSR      R6,R6,#+9
   \      0x894   0xE5C4'2014        STRB     R2,[R4, #+20]
   \      0x898   0xE1A0'34A3        LSR      R3,R3,#+9
   \      0x89C   0xE5C4'601E        STRB     R6,[R4, #+30]
   \      0x8A0   0xE5C4'301F        STRB     R3,[R4, #+31]
   \      0x8A4   0xE3A0'300C        MOV      R3,#+12
   \      0x8A8   0xE5C4'C01D        STRB     R12,[R4, #+29]
   \      0x8AC   0xE5C4'201C        STRB     R2,[R4, #+28]
   \      0x8B0   0xE5C4'2024        STRB     R2,[R4, #+36]
   \      0x8B4   0xE5C4'3023        STRB     R3,[R4, #+35]
   \      0x8B8   0xE281'1001        ADD      R1,R1,#+1
   \      0x8BC   0xEAFF'FE8F        B        ??ddram_init_descriptor_9
   \                     ??ddram_init_descriptor_16:
   \      0x8C0   0xE3A0'1020        MOV      R1,#+32
   \                     ??ddram_init_descriptor_17:
   \      0x8C4   0xE1A0'0004        MOV      R0,R4
   \      0x8C8   0xE8BD'4FF4        POP      {R2,R4-R11,LR}
   \      0x8CC   0x....'....        B        _init_w972gg6kb  ;; tailcall
   \                     ??ddram_init_descriptor_18:
   \      0x8D0   0xE3A0'1010        MOV      R1,#+16
   \      0x8D4   0xEAFF'FFFA        B        ??ddram_init_descriptor_17
   \                     ??ddram_init_descriptor_19:
   \      0x8D8   0x....'....        BL       pmc_get_master_clock
   \      0x8DC   0xE59F'22A0        LDR      R2,??ddram_init_descriptor_1  ;; 0x8637bd06
   \      0x8E0   0xE081'2290        UMULL    R2,R1,R0,R2
   \      0x8E4   0xE3A0'0001        MOV      R0,#+1
   \      0x8E8   0xE5C4'0000        STRB     R0,[R4, #+0]
   \      0x8EC   0xE584'0008        STR      R0,[R4, #+8]
   \      0x8F0   0xE1A0'59A1        LSR      R5,R1,#+19
   \      0x8F4   0xE3A0'003D        MOV      R0,#+61
   \      0x8F8   0xE380'0890        ORR      R0,R0,#0x900000
   \      0x8FC   0xE3A0'1004        MOV      R1,#+4
   \      0x900   0xE3A0'3007        MOV      R3,#+7
   \      0x904   0xE584'0010        STR      R0,[R4, #+16]
   \      0x908   0xE584'1004        STR      R1,[R4, #+4]
   \      0x90C   0xE584'300C        STR      R3,[R4, #+12]
   \      0x910   0xE3A0'1011        MOV      R1,#+17
   \      0x914   0xE284'0014        ADD      R0,R4,#+20
   \      0x918   0x....'....        BL       __aeabi_memclr4
   \      0x91C   0xE085'1105        ADD      R1,R5,R5, LSL #+2
   \      0x920   0xE300'03E7        MOVW     R0,#+999
   \      0x924   0x....'....        LDR      R3,??DataTable6_3  ;; 0x83126e98
   \      0x928   0xE080'1181        ADD      R1,R0,R1, LSL #+3
   \      0x92C   0xE065'C205        RSB      R12,R5,R5, LSL #+4
   \      0x930   0xE082'3391        UMULL    R3,R2,R1,R3
   \      0x934   0x....'....        LDR      R6,??DataTable6_3  ;; 0x83126e98
   \      0x938   0xE080'C00C        ADD      R12,R0,R12
   \      0x93C   0x....'....        LDR      R7,??DataTable6_3  ;; 0x83126e98
   \      0x940   0xE08E'669C        UMULL    R6,LR,R12,R6
   \      0x944   0xE1A0'24A2        LSR      R2,R2,#+9
   \      0x948   0xE5C4'201B        STRB     R2,[R4, #+27]
   \      0x94C   0xE065'2205        RSB      R2,R5,R5, LSL #+4
   \      0x950   0xE1A0'14AE        LSR      R1,LR,#+9
   \      0x954   0xE5C4'101A        STRB     R1,[R4, #+26]
   \      0x958   0xE080'2102        ADD      R2,R0,R2, LSL #+2
   \      0x95C   0xE5C4'1019        STRB     R1,[R4, #+25]
   \      0x960   0xE083'7792        UMULL    R7,R3,R2,R7
   \      0x964   0xE080'2185        ADD      R2,R0,R5, LSL #+3
   \      0x968   0xE5C4'1017        STRB     R1,[R4, #+23]
   \      0x96C   0xE1A0'34A3        LSR      R3,R3,#+9
   \      0x970   0x....'....        LDR      R7,??DataTable6_3  ;; 0x83126e98
   \      0x974   0xE5C4'3018        STRB     R3,[R4, #+24]
   \      0x978   0xE083'7792        UMULL    R7,R3,R2,R7
   \      0x97C   0xE3A0'100B        MOV      R1,#+11
   \      0x980   0xE10C'0581        SMLABB   R12,R1,R5,R0
   \      0x984   0x....'....        LDR      R6,??DataTable6_3  ;; 0x83126e98
   \      0x988   0xE08E'669C        UMULL    R6,LR,R12,R6
   \      0x98C   0xE1A0'14A3        LSR      R1,R3,#+9
   \      0x990   0xE5C4'1015        STRB     R1,[R4, #+21]
   \      0x994   0xE085'C305        ADD      R12,R5,R5, LSL #+6
   \      0x998   0xE5C4'1021        STRB     R1,[R4, #+33]
   \      0x99C   0xE3A0'308C        MOV      R3,#+140
   \      0x9A0   0xE3A0'1032        MOV      R1,#+50
   \      0x9A4   0xE107'0583        SMLABB   R7,R3,R5,R0
   \      0x9A8   0xE080'C08C        ADD      R12,R0,R12, LSL #+1
   \      0x9AC   0xE1A0'E4AE        LSR      LR,LR,#+9
   \      0x9B0   0x....'....        LDR      R9,??DataTable6_3  ;; 0x83126e98
   \      0x9B4   0xE100'0581        SMLABB   R0,R1,R5,R0
   \      0x9B8   0xE3A0'2002        MOV      R2,#+2
   \      0x9BC   0xE5C4'E016        STRB     LR,[R4, #+22]
   \      0x9C0   0xE5C4'2014        STRB     R2,[R4, #+20]
   \      0x9C4   0x....'....        LDR      R6,??DataTable6_3  ;; 0x83126e98
   \      0x9C8   0xE5C4'201C        STRB     R2,[R4, #+28]
   \      0x9CC   0xE08E'669C        UMULL    R6,LR,R12,R6
   \      0x9D0   0x....'....        LDR      R3,??DataTable6_3  ;; 0x83126e98
   \      0x9D4   0xE088'9997        UMULL    R9,R8,R7,R9
   \      0x9D8   0xE3A0'C020        MOV      R12,#+32
   \      0x9DC   0xE082'3390        UMULL    R3,R2,R0,R3
   \      0x9E0   0xE1A0'E4AE        LSR      LR,LR,#+9
   \      0x9E4   0xE1A0'84A8        LSR      R8,R8,#+9
   \      0x9E8   0xE5C4'E01F        STRB     LR,[R4, #+31]
   \      0x9EC   0xE1A0'24A2        LSR      R2,R2,#+9
   \      0x9F0   0xE5C4'801E        STRB     R8,[R4, #+30]
   \      0x9F4   0xE5C4'2020        STRB     R2,[R4, #+32]
   \      0x9F8   0xEAFF'FDE9        B        ??ddram_init_descriptor_4
   \                     ??ddram_init_descriptor_20:
   \      0x9FC   0x....'....        BL       pmc_get_master_clock
   \      0xA00   0xE59F'217C        LDR      R2,??ddram_init_descriptor_1  ;; 0x8637bd06
   \      0xA04   0xE081'2290        UMULL    R2,R1,R0,R2
   \      0xA08   0xE3A0'0001        MOV      R0,#+1
   \      0xA0C   0xE5C4'0000        STRB     R0,[R4, #+0]
   \      0xA10   0xE3A0'3007        MOV      R3,#+7
   \      0xA14   0xE584'0008        STR      R0,[R4, #+8]
   \      0xA18   0xE1A0'59A1        LSR      R5,R1,#+19
   \      0xA1C   0xE584'300C        STR      R3,[R4, #+12]
   \      0xA20   0xE3A0'003C        MOV      R0,#+60
   \                     ??ddram_init_descriptor_21:
   \      0xA24   0xE380'0890        ORR      R0,R0,#0x900000
   \      0xA28   0xE3A0'1004        MOV      R1,#+4
   \      0xA2C   0xE584'0010        STR      R0,[R4, #+16]
   \      0xA30   0xE584'1004        STR      R1,[R4, #+4]
   \      0xA34   0xE3A0'1011        MOV      R1,#+17
   \      0xA38   0xE284'0014        ADD      R0,R4,#+20
   \      0xA3C   0x....'....        BL       __aeabi_memclr4
   \      0xA40   0xE300'03E7        MOVW     R0,#+999
   \      0xA44   0xE3A0'102A        MOV      R1,#+42
   \      0xA48   0xE102'0581        SMLABB   R2,R1,R5,R0
   \      0xA4C   0xE085'E185        ADD      LR,R5,R5, LSL #+3
   \      0xA50   0x....'....        LDR      R12,??DataTable6_3  ;; 0x83126e98
   \      0xA54   0xE083'CC92        UMULL    R12,R3,R2,R12
   \      0xA58   0xE080'E08E        ADD      LR,R0,LR, LSL #+1
   \      0xA5C   0x....'....        LDR      R7,??DataTable6_3  ;; 0x83126e98
   \      0xA60   0xE086'779E        UMULL    R7,R6,LR,R7
   \      0xA64   0xE1A0'34A3        LSR      R3,R3,#+9
   \      0xA68   0xE065'1205        RSB      R1,R5,R5, LSL #+4
   \      0xA6C   0xE5C4'301B        STRB     R3,[R4, #+27]
   \      0xA70   0xE1A0'64A6        LSR      R6,R6,#+9
   \      0xA74   0x....'....        LDR      R3,??DataTable6_3  ;; 0x83126e98
   \      0xA78   0xE080'1001        ADD      R1,R0,R1
   \      0xA7C   0xE5C4'601A        STRB     R6,[R4, #+26]
   \      0xA80   0xE082'3391        UMULL    R3,R2,R1,R3
   \      0xA84   0xE065'C305        RSB      R12,R5,R5, LSL #+6
   \      0xA88   0x....'....        LDR      R6,??DataTable6_3  ;; 0x83126e98
   \      0xA8C   0xE080'C00C        ADD      R12,R0,R12
   \      0xA90   0xE3A0'1015        MOV      R1,#+21
   \      0xA94   0xE08E'669C        UMULL    R6,LR,R12,R6
   \      0xA98   0xE1A0'24A2        LSR      R2,R2,#+9
   \      0xA9C   0xE107'0581        SMLABB   R7,R1,R5,R0
   \      0xAA0   0xE085'C105        ADD      R12,R5,R5, LSL #+2
   \      0xAA4   0xE5C4'2019        STRB     R2,[R4, #+25]
   \      0xAA8   0x....'....        LDR      R3,??DataTable6_3  ;; 0x83126e98
   \      0xAAC   0xE082'3397        UMULL    R3,R2,R7,R3
   \      0xAB0   0xE1A0'E4AE        LSR      LR,LR,#+9
   \      0xAB4   0xE080'C08C        ADD      R12,R0,R12, LSL #+1
   \      0xAB8   0xE5C4'E018        STRB     LR,[R4, #+24]
   \      0xABC   0x....'....        LDR      R6,??DataTable6_3  ;; 0x83126e98
   \      0xAC0   0xE08E'669C        UMULL    R6,LR,R12,R6
   \      0xAC4   0xE1A0'24A2        LSR      R2,R2,#+9
   \      0xAC8   0xE5C4'2017        STRB     R2,[R4, #+23]
   \      0xACC   0xE1A0'14AE        LSR      R1,LR,#+9
   \      0xAD0   0xE3A0'E08C        MOV      LR,#+140
   \      0xAD4   0xE106'058E        SMLABB   R6,LR,R5,R0
   \      0xAD8   0xE085'2305        ADD      R2,R5,R5, LSL #+6
   \      0xADC   0xE5C4'1016        STRB     R1,[R4, #+22]
   \      0xAE0   0xE5C4'1015        STRB     R1,[R4, #+21]
   \      0xAE4   0xE3A0'1005        MOV      R1,#+5
   \      0xAE8   0xE080'2082        ADD      R2,R0,R2, LSL #+1
   \      0xAEC   0xE5C4'1014        STRB     R1,[R4, #+20]
   \      0xAF0   0x....'....        LDR      R12,??DataTable6_3  ;; 0x83126e98
   \      0xAF4   0xE083'CC92        UMULL    R12,R3,R2,R12
   \      0xAF8   0x....'....        LDR      R7,??DataTable6_3  ;; 0x83126e98
   \      0xAFC   0xE081'7796        UMULL    R7,R1,R6,R7
   \      0xB00   0x....'....        LDR      LR,??DataTable6_3  ;; 0x83126e98
   \      0xB04   0xE1A0'34A3        LSR      R3,R3,#+9
   \      0xB08   0xE3A0'2008        MOV      R2,#+8
   \      0xB0C   0xE1A0'14A1        LSR      R1,R1,#+9
   \      0xB10   0xE5C4'301F        STRB     R3,[R4, #+31]
   \      0xB14   0xE5C4'101E        STRB     R1,[R4, #+30]
   \      0xB18   0xE080'3185        ADD      R3,R0,R5, LSL #+3
   \      0xB1C   0xE065'1205        RSB      R1,R5,R5, LSL #+4
   \      0xB20   0xE08C'EE93        UMULL    LR,R12,R3,LR
   \      0xB24   0xE5C4'201C        STRB     R2,[R4, #+28]
   \      0xB28   0xE080'0101        ADD      R0,R0,R1, LSL #+2
   \      0xB2C   0x....'....        LDR      R5,??DataTable6_3  ;; 0x83126e98
   \      0xB30   0xE082'5590        UMULL    R5,R2,R0,R5
   \      0xB34   0xE1A0'C4AC        LSR      R12,R12,#+9
   \      0xB38   0xE5C4'C021        STRB     R12,[R4, #+33]
   \      0xB3C   0xE1A0'24A2        LSR      R2,R2,#+9
   \      0xB40   0xE3A0'3020        MOV      R3,#+32
   \      0xB44   0xE3A0'CD80        MOV      R12,#+8192
   \      0xB48   0xE5C4'2020        STRB     R2,[R4, #+32]
   \      0xB4C   0xE584'3028        STR      R3,[R4, #+40]
   \      0xB50   0xE584'C02C        STR      R12,[R4, #+44]
   \      0xB54   0xE8BD'8FF1        POP      {R0,R4-R11,PC}
   \                     ??ddram_init_descriptor_22:
   \      0xB58   0x....'....        BL       pmc_get_master_clock
   \      0xB5C   0xE59F'2020        LDR      R2,??ddram_init_descriptor_1  ;; 0x8637bd06
   \      0xB60   0xE081'2290        UMULL    R2,R1,R0,R2
   \      0xB64   0xE3A0'0001        MOV      R0,#+1
   \      0xB68   0xE5C4'0000        STRB     R0,[R4, #+0]
   \      0xB6C   0xE3A0'3007        MOV      R3,#+7
   \      0xB70   0xE584'0008        STR      R0,[R4, #+8]
   \      0xB74   0xE1A0'59A1        LSR      R5,R1,#+19
   \      0xB78   0xE584'300C        STR      R3,[R4, #+12]
   \      0xB7C   0xE3A0'0038        MOV      R0,#+56
   \      0xB80   0xEAFF'FFA7        B        ??ddram_init_descriptor_21
   \                     ??ddram_init_descriptor_1:
   \      0xB84   0x8637'BD06        DC32     0x8637bd06
   \                     ??ddram_init_descriptor_23:
   \      0xB88   0xE3A0'1020        MOV      R1,#+32
   \                     ??ddram_init_descriptor_24:
   \      0xB8C   0xE1A0'0004        MOV      R0,R4
   \      0xB90   0xE8BD'4FF4        POP      {R2,R4-R11,LR}
   \      0xB94   0x....'....        B        _init_mt41k128m16  ;; tailcall
   \                     ??ddram_init_descriptor_25:
   \      0xB98   0xE3A0'1010        MOV      R1,#+16
   \      0xB9C   0xEAFF'FFFA        B        ??ddram_init_descriptor_24
   \                     ??ddram_init_descriptor_26:
   \      0xBA0   0x....'....        BL       pmc_get_master_clock
   \      0xBA4   0x....'....        LDR      R2,??DataTable6_6  ;; 0x8637bd06
   \      0xBA8   0xE081'2290        UMULL    R2,R1,R0,R2
   \      0xBAC   0xE3A0'0003        MOV      R0,#+3
   \      0xBB0   0xE5C4'0000        STRB     R0,[R4, #+0]
   \      0xBB4   0xE1A0'59A1        LSR      R5,R1,#+19
   \      0xBB8   0xE3A0'103D        MOV      R1,#+61
   \      0xBBC   0xE381'1890        ORR      R1,R1,#0x900000
   \      0xBC0   0xE3A0'3005        MOV      R3,#+5
   \      0xBC4   0xE3A0'6002        MOV      R6,#+2
   \      0xBC8   0xE584'1010        STR      R1,[R4, #+16]
   \      0xBCC   0xE3A0'7004        MOV      R7,#+4
   \      0xBD0   0xE584'300C        STR      R3,[R4, #+12]
   \      0xBD4   0xE584'6008        STR      R6,[R4, #+8]
   \      0xBD8   0xE584'7004        STR      R7,[R4, #+4]
   \      0xBDC   0xE3A0'1011        MOV      R1,#+17
   \      0xBE0   0xE284'0014        ADD      R0,R4,#+20
   \      0xBE4   0x....'....        BL       __aeabi_memclr4
   \      0xBE8   0xE085'E185        ADD      LR,R5,R5, LSL #+3
   \      0xBEC   0x....'....        LDR      R9,??DataTable6_3  ;; 0x83126e98
   \      0xBF0   0xE300'03E7        MOVW     R0,#+999
   \      0xBF4   0xE3A0'102A        MOV      R1,#+42
   \      0xBF8   0xE102'0581        SMLABB   R2,R1,R5,R0
   \      0xBFC   0xE080'E08E        ADD      LR,R0,LR, LSL #+1
   \      0xC00   0xE088'999E        UMULL    R9,R8,LR,R9
   \      0xC04   0x....'....        LDR      R12,??DataTable6_3  ;; 0x83126e98
   \      0xC08   0xE083'CC92        UMULL    R12,R3,R2,R12
   \      0xC0C   0xE080'E185        ADD      LR,R0,R5, LSL #+3
   \      0xC10   0xE1A0'14A8        LSR      R1,R8,#+9
   \      0xC14   0x....'....        LDR      R9,??DataTable6_3  ;; 0x83126e98
   \      0xC18   0xE088'999E        UMULL    R9,R8,LR,R9
   \      0xC1C   0xE351'0004        CMP      R1,#+4
   \      0xC20   0x33A0'1003        MOVCC    R1,#+3
   \      0xC24   0xE1A0'34A3        LSR      R3,R3,#+9
   \      0xC28   0xE5C4'101A        STRB     R1,[R4, #+26]
   \      0xC2C   0xE065'1205        RSB      R1,R5,R5, LSL #+4
   \      0xC30   0xE5C4'301B        STRB     R3,[R4, #+27]
   \      0xC34   0x....'....        LDR      R3,??DataTable6_3  ;; 0x83126e98
   \      0xC38   0xE080'1001        ADD      R1,R0,R1
   \      0xC3C   0x....'....        LDR      R12,??DataTable6_3  ;; 0x83126e98
   \      0xC40   0xE082'3391        UMULL    R3,R2,R1,R3
   \      0xC44   0xE3A0'E08C        MOV      LR,#+140
   \      0xC48   0x....'....        LDR      R10,??DataTable6_3  ;; 0x83126e98
   \      0xC4C   0xE1A0'14A2        LSR      R1,R2,#+9
   \      0xC50   0xE351'0004        CMP      R1,#+4
   \      0xC54   0x33A0'1003        MOVCC    R1,#+3
   \      0xC58   0xE5C4'1019        STRB     R1,[R4, #+25]
   \      0xC5C   0xE3A0'1037        MOV      R1,#+55
   \      0xC60   0xE102'0581        SMLABB   R2,R1,R5,R0
   \      0xC64   0xE1A0'14A8        LSR      R1,R8,#+9
   \      0xC68   0xE083'CC92        UMULL    R12,R3,R2,R12
   \      0xC6C   0xE351'0004        CMP      R1,#+4
   \      0xC70   0x81A0'2001        MOVHI    R2,R1
   \      0xC74   0x....'....        LDR      R12,??DataTable6_3  ;; 0x83126e98
   \      0xC78   0xE108'058E        SMLABB   R8,LR,R5,R0
   \      0xC7C   0x93A0'2004        MOVLS    R2,#+4
   \      0xC80   0xE089'AA98        UMULL    R10,R9,R8,R10
   \      0xC84   0xE5C4'2017        STRB     R2,[R4, #+23]
   \      0xC88   0xE085'2105        ADD      R2,R5,R5, LSL #+2
   \      0xC8C   0xE1A0'34A3        LSR      R3,R3,#+9
   \      0xC90   0xE5C4'3018        STRB     R3,[R4, #+24]
   \      0xC94   0xE080'2082        ADD      R2,R0,R2, LSL #+1
   \      0xC98   0xE1A0'94A9        LSR      R9,R9,#+9
   \      0xC9C   0xE083'CC92        UMULL    R12,R3,R2,R12
   \      0xCA0   0xE5C4'901E        STRB     R9,[R4, #+30]
   \      0xCA4   0x....'....        LDR      R12,??DataTable6_3  ;; 0x83126e98
   \      0xCA8   0xE1A0'24A3        LSR      R2,R3,#+9
   \      0xCAC   0xE352'0002        CMP      R2,#+2
   \      0xCB0   0x93A0'2002        MOVLS    R2,#+2
   \      0xCB4   0xE351'0004        CMP      R1,#+4
   \      0xCB8   0xE5C4'2016        STRB     R2,[R4, #+22]
   \      0xCBC   0x81A0'2001        MOVHI    R2,R1
   \      0xCC0   0x93A0'2004        MOVLS    R2,#+4
   \      0xCC4   0xE5C4'2015        STRB     R2,[R4, #+21]
   \      0xCC8   0xE065'2185        RSB      R2,R5,R5, LSL #+3
   \      0xCCC   0xE080'2082        ADD      R2,R0,R2, LSL #+1
   \      0xCD0   0xE083'CC92        UMULL    R12,R3,R2,R12
   \      0xCD4   0x....'....        LDR      R12,??DataTable6_3  ;; 0x83126e98
   \      0xCD8   0xE1A0'24A3        LSR      R2,R3,#+9
   \      0xCDC   0xE352'000A        CMP      R2,#+10
   \      0xCE0   0x93A0'200A        MOVLS    R2,#+10
   \      0xCE4   0xE351'0002        CMP      R1,#+2
   \      0xCE8   0xE5C4'2014        STRB     R2,[R4, #+20]
   \      0xCEC   0xE085'2305        ADD      R2,R5,R5, LSL #+6
   \      0xCF0   0xE080'2082        ADD      R2,R0,R2, LSL #+1
   \      0xCF4   0xE083'CC92        UMULL    R12,R3,R2,R12
   \      0xCF8   0xE1A0'34A3        LSR      R3,R3,#+9
   \      0xCFC   0xE5C4'301F        STRB     R3,[R4, #+31]
   \      0xD00   0x9A00'0004        BLS      ??ddram_init_descriptor_27
   \      0xD04   0xE351'0004        CMP      R1,#+4
   \      0xD08   0xE5C4'101C        STRB     R1,[R4, #+28]
   \      0xD0C   0x9A00'0002        BLS      ??ddram_init_descriptor_28
   \      0xD10   0xE1A0'7001        MOV      R7,R1
   \      0xD14   0xEA00'0000        B        ??ddram_init_descriptor_28
   \                     ??ddram_init_descriptor_27:
   \      0xD18   0xE5C4'601C        STRB     R6,[R4, #+28]
   \                     ??ddram_init_descriptor_28:
   \      0xD1C   0xE3A0'1032        MOV      R1,#+50
   \      0xD20   0x....'....        LDR      R3,??DataTable6_3  ;; 0x83126e98
   \      0xD24   0xE100'0581        SMLABB   R0,R1,R5,R0
   \      0xD28   0xE5C4'7021        STRB     R7,[R4, #+33]
   \      0xD2C   0xE082'3390        UMULL    R3,R2,R0,R3
   \      0xD30   0xE1A0'04A2        LSR      R0,R2,#+9
   \      0xD34   0xE350'0009        CMP      R0,#+9
   \      0xD38   0x33A0'0008        MOVCC    R0,#+8
   \      0xD3C   0xE5C4'0020        STRB     R0,[R4, #+32]
   \      0xD40   0xE3A0'0020        MOV      R0,#+32
   \      0xD44   0xEAFF'FD71        B        ??ddram_init_descriptor_10
   \                     ??ddram_init_descriptor_2:
   \      0xD48   0x....'....        LDR      R2,??DataTable6_7
   \      0xD4C   0xE592'0000        LDR      R0,[R2, #+0]
   \      0xD50   0xE350'0000        CMP      R0,#+0
   \      0xD54   0x0A00'0001        BEQ      ??ddram_init_descriptor_29
   \      0xD58   0x....'....        ADR      R0,?_2
   \      0xD5C   0x....'....        BL       printf
   \                     ??ddram_init_descriptor_29:
   \      0xD60   0xEAFF'FFFE        B        ??ddram_init_descriptor_29
   1129          

   \                                 In section SOFTPACK, align 4, keep-with-next
   1130          void ddram_configure(struct _mpddrc_desc* desc)
   1131          {
   \                     ddram_configure:
   \        0x0   0xE92D'4010        PUSH     {R4,LR}
   \        0x4   0xE1A0'4000        MOV      R4,R0
   1132          	assert(!dcache_is_enabled());
   \        0x8   0x....'....        BL       dcache_is_enabled
   \        0xC   0xE350'0000        CMP      R0,#+0
   \       0x10   0x0A00'0004        BEQ      ??ddram_configure_0
   \       0x14   0xE300'246C        MOVW     R2,#+1132
   \       0x18   0x....'....        LDR      R1,??DataTable6
   \       0x1C   0x....'....        ADR      R0,?_3
   \       0x20   0x....'....        BL       __aeabi_assert
   \       0x24   0x....'....        BL       __iar_EmptyStepPoint
   1133          	mpddrc_configure(desc);
   \                     ??ddram_configure_0:
   \       0x28   0xE1A0'0004        MOV      R0,R4
   \       0x2C   0xE8BD'4010        POP      {R4,LR}
   \       0x30   0x....'....        B        mpddrc_configure  ;; tailcall
   1134          }

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable4:
   \        0x0   0x8312'6E98        DC32     0x83126e98

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable4_1:
   \        0x0   0x00D0'035D        DC32     0xd0035d

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable6:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable6_1:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable6_2:
   \        0x0   0x00D0'013D        DC32     0xd0013d

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable6_3:
   \        0x0   0x8312'6E98        DC32     0x83126e98

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable6_4:
   \        0x0   0x00D0'0139        DC32     0xd00139

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable6_5:
   \        0x0   0x00C0'0139        DC32     0xc00139

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable6_6:
   \        0x0   0x8637'BD06        DC32     0x8637bd06

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable6_7:
   \        0x0   0x....'....        DC32     trace_level

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ?_2:
   \        0x0   0x2D 0x46          DC8 "-F- Unsupported DDRAM type\015\012"

   \              0x2D 0x20    

   \              0x55 0x6E    

   \              0x73 0x75    

   \              0x70 0x70    

   \              0x6F 0x72    

   \              0x74 0x65    

   \              0x64 0x20    

   \              0x44 0x44    

   \              0x52 0x41    

   \              0x4D 0x20    

   \              0x74 0x79    

   \              0x70 0x65    

   \              0x0D 0x0A    

   \              0x00
   \       0x1D   0x00 0x00          DC8 0, 0, 0

   \              0x00

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ?_3:
   \        0x0   0x21 0x64          DC8 "!dcache_is_enabled()"

   \              0x63 0x61    

   \              0x63 0x68    

   \              0x65 0x5F    

   \              0x69 0x73    

   \              0x5F 0x65    

   \              0x6E 0x61    

   \              0x62 0x6C    

   \              0x65 0x64    

   \              0x28 0x29    

   \              0x00
   \       0x15   0x00 0x00          DC8 0, 0, 0

   \              0x00

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x43 0x3A          DC8 0x43, 0x3A, 0x5C, 0x77, 0x6F, 0x72, 0x6B, 0x5C

   \              0x5C 0x77    

   \              0x6F 0x72    

   \              0x6B 0x5C
   \        0x8   0x41 0x74          DC8 0x41, 0x74, 0x6D, 0x65, 0x6C, 0x53, 0x6F, 0x66

   \              0x6D 0x65    

   \              0x6C 0x53    

   \              0x6F 0x66
   \       0x10   0x74 0x50          DC8 0x74, 0x50, 0x41, 0x63, 0x6B, 0x5C, 0x61, 0x74

   \              0x41 0x63    

   \              0x6B 0x5C    

   \              0x61 0x74
   \       0x18   0x6D 0x65          DC8 0x6D, 0x65, 0x6C, 0x2D, 0x73, 0x6F, 0x66, 0x74

   \              0x6C 0x2D    

   \              0x73 0x6F    

   \              0x66 0x74
   \       0x20   0x77 0x61          DC8 0x77, 0x61, 0x72, 0x65, 0x2D, 0x70, 0x61, 0x63

   \              0x72 0x65    

   \              0x2D 0x70    

   \              0x61 0x63
   \       0x28   0x6B 0x61          DC8 0x6B, 0x61, 0x67, 0x65, 0x2D, 0x32, 0x2E, 0x31

   \              0x67 0x65    

   \              0x2D 0x32    

   \              0x2E 0x31
   \       0x30   0x37 0x5C          DC8 0x37, 0x5C, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72

   \              0x64 0x72    

   \              0x69 0x76    

   \              0x65 0x72
   \       0x38   0x73 0x5C          DC8 0x73, 0x5C, 0x65, 0x78, 0x74, 0x72, 0x61, 0x6D

   \              0x65 0x78    

   \              0x74 0x72    

   \              0x61 0x6D
   \       0x40   0x5C 0x64          DC8 0x5C, 0x64, 0x64, 0x72, 0x61, 0x6D, 0x2E, 0x63

   \              0x64 0x72    

   \              0x61 0x6D    

   \              0x2E 0x63
   \       0x48   0x00               DC8 0
   \       0x49   0x00 0x00          DC8 0, 0, 0

   \              0x00

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_1:
   \        0x0   0x6D 0x63          DC8 "mck >= 125 && mck <= 200"

   \              0x6B 0x20    

   \              0x3E 0x3D    

   \              0x20 0x31    

   \              0x32 0x35    

   \              0x20 0x26    

   \              0x26 0x20    

   \              0x6D 0x63    

   \              0x6B 0x20    

   \              0x3C 0x3D    

   \              0x20 0x32    

   \              0x30 0x30    

   \              0x00
   \       0x19   0x00 0x00          DC8 0, 0, 0

   \              0x00

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   _init_mt41k128m16
        32   -> __aeabi_memclr4
        32   -> pmc_get_master_clock
      32   _init_w972gg6kb
        32   -> __aeabi_assert
        32   -> __aeabi_memclr4
        32   -> __iar_EmptyStepPoint
        32   -> pmc_get_master_clock
       8   ddram_configure
         8   -> __aeabi_assert
         8   -> __iar_EmptyStepPoint
         8   -> dcache_is_enabled
         0   -> mpddrc_configure
      40   ddram_init_descriptor
        40   -> __aeabi_assert
        40   -> __aeabi_memclr4
        40   -> __iar_EmptyStepPoint
         0   -> _init_mt41k128m16
         0   -> _init_w972gg6kb
        40   -> pmc_get_master_clock
        40   -> printf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
      76  ?_0
      28  ?_1
      32  ?_2
      24  ?_3
     396  _init_mt41k128m16
     448  _init_w972gg6kb
      52  ddram_configure
   3'428  ddram_init_descriptor

 
   104 bytes in section .rodata
 4'420 bytes in section SOFTPACK
 
 4'420 bytes of CODE  memory
   104 bytes of CONST memory

Errors: none
Warnings: none
