###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.1.245/W32 for ARM         22/Jul/2020  10:36:47
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode                        
#    Endian                       =  little
#    Source file                  =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\flash_loaders\applets\extram\extram_flash_loader.c
#    Command line                 =
#        -f C:\Users\c40450\AppData\Local\Temp\EW28E3.tmp
#        (C:\work\AtmelSoftPAck\atmel-software-package-2.17\flash_loaders\applets\extram\extram_flash_loader.c
#        -D "SOFTPACK_VERSION=\"2.17\"" -D TRACE_LEVEL=5 -D VARIANT_SRAM -D
#        CONFIG_ARCH_ARMV5TE -D CONFIG_ARCH_ARM -D CONFIG_SOC_SAM9X60 -D
#        CONFIG_CHIP_SAM9X60 -D CONFIG_BOARD_SAM9X60_GENERIC -D
#        CONFIG_HAVE_AIC5 -D CONFIG_HAVE_FLEXCOM -D CONFIG_HAVE_PIO3 -D
#        CONFIG_HAVE_PIT -D CONFIG_HAVE_SMC -D CONFIG_HAVE_SDRAMC -D
#        CONFIG_HAVE_MPDDRC -D CONFIG_HAVE_MPDDRC_DATA_PATH -D
#        CONFIG_HAVE_MPDDRC_IO_CALIBRATION -D CONFIG_HAVE_MPDDRC_DDR2 -D
#        CONFIG_HAVE_ADC_LOW_RES -D CONFIG_HAVE_PMC_FAST_STARTUP -D
#        CONFIG_HAVE_PMC_GENERATED_CLOCKS -D CONFIG_HAVE_SCKC -D
#        CONFIG_TIMER_POLLING -D CONFIG_HAVE_NFD0_ON_D16 -D CONFIG_HAVE_XDMAC
#        -D CONFIG_HAVE_PWMC -D CONFIG_HAVE_SDRAM_W9864G6KH -D
#        CONFIG_HAVE_DDR2_MT47H64M16 -D CONFIG_HAVE_DDR2_W972GG6KB -D
#        CONFIG_HAVE_RSTC_EXTERNAL_RESET -D CONFIG_HAVE_RSTC_INDEPENDENT_RESET
#        -D CONFIG_HAVE_RTT -D CONFIG_HAVE_SHDWC -D CONFIG_HAVE_MMU -D
#        CONFIG_HAVE_L1CACHE -D CONFIG_HAVE_OTPC -D CONFIG_HAVE_DBGU -D
#        CONFIG_HAVE_SERIALD_DBGU -D CONFIG_HAVE_USART -D
#        CONFIG_HAVE_USART_FIFO -D CONFIG_HAVE_SERIALD_USART -D
#        CONFIG_HAVE_DWDT --preprocess
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\flash_loaders\applets\extram\build\sam9x60-generic\sram\List
#        -lC
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\flash_loaders\applets\extram\build\sam9x60-generic\sram\List
#        --diag_suppress Pa050 -o
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\flash_loaders\applets\extram\build\sam9x60-generic\sram\Obj
#        --debug --endian=little --cpu=ARM926EJ-S -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\flash_loaders\applets\extram\..\..\..\flash_loaders\applets\common\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\flash_loaders\applets\extram\..\..\..\flash_loaders\applets\common\framework2\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\flash_loaders\applets\extram\..\..\..\arch\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\flash_loaders\applets\extram\..\..\..\utils\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\flash_loaders\applets\extram\..\..\..\target\common\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\flash_loaders\applets\extram\..\..\..\target\sam9x60\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\flash_loaders\applets\extram\..\..\..\drivers\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\flash_loaders\applets\extram\..\..\..\lib\
#        --section .text=SOFTPACK --cpu_mode arm -Oh)
#    Locale                       =  C
#    List file                    =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\flash_loaders\applets\extram\build\sam9x60-generic\sram\List\extram_flash_loader.lst
#    Object file                  =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\flash_loaders\applets\extram\build\sam9x60-generic\sram\Obj\extram_flash_loader.o
#    Runtime model:                  
#      __SystemLibrary            =  DLib
#      __dlib_file_descriptor     =  0
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#      __iar_require _Printf      =  flags,int_specials,widths
#
###############################################################################

C:\work\AtmelSoftPAck\atmel-software-package-2.17\flash_loaders\applets\extram\extram_flash_loader.c
      1          /* ----------------------------------------------------------------------------
      2           *         SAM Software Package License
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2017, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          /** \addtogroup flash_flashloader Embedded Flash Flashloader
     31           *
     32           * It describes how to write and debug your own flash loader.
     33           * Finally, the flash loader framework API functions are described in detail.
     34           *
     35           * Related files :\n
     36           * \ref flashd.c\n
     37           * \ref flashd.h.\n
     38           * \ref efc.c\n
     39           * \ref efc.h.\n
     40          */
     41          /*@{*/
     42          /*@}*/
     43          
     44          
     45          /**
     46           * \file
     47           *
     48           * The flash flashloader provides the embedded flash flashloader framework.
     49           *
     50           */
     51          
     52          /*----------------------------------------------------------------------------
     53           *        Headers
     54           *----------------------------------------------------------------------------*/
     55          
     56          #include <stdio.h>
     57          #include <stdint.h>
     58          #include <stdlib.h>
     59          #include <string.h>
     60          
     61          #include <board.h>
     62          #include "board_console.h"
     63          #include "extram/ddram.h"
     64          #include "flash_loader.h"
     65          #include "flash_loader_extra.h"
     66          #include "gpio/pio.h"
     67          #include "interface.h"
     68          #include "irqflags.h"
     69          #include "irq/irq.h"
     70          #include "peripherals/pmc.h"
     71          #include "trace.h"
     72          
     73          /*----------------------------------------------------------------------------
     74           *        Local definitions
     75           *----------------------------------------------------------------------------*/
     76          
     77          /* Debug enable/disable */
     78          #define DEBUG
     79          
     80          /*----------------------------------------------------------------------------
     81           *        Local Varible
     82           *----------------------------------------------------------------------------*/
     83          

   \                                 In section .bss, align 4
     84          static char message[80];
   \                     message:
   \        0x0                      DS8 80
     85          
     86          /*----------------------------------------------------------------------------
     87           *        Local functions
     88           *----------------------------------------------------------------------------*/
     89          
     90          /* override default board init */

   \                                 In section SOFTPACK, align 4, keep-with-next
     91          void board_init(void)
     92          {
   \                     board_init:
   \        0x0   0xE92D'5000        PUSH     {R12,LR}
     93          	board_cfg_lowlevel(true, false, false);
   \        0x4   0xE3A0'2000        MOV      R2,#+0
   \        0x8   0xE3A0'1000        MOV      R1,#+0
   \        0xC   0xE3A0'0001        MOV      R0,#+1
   \       0x10   0x....'....        BL       board_cfg_lowlevel
     94          	board_cfg_console(0);
   \       0x14   0xE8BD'4002        POP      {R1,LR}
   \       0x18   0xE3A0'0000        MOV      R0,#+0
   \       0x1C   0x....'....        B        board_cfg_console  ;; tailcall
     95          }
     96          
     97          /*----------------------------------------------------------------------------
     98           *        Export functions
     99           *----------------------------------------------------------------------------*/
    100          
    101          /**
    102           * \brief Initializes the flash driver.
    103           *
    104           * \param base_of_flash  base address of flash memory.
    105           * \param image_size The size of the whole image that is to be written in bytes.
    106           * \param link_address The original link address of the first byte of the image.
    107           * \param flags Contains optional flags.
    108           * \param  argc Number of arguments.
    109           * \param  An array of argument string pointers.
    110           * \return 0 if successful; otherwise returns an error code.
    111           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    112          uint32_t FlashInit(void *base_of_flash,
    113          		   uint32_t image_size,
    114          		   uint32_t link_address,
    115          		   uint32_t flags,
    116          		   int argc,
    117          		   char const *argv[])
    118          {
   \                     FlashInit:
   \        0x0   0xE92D'4070        PUSH     {R4-R6,LR}
    119          	enum _ddram_devices device;
    120          	struct _mpddrc_desc desc;
    121          	const char *arg;
    122          	uint32_t preset;
    123          
    124          	/* stop warning */
    125          	base_of_flash = base_of_flash;
    126          	image_size = image_size;
    127          	link_address = link_address;
    128          	flags = flags;
    129          
    130          #ifdef DEBUG
    131          	sprintf(message, "%s", "-I- External ram loader");
   \        0x4   0x....'....        LDR      R6,??DataTable11_1
   \        0x8   0xE24D'D030        SUB      SP,SP,#+48
   \        0xC   0xE59D'4040        LDR      R4,[SP, #+64]
   \       0x10   0xE59D'5044        LDR      R5,[SP, #+68]
   \       0x14   0x....'....        ADR      R2,?_3
   \       0x18   0x....'....        ADR      R1,??DataTable11  ;; 0x25, 0x73, 0x00, 0x00
   \       0x1C   0xE1A0'0006        MOV      R0,R6
   \       0x20   0x....'....        BL       sprintf
    132          	cSpyMessageLog(message);
   \       0x24   0xE1A0'0006        MOV      R0,R6
   \       0x28   0x....'....        BL       cSpyMessageLog
    133          #endif
    134          
    135          	arg = findOption("--preset", 1, argc, argv);
   \       0x2C   0xE1A0'3005        MOV      R3,R5
   \       0x30   0xE1A0'2004        MOV      R2,R4
   \       0x34   0xE3A0'1001        MOV      R1,#+1
   \       0x38   0x....'....        ADR      R0,?_4
   \       0x3C   0x....'....        BL       findOption
    136          	preset = strtoul(arg, 0, 0);
   \       0x40   0xE3A0'2000        MOV      R2,#+0
   \       0x44   0xE3A0'1000        MOV      R1,#+0
   \       0x48   0x....'....        BL       strtoul
   \       0x4C   0xE1A0'4000        MOV      R4,R0
    137          
    138          	board_init();
   \       0x50   0xE3A0'2000        MOV      R2,#+0
   \       0x54   0xE3A0'1000        MOV      R1,#+0
   \       0x58   0xE3A0'0001        MOV      R0,#+1
   \       0x5C   0x....'....        BL       board_cfg_lowlevel
   \       0x60   0xE3A0'0000        MOV      R0,#+0
   \       0x64   0x....'....        BL       board_cfg_console
    139          
    140          	switch (preset) {
   \       0x68   0xE354'0001        CMP      R4,#+1
   \       0x6C   0x0A00'0004        BEQ      ??FlashInit_0
   \       0x70   0xE354'0009        CMP      R4,#+9
   \       0x74   0x0A00'0012        BEQ      ??FlashInit_1
   \       0x78   0xE354'000B        CMP      R4,#+11
   \       0x7C   0x0A00'0018        BEQ      ??FlashInit_2
   \       0x80   0xEA00'001F        B        ??FlashInit_3
    141          #ifdef CONFIG_HAVE_DDR2_MT47H128M8
    142          	case 0:
    143          		trace_warning_wp("Preset 0 (4 x MT47H128M8)\r\n");
    144          		device = MT47H128M8;
    145          		break;
    146          #endif
    147          #ifdef CONFIG_HAVE_DDR2_MT47H64M16
    148          	case 1:
    149          		trace_warning_wp("Preset 1 (MT47H64M16)\r\n");
   \                     ??FlashInit_0:
   \       0x84   0x....'....        LDR      R0,??DataTable11_2
   \       0x88   0xE590'1000        LDR      R1,[R0, #+0]
   \       0x8C   0xE351'0003        CMP      R1,#+3
   \       0x90   0x3A00'0001        BCC      ??FlashInit_4
   \       0x94   0x....'....        ADR      R0,?_5
   \       0x98   0x....'....        BL       printf
    150          		device = MT47H64M16;
   \                     ??FlashInit_4:
   \       0x9C   0xE3A0'4000        MOV      R4,#+0
    151          		break;
    152          #endif
    153          #ifdef CONFIG_HAVE_DDR2_MT47H128M16
    154          	case 2:
    155          		trace_warning_wp("Preset 2 (2 x MT47H128M16)\r\n");
    156          		device = MT47H128M16;
    157          		break;
    158          #endif
    159          #ifdef CONFIG_HAVE_LPDDR2_MT42L128M16
    160          	case 3:
    161          		trace_warning_wp("Preset 3 (2 x MT42L128M16)\r\n");
    162          		device = MT42L128M16;
    163          		break;
    164          #endif
    165          #ifdef CONFIG_HAVE_DDR3_MT41K128M16
    166          	case 4:
    167          		trace_warning_wp("Preset 4 (2 x MT41K128M16)\r\n");
    168          		device = MT41K128M16;
    169          		break;
    170          	case 12:
    171          		trace_warning_wp("Preset 12 (1 x MT41K128M16)\r\n");
    172          		device = MT41K128M16_16;
    173          		break;
    174          #endif
    175          #ifdef CONFIG_HAVE_LPDDR3_EDF8164A3MA
    176          	case 5:
    177          		trace_warning_wp("Preset 5 (EDF8164A3MA)\r\n");
    178          		device = EDF8164A3MA;
    179          		break;
    180          #endif
    181          #ifdef CONFIG_HAVE_SDRAM_IS42S16100E
    182          	case 6:
    183          		trace_warning_wp("Preset 6 (IS42S16100E)\r\n");
    184          
    185          		sprintf(message, "%s", "Preset 6 (IS42S16100E)\r\n");
    186          	cSpyMessageLog(message);
    187          
    188          		device = IS42S16100E;
    189          		break;
    190          #endif
    191          #ifdef CONFIG_HAVE_SDRAM_W981216BH
    192          	case 7:
    193          		trace_warning_wp("Preset 7 (W981216BH)\r\n");
    194          		device = W981216BH;
    195          		break;
    196          #endif
    197          #ifdef CONFIG_HAVE_DDR2_W971GG6SB
    198          	case 8:
    199          		trace_warning_wp("Preset 8 (W971GG6SB)\r\n");
    200          		device = W971GG6SB;
    201          		break;
    202          #endif
    203          #ifdef CONFIG_HAVE_DDR2_W972GG6KB
    204          	case 9:
    205          		trace_warning_wp("Preset 9 (W972GG6KB)\r\n");
    206          		device = W972GG6KB;
    207          		break;
    208          	case 11:
    209          		trace_warning_wp("Preset 11 (W972GG6KB_16)\r\n");
    210          		device = W972GG6KB_16;
    211          		break;
    212          #endif
    213          
    214          #ifdef CONFIG_HAVE_DDR2_W9712G6KB
    215          	case 15:
    216          		trace_warning_wp("Preset 15 (W9712G6KB)\r\n");
    217          		device = W9712G6KB;
    218          		break;
    219          #endif
    220          #ifdef CONFIG_HAVE_DDR2_W9751G6KB
    221          	case 16:
    222          		trace_warning_wp("Preset 16 (W9751G6KB)\r\n");
    223          		device = W9751G6KB;
    224          		break;
    225          #endif
    226          
    227          #ifdef CONFIG_HAVE_SDRAM_AS4C16M16SA
    228          	case 10:
    229          		printf("Preset 10 (AS4C16M16SA)\r\n");
    230          		device = AS4C16M16SA;
    231          		break;
    232          #endif
    233          #ifdef CONFIG_HAVE_LPDDR2_AD220032D
    234          	case 13:
    235          		trace_warning_wp("Preset 13 (AD220032D)\r\n");
    236          		device = AD220032D;
    237          		break;
    238          #endif
    239          #ifdef CONFIG_HAVE_LPDDR2_AD210032D
    240          	case 14:
    241          		trace_warning_wp("Preset 14 (AD210032D)\r\n");
    242          		device = AD210032D;
    243          		break;
    244          #endif
    245          	default:
    246          		trace_warning_wp("Unsupported DRAM preset (%u).\r\n",
    247          				(unsigned)preset);
    248          		return false;
    249          	}
    250          #ifdef BOARD_DDRAM_PINS
    251          	const struct _pin ddram_pins[] = BOARD_DDRAM_PINS;
    252          	pio_configure(ddram_pins, ARRAY_SIZE(ddram_pins));
    253          #endif
    254          	board_cfg_matrix_for_ddr();
   \                     ??FlashInit_5:
   \       0xA0   0x....'....        BL       board_cfg_matrix_for_ddr
    255          	ddram_init_descriptor(&desc, device);
   \       0xA4   0xE1A0'1004        MOV      R1,R4
   \       0xA8   0xE1A0'000D        MOV      R0,SP
   \       0xAC   0x....'....        BL       ddram_init_descriptor
    256          	ddram_configure(&desc);
   \       0xB0   0xE1A0'000D        MOV      R0,SP
   \       0xB4   0x....'....        BL       ddram_configure
    257          	return RESULT_OK;
   \                     ??FlashInit_6:
   \       0xB8   0xE3A0'0000        MOV      R0,#+0
   \       0xBC   0xE28D'D030        ADD      SP,SP,#+48
   \       0xC0   0xE8BD'8070        POP      {R4-R6,PC}       ;; return
   \                     ??FlashInit_1:
   \       0xC4   0x....'....        LDR      R0,??DataTable11_2
   \       0xC8   0xE590'1000        LDR      R1,[R0, #+0]
   \       0xCC   0xE351'0003        CMP      R1,#+3
   \       0xD0   0x3A00'0001        BCC      ??FlashInit_7
   \       0xD4   0x....'....        ADR      R0,?_6
   \       0xD8   0x....'....        BL       printf
   \                     ??FlashInit_7:
   \       0xDC   0xE3A0'4002        MOV      R4,#+2
   \       0xE0   0xEAFF'FFEE        B        ??FlashInit_5
   \                     ??FlashInit_2:
   \       0xE4   0x....'....        LDR      R0,??DataTable11_2
   \       0xE8   0xE590'1000        LDR      R1,[R0, #+0]
   \       0xEC   0xE351'0003        CMP      R1,#+3
   \       0xF0   0x3A00'0001        BCC      ??FlashInit_8
   \       0xF4   0x....'....        ADR      R0,?_7
   \       0xF8   0x....'....        BL       printf
   \                     ??FlashInit_8:
   \       0xFC   0xE3A0'4001        MOV      R4,#+1
   \      0x100   0xEAFF'FFE6        B        ??FlashInit_5
   \                     ??FlashInit_3:
   \      0x104   0x....'....        LDR      R0,??DataTable11_2
   \      0x108   0xE590'1000        LDR      R1,[R0, #+0]
   \      0x10C   0xE351'0003        CMP      R1,#+3
   \      0x110   0x3AFF'FFE8        BCC      ??FlashInit_6
   \      0x114   0xE1A0'1004        MOV      R1,R4
   \      0x118   0x....'....        ADR      R0,?_8
   \      0x11C   0x....'....        BL       printf
   \      0x120   0xEAFF'FFE4        B        ??FlashInit_6
    258          }
    259          
    260          /**
    261           * \brief Writes a data buffer in the internal flash.
    262           *
    263           * \param block_start  address of the start of the flash memory block affected by the write operation.
    264           * \param offset_into_block  How far into the current block that this write operation shall start.
    265           * \param count  Size of data buffer in bytes.
    266           * \param buffer Points to the buffer containing the bytes to write.
    267           * \return 0 if successful; otherwise returns an error code.
    268           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    269          uint32_t FlashWrite(void *block_start, uint32_t offset_into_block, uint32_t count, char const *buffer)
    270          {
   \                     FlashWrite:
   \        0x0   0xE92D'41FC        PUSH     {R2-R8,LR}
    271          	uint32_t i;
    272          	uint8_t* p1;
    273          	uint8_t* p2;
    274          #ifdef DEBUG
    275          	sprintf(message, "-I- Write arguments: address 0x%08x,  offset 0x%x of 0x%x Bytes", (unsigned int)block_start, offset_into_block,count );
   \        0x4   0x....'....        LDR      R8,??DataTable11_1
   \        0x8   0xE1A0'4000        MOV      R4,R0
   \        0xC   0xE1A0'5001        MOV      R5,R1
   \       0x10   0xE1A0'6002        MOV      R6,R2
   \       0x14   0xE1A0'7003        MOV      R7,R3
   \       0x18   0xE58D'6000        STR      R6,[SP, #+0]
   \       0x1C   0xE1A0'3005        MOV      R3,R5
   \       0x20   0xE1A0'2004        MOV      R2,R4
   \       0x24   0x....'....        LDR      R1,??DataTable11_3
   \       0x28   0xE1A0'0008        MOV      R0,R8
   \       0x2C   0x....'....        BL       sprintf
    276          	cSpyMessageLog(message);
   \       0x30   0xE1A0'0008        MOV      R0,R8
   \       0x34   0x....'....        BL       cSpyMessageLog
    277          #endif
    278          
    279          	p1 = (uint8_t*)((uint32_t)block_start + offset_into_block);
   \       0x38   0xE085'0004        ADD      R0,R5,R4
    280          	p2 = (uint8_t*)buffer;
    281          	for (i = 0; i < count; i++)
   \       0x3C   0xE356'0000        CMP      R6,#+0
   \       0x40   0x0A00'0003        BEQ      ??FlashWrite_0
    282          		*p1++ = *p2++;
   \                     ??FlashWrite_1:
   \       0x44   0xE4D7'1001        LDRB     R1,[R7], #+1
   \       0x48   0xE256'6001        SUBS     R6,R6,#+1
   \       0x4C   0xE4C0'1001        STRB     R1,[R0], #+1
   \       0x50   0x1AFF'FFFB        BNE      ??FlashWrite_1
    283          
    284          	sprintf(message, "-I- Write Done!");
   \                     ??FlashWrite_0:
   \       0x54   0x....'....        ADR      R1,?_9
   \       0x58   0xE1A0'0008        MOV      R0,R8
   \       0x5C   0x....'....        BL       sprintf
    285          	cSpyMessageLog(message);
   \       0x60   0xE1A0'0008        MOV      R0,R8
   \       0x64   0x....'....        BL       cSpyMessageLog
    286          
    287          	return RESULT_OK;
   \       0x68   0xE3A0'0000        MOV      R0,#+0
   \       0x6C   0xE8BD'81F6        POP      {R1,R2,R4-R8,PC}  ;; return
    288          }
    289          
    290          /**
    291           * \brief  Unlock the flash in giving address. (auto erased before program).
    292           *
    293           * \param block_start Address of the start of the flash memory block affected by the write operation.
    294           * \param block_size  The size of the block, in bytes.
    295           * \return 0 if successful; otherwise returns an error code.
    296           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    297          uint32_t FlashErase(void *block_start, uint32_t block_size)
    298          {
   \                     FlashErase:
   \        0x0   0xE92D'4010        PUSH     {R4,LR}
    299          #ifdef DEBUG
    300          	sprintf(message, "-I- Erase arguments: address 0x%08x of 0x%x Bytes", (unsigned int)block_start, block_size);
   \        0x4   0x....'....        LDR      R4,??DataTable11_1
   \        0x8   0xE1A0'2000        MOV      R2,R0
   \        0xC   0xE1A0'3001        MOV      R3,R1
   \       0x10   0x....'....        LDR      R1,??DataTable11_4
   \       0x14   0xE1A0'0004        MOV      R0,R4
   \       0x18   0x....'....        BL       sprintf
    301          	cSpyMessageLog(message);
   \       0x1C   0xE1A0'0004        MOV      R0,R4
   \       0x20   0x....'....        BL       cSpyMessageLog
    302          #endif
    303          	return RESULT_OK;
   \       0x24   0xE3A0'0000        MOV      R0,#+0
   \       0x28   0xE8BD'8010        POP      {R4,PC}          ;; return
    304          }
    305          
    306          /**
    307           * \brief  UThis is an optional function. You can implement it if you need to perform
    308           * some cleanup after flash loading has finished.
    309           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    310          uint32_t FlashSignoff(void)
    311          {
    312          	return RESULT_OK;
   \                     FlashSignoff:
   \        0x0   0xE3A0'0000        MOV      R0,#+0
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
    313          }

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable11:
   \        0x0   0x25 0x73          DC8      0x25, 0x73, 0x00, 0x00

   \              0x00 0x00

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable11_1:
   \        0x0   0x....'....        DC32     message

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable11_2:
   \        0x0   0x....'....        DC32     trace_level

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable11_3:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable11_4:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ?_3:
   \        0x0   0x2D 0x49          DC8 "-I- External ram loader"

   \              0x2D 0x20    

   \              0x45 0x78    

   \              0x74 0x65    

   \              0x72 0x6E    

   \              0x61 0x6C    

   \              0x20 0x72    

   \              0x61 0x6D    

   \              0x20 0x6C    

   \              0x6F 0x61    

   \              0x64 0x65    

   \              0x72 0x00

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ?_4:
   \        0x0   0x2D 0x2D          DC8 "--preset"

   \              0x70 0x72    

   \              0x65 0x73    

   \              0x65 0x74    

   \              0x00
   \        0x9   0x00 0x00          DC8 0, 0, 0

   \              0x00

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x2D 0x49          DC8 0x2D, 0x49, 0x2D, 0x20, 0x57, 0x72, 0x69, 0x74

   \              0x2D 0x20    

   \              0x57 0x72    

   \              0x69 0x74
   \        0x8   0x65 0x20          DC8 0x65, 0x20, 0x61, 0x72, 0x67, 0x75, 0x6D, 0x65

   \              0x61 0x72    

   \              0x67 0x75    

   \              0x6D 0x65
   \       0x10   0x6E 0x74          DC8 0x6E, 0x74, 0x73, 0x3A, 0x20, 0x61, 0x64, 0x64

   \              0x73 0x3A    

   \              0x20 0x61    

   \              0x64 0x64
   \       0x18   0x72 0x65          DC8 0x72, 0x65, 0x73, 0x73, 0x20, 0x30, 0x78, 0x25

   \              0x73 0x73    

   \              0x20 0x30    

   \              0x78 0x25
   \       0x20   0x30 0x38          DC8 0x30, 0x38, 0x78, 0x2C, 0x20, 0x20, 0x6F, 0x66

   \              0x78 0x2C    

   \              0x20 0x20    

   \              0x6F 0x66
   \       0x28   0x66 0x73          DC8 0x66, 0x73, 0x65, 0x74, 0x20, 0x30, 0x78, 0x25

   \              0x65 0x74    

   \              0x20 0x30    

   \              0x78 0x25
   \       0x30   0x78 0x20          DC8 0x78, 0x20, 0x6F, 0x66, 0x20, 0x30, 0x78, 0x25

   \              0x6F 0x66    

   \              0x20 0x30    

   \              0x78 0x25
   \       0x38   0x78 0x20          DC8 0x78, 0x20, 0x42, 0x79, 0x74, 0x65, 0x73, 0

   \              0x42 0x79    

   \              0x74 0x65    

   \              0x73 0x00

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x2D 0x49          DC8 "-I- Erase arguments: address 0x%08x of 0x%x Bytes"

   \              0x2D 0x20    

   \              0x45 0x72    

   \              0x61 0x73    

   \              0x65 0x20    

   \              0x61 0x72    

   \              0x67 0x75    

   \              0x6D 0x65    

   \              0x6E 0x74    

   \              0x73 0x3A    

   \              0x20 0x61    

   \              0x64 0x64    

   \              0x72 0x65    

   \              0x73 0x73    

   \              0x20 0x30    

   \              0x78 0x25    

   \              0x30 0x38    

   \              0x78 0x20    

   \              0x6F 0x66    

   \              0x20 0x30    

   \              0x78 0x25    

   \              0x78 0x20    

   \              0x42 0x79    

   \              0x74 0x65    

   \              0x73 0x00
   \       0x32   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_2:
   \        0x0   0x25 0x73          DC8 "%s"

   \              0x00
   \        0x3   0x00               DC8 0

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ?_5:
   \        0x0   0x50 0x72          DC8 "Preset 1 (MT47H64M16)\015\012"

   \              0x65 0x73    

   \              0x65 0x74    

   \              0x20 0x31    

   \              0x20 0x28    

   \              0x4D 0x54    

   \              0x34 0x37    

   \              0x48 0x36    

   \              0x34 0x4D    

   \              0x31 0x36    

   \              0x29 0x0D    

   \              0x0A 0x00

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ?_6:
   \        0x0   0x50 0x72          DC8 "Preset 9 (W972GG6KB)\015\012"

   \              0x65 0x73    

   \              0x65 0x74    

   \              0x20 0x39    

   \              0x20 0x28    

   \              0x57 0x39    

   \              0x37 0x32    

   \              0x47 0x47    

   \              0x36 0x4B    

   \              0x42 0x29    

   \              0x0D 0x0A    

   \              0x00
   \       0x17   0x00               DC8 0

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ?_7:
   \        0x0   0x50 0x72          DC8 "Preset 11 (W972GG6KB_16)\015\012"

   \              0x65 0x73    

   \              0x65 0x74    

   \              0x20 0x31    

   \              0x31 0x20    

   \              0x28 0x57    

   \              0x39 0x37    

   \              0x32 0x47    

   \              0x47 0x36    

   \              0x4B 0x42    

   \              0x5F 0x31    

   \              0x36 0x29    

   \              0x0D 0x0A    

   \              0x00
   \       0x1B   0x00               DC8 0

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ?_8:
   \        0x0   0x55 0x6E          DC8 "Unsupported DRAM preset (%u).\015\012"

   \              0x73 0x75    

   \              0x70 0x70    

   \              0x6F 0x72    

   \              0x74 0x65    

   \              0x64 0x20    

   \              0x44 0x52    

   \              0x41 0x4D    

   \              0x20 0x70    

   \              0x72 0x65    

   \              0x73 0x65    

   \              0x74 0x20    

   \              0x28 0x25    

   \              0x75 0x29    

   \              0x2E 0x0D    

   \              0x0A 0x00

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ?_9:
   \        0x0   0x2D 0x49          DC8 "-I- Write Done!"

   \              0x2D 0x20    

   \              0x57 0x72    

   \              0x69 0x74    

   \              0x65 0x20    

   \              0x44 0x6F    

   \              0x6E 0x65    

   \              0x21 0x00

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   FlashErase
         8   -> cSpyMessageLog
         8   -> sprintf
      64   FlashInit
        64   -> board_cfg_console
        64   -> board_cfg_lowlevel
        64   -> board_cfg_matrix_for_ddr
        64   -> cSpyMessageLog
        64   -> ddram_configure
        64   -> ddram_init_descriptor
        64   -> findOption
        64   -> printf
        64   -> sprintf
        64   -> strtoul
       0   FlashSignoff
      32   FlashWrite
        32   -> cSpyMessageLog
        32   -> sprintf
       8   board_init
         0   -> board_cfg_console
         8   -> board_cfg_lowlevel


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_2
       4  ??DataTable11_3
       4  ??DataTable11_4
      64  ?_0
      52  ?_1
       4  ?_2
      24  ?_3
      12  ?_4
      24  ?_5
      24  ?_6
      28  ?_7
      32  ?_8
      16  ?_9
      44  FlashErase
     292  FlashInit
       8  FlashSignoff
     112  FlashWrite
      32  board_init
      80  message

 
  80 bytes in section .bss
 120 bytes in section .rodata
 668 bytes in section SOFTPACK
 
 668 bytes of CODE  memory
 120 bytes of CONST memory
  80 bytes of DATA  memory

Errors: none
Warnings: none
