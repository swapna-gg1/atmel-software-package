###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.1.245/W32 for ARM         05/Jan/2021  12:18:31
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode                    
#    Endian                   =  little
#    Source file              =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\low_power_mode\event-config.c
#    Command line             =
#        -f C:\Users\c40450\AppData\Local\Temp\EW9C9B.tmp
#        (C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\low_power_mode\event-config.c
#        -D "SOFTPACK_VERSION=\"2.17\"" -D TRACE_LEVEL=5 -D VARIANT_SRAM -D
#        CONFIG_ARCH_ARMV5TE -D CONFIG_ARCH_ARM -D CONFIG_SOC_SAM9X60 -D
#        CONFIG_CHIP_SAM9X60 -D CONFIG_BOARD_SAM9X60_EK -D CONFIG_HAVE_AIC5 -D
#        CONFIG_HAVE_FLEXCOM -D CONFIG_HAVE_PIO3 -D CONFIG_HAVE_PIT -D
#        CONFIG_HAVE_SMC -D CONFIG_HAVE_SDRAMC -D CONFIG_HAVE_MPDDRC -D
#        CONFIG_HAVE_MPDDRC_DATA_PATH -D CONFIG_HAVE_MPDDRC_IO_CALIBRATION -D
#        CONFIG_HAVE_MPDDRC_DDR2 -D CONFIG_HAVE_ADC_LOW_RES -D
#        CONFIG_HAVE_PMC_FAST_STARTUP -D CONFIG_HAVE_PMC_GENERATED_CLOCKS -D
#        CONFIG_HAVE_SCKC -D CONFIG_HAVE_NFD0_ON_D16 -D CONFIG_HAVE_XDMAC -D
#        CONFIG_HAVE_PWMC -D CONFIG_HAVE_DDR2_W972GG6KB -D
#        CONFIG_HAVE_RSTC_EXTERNAL_RESET -D CONFIG_HAVE_RSTC_INDEPENDENT_RESET
#        -D CONFIG_HAVE_RTT -D CONFIG_HAVE_SHDWC -D CONFIG_HAVE_TWI -D
#        CONFIG_HAVE_I2C_BUS -D CONFIG_HAVE_LED -D CONFIG_HAVE_MMU -D
#        CONFIG_HAVE_L1CACHE -D CONFIG_HAVE_OTPC -D CONFIG_HAVE_DBGU -D
#        CONFIG_HAVE_SERIALD_DBGU -D CONFIG_HAVE_USART -D
#        CONFIG_HAVE_USART_FIFO -D CONFIG_HAVE_DWDT --preprocess
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\low_power_mode\build\sam9x60-ek\sram\List
#        -lC
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\low_power_mode\build\sam9x60-ek\sram\List
#        --diag_suppress Pa050 -o
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\low_power_mode\build\sam9x60-ek\sram\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=ARM926EJ-S -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\low_power_mode\..\..\arch\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\low_power_mode\..\..\utils\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\low_power_mode\..\..\target\common\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\low_power_mode\..\..\target\sam9x60\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\low_power_mode\..\..\drivers\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\low_power_mode\..\..\lib\
#        --section .text=SOFTPACK --cpu_mode arm -On)
#    Locale                   =  C
#    List file                =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\low_power_mode\build\sam9x60-ek\sram\List\event-config.lst
#    Object file              =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\low_power_mode\build\sam9x60-ek\sram\Obj\event-config.o
#    Runtime model:              
#      __SystemLibrary        =  DLib
#      __dlib_file_descriptor =  0
#      __dlib_version         =  6
#      __iar_require _Printf     
#
###############################################################################

C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\low_power_mode\event-config.c
      1          /* ----------------------------------------------------------------------------
      2           *         SAM Software Package License
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2016, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          /*----------------------------------------------------------------------------
     30           *        Headers
     31           *----------------------------------------------------------------------------*/
     32          
     33          #include "assert.h"
     34          #include <stdio.h>
     35          
     36          #include "board.h"
     37          #include "irq/irq.h"
     38          #include "gpio/pio.h"
     39          #include "peripherals/pmc.h"
     40          #include "peripherals/rtc.h"
     41          #include "event-config.h"
     42          
     43          /*----------------------------------------------------------------------------
     44           *        Variables
     45           *----------------------------------------------------------------------------*/
     46          
     47          #ifdef PINS_PUSHBUTTONS
     48          /* Pushbutton \#1 pin instance. */

   \                                 In section .rodata, align 4
     49          static const struct _pin button_pins[] = PINS_PUSHBUTTONS;
   \                     button_pins:
   \        0x0   0x03 0x00          DC8 3, 0, 0, 0

   \              0x00 0x00
   \        0x4   0x0004'0000        DC32 262'144
   \        0x8   0x07 0x00          DC8 7, 0, 0, 0

   \              0x00 0x00
   \        0xC   0x0000'0011        DC32 17
     50          #endif
     51          

   \                                 In section .data, align 4
     52          const char *event_menu[] = { 
   \                     event_menu:
   \        0x0   0x....'....        DC32 ?_0, ?_1, ?_2, ?_3, 0x0

   \              0x....'....  

   \              0x....'....  

   \              0x....'....  

   \              0x0000'0000
     53          					"user_btn:  Use PB_USER button to wake up",
     54          					"rtc_int:   Auto wakeup by RTC interrupt after 3 second",
     55          					"rtc_alarm: Auto wakeup by RTC alarm after 3 second",
     56          					"wake_up:   Use WKUP button to wake up",
     57          					NULL,
     58          };
     59          
     60          /*----------------------------------------------------------------------------
     61           *        Local functions
     62           *----------------------------------------------------------------------------
     63           */
     64          
     65          /**
     66           *  \brief Handler for Buttons rising edge interrupt.
     67           *
     68           *  Handle process led1 status change.
     69           */

   \                                 In section SOFTPACK, align 4, keep-with-next
     70          static void _pio_handler(uint32_t group, uint32_t status, void *user_arg)
     71          {
     72          	/* unused */
     73          	(void)group;
     74          	(void)user_arg;
     75          
     76          	/* Handle process led1 status change: to do */
     77          
     78          }
   \                     _pio_handler:
   \        0x0   0xE12F'FF1E        BX       LR               ;; return
     79          
     80          /**
     81           * \brief Interrupt handler for the RTC. Refreshes the display.
     82           */

   \                                 In section SOFTPACK, align 4, keep-with-next
     83          static void _rtc_handler(uint32_t source, void* user_arg)
     84          {
   \                     _rtc_handler:
   \        0x0   0xE92D'4070        PUSH     {R4-R6,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
   \        0x8   0xE1B0'5001        MOVS     R5,R1
     85          	uint32_t dwStatus = rtc_get_sr(0xffffffff);
   \        0xC   0xE3E0'0000        MVN      R0,#+0
   \       0x10   0x....'....        BL       rtc_get_sr
   \       0x14   0xE1B0'6000        MOVS     R6,R0
     86          
     87          	assert(source == ID_RTC);
   \       0x18   0xE354'0001        CMP      R4,#+1
   \       0x1C   0x0A00'0004        BEQ      ??_rtc_handler_0
   \       0x20   0xE3A0'2057        MOV      R2,#+87
   \       0x24   0x....'....        LDR      R1,??DataTable3
   \       0x28   0x....'....        LDR      R0,??DataTable3_1
   \       0x2C   0x....'....        BL       __aeabi_assert
   \       0x30   0x....'....        BL       __iar_EmptyStepPoint
     88          
     89          	/* Second increment interrupt */
     90          	if ((dwStatus & RTC_SR_SEC) == RTC_SR_SEC) {
   \                     ??_rtc_handler_0:
   \       0x34   0xE316'0004        TST      R6,#0x4
   \       0x38   0x0A00'0004        BEQ      ??_rtc_handler_1
     91          		/* Disable RTC interrupt */
     92          		rtc_disable_it(RTC_IDR_SECDIS);
   \       0x3C   0xE3A0'0004        MOV      R0,#+4
   \       0x40   0x....'....        BL       rtc_disable_it
     93          		rtc_clear_sccr(RTC_SCCR_SECCLR);
   \       0x44   0xE3A0'0004        MOV      R0,#+4
   \       0x48   0x....'....        BL       rtc_clear_sccr
   \       0x4C   0xEA00'0005        B        ??_rtc_handler_2
     94          	}
     95          	/* Time or date alarm */
     96          	else {
     97          		if ((dwStatus & RTC_SR_ALARM) == RTC_SR_ALARM) {
   \                     ??_rtc_handler_1:
   \       0x50   0xE316'0002        TST      R6,#0x2
   \       0x54   0x0A00'0003        BEQ      ??_rtc_handler_2
     98          			/* Disable RTC interrupt */
     99          			rtc_disable_it(RTC_IDR_ALRDIS);
   \       0x58   0xE3A0'0002        MOV      R0,#+2
   \       0x5C   0x....'....        BL       rtc_disable_it
    100          			rtc_clear_sccr(RTC_SCCR_ALRCLR);
   \       0x60   0xE3A0'0002        MOV      R0,#+2
   \       0x64   0x....'....        BL       rtc_clear_sccr
    101          		}
    102          	}
    103          }
   \                     ??_rtc_handler_2:
   \       0x68   0xE8BD'8070        POP      {R4-R6,PC}       ;; return
    104          
    105          /**
    106           * \brief Configure rtc event
    107           * wakup_in_seconds   set wait time
    108           * enable   true: enable rtc irq; false: disable rtc irq
    109           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    110          static void _start_rtc_timer_for_wakeup(unsigned int wakup_in_seconds, bool enable)
    111          {
   \                     _start_rtc_timer_for_wakeup:
   \        0x0   0xE92D'407F        PUSH     {R0-R6,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
   \        0x8   0xE1B0'5001        MOVS     R5,R1
    112          	struct _time new_time;
    113          
    114          	rtc_disable_it(RTC_IER_SECEN | RTC_IER_ALREN);
   \        0xC   0xE3A0'0006        MOV      R0,#+6
   \       0x10   0x....'....        BL       rtc_disable_it
    115          
    116          	/* Default RTC configuration */
    117          	/* 24-hour mode */
    118          	rtc_set_hour_mode(RTC_HOUR_MODE_24);
   \       0x14   0xE3A0'0000        MOV      R0,#+0
   \       0x18   0x....'....        BL       rtc_set_hour_mode
   \       0x1C   0xE3A0'2003        MOV      R2,#+3
   \       0x20   0xE3A0'1000        MOV      R1,#+0
   \       0x24   0xE28D'0004        ADD      R0,SP,#+4
   \       0x28   0x....'....        BL       memset
    119          	struct _time empty_time = {0, 0, 0};
    120          
    121          	if (rtc_set_time_alarm(&empty_time))
   \       0x2C   0xE28D'0004        ADD      R0,SP,#+4
   \       0x30   0x....'....        BL       rtc_set_time_alarm
   \       0x34   0xE350'0000        CMP      R0,#+0
   \       0x38   0x0A00'0001        BEQ      ??_start_rtc_timer_for_wakeup_0
    122          		printf("\r\n Disable time alarm fail!");
   \       0x3C   0x....'....        LDR      R0,??DataTable3_2
   \       0x40   0x....'....        BL       printf
   \                     ??_start_rtc_timer_for_wakeup_0:
   \       0x44   0xE3A0'2006        MOV      R2,#+6
   \       0x48   0xE3A0'1000        MOV      R1,#+0
   \       0x4C   0xE28D'0008        ADD      R0,SP,#+8
   \       0x50   0x....'....        BL       memset
    123          
    124          	struct _date empty_date = {0, 0, 0};
    125          
    126          	if (rtc_set_date_alarm(&empty_date))
   \       0x54   0xE28D'0008        ADD      R0,SP,#+8
   \       0x58   0x....'....        BL       rtc_set_date_alarm
   \       0x5C   0xE350'0000        CMP      R0,#+0
   \       0x60   0x0A00'0001        BEQ      ??_start_rtc_timer_for_wakeup_1
    127          		printf("\r\n Disable date alarm fail!");
   \       0x64   0x....'....        LDR      R0,??DataTable3_3
   \       0x68   0x....'....        BL       printf
    128          
    129          	new_time.hour = 0;
   \                     ??_start_rtc_timer_for_wakeup_1:
   \       0x6C   0xE3A0'6000        MOV      R6,#+0
   \       0x70   0xE5CD'6000        STRB     R6,[SP, #+0]
    130          	new_time.min = 0;
   \       0x74   0xE5CD'6001        STRB     R6,[SP, #+1]
    131          	new_time.sec = 0;
   \       0x78   0xE5CD'6002        STRB     R6,[SP, #+2]
    132          	rtc_set_time(&new_time);
   \       0x7C   0xE1B0'000D        MOVS     R0,SP
   \       0x80   0x....'....        BL       rtc_set_time
    133          
    134          	/* Configure RTC interrupts */
    135          	if (enable == true) {
   \       0x84   0xE1B0'0005        MOVS     R0,R5
   \       0x88   0xE210'00FF        ANDS     R0,R0,#0xFF      ;; Zero extend
   \       0x8C   0xE350'0001        CMP      R0,#+1
   \       0x90   0x1A00'0007        BNE      ??_start_rtc_timer_for_wakeup_2
    136          		rtc_enable_it(RTC_IER_ALREN);
   \       0x94   0xE3A0'0002        MOV      R0,#+2
   \       0x98   0x....'....        BL       rtc_enable_it
    137          		irq_add_handler(ID_RTC, _rtc_handler, NULL);
   \       0x9C   0xE3A0'2000        MOV      R2,#+0
   \       0xA0   0x....'....        ADR      R1,_rtc_handler
   \       0xA4   0xE3A0'0001        MOV      R0,#+1
   \       0xA8   0x....'....        BL       irq_add_handler
    138          		irq_enable(ID_RTC);
   \       0xAC   0xE3A0'0001        MOV      R0,#+1
   \       0xB0   0x....'....        BL       irq_enable
    139          	}
    140          
    141          	new_time.hour = 0;
   \                     ??_start_rtc_timer_for_wakeup_2:
   \       0xB4   0xE5CD'6000        STRB     R6,[SP, #+0]
    142          	new_time.min = 0;
   \       0xB8   0xE5CD'6001        STRB     R6,[SP, #+1]
    143          	new_time.sec = wakup_in_seconds;
   \       0xBC   0xE5CD'4002        STRB     R4,[SP, #+2]
    144          	rtc_set_time_alarm(&new_time);
   \       0xC0   0xE1B0'000D        MOVS     R0,SP
   \       0xC4   0x....'....        BL       rtc_set_time_alarm
    145          }
   \       0xC8   0xE8BD'807F        POP      {R0-R6,PC}       ;; return
    146          
    147          /**
    148           *  \brief Configure the Pushbuttons
    149           *
    150           *  Configure the PIO as inputs and generate corresponding interrupt when
    151           *  pressed or released.
    152           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    153          static void _configure_buttons(void)
    154          {
   \                     _configure_buttons:
   \        0x0   0xE92D'4038        PUSH     {R3-R5,LR}
    155          	int i;
    156          
    157          	/* Adjust pio debounce filter parameters, uses 10 Hz filter. */
    158          	pio_set_debounce_filter(10);
   \        0x4   0xE3A0'000A        MOV      R0,#+10
   \        0x8   0x....'....        BL       pio_set_debounce_filter
    159          
    160          #ifdef PINS_PUSHBUTTONS
    161          	for (i = 0; i < ARRAY_SIZE(button_pins); ++i) {
   \        0xC   0xE3A0'4000        MOV      R4,#+0
   \                     ??_configure_buttons_0:
   \       0x10   0xE354'0000        CMP      R4,#+0
   \       0x14   0x1A00'0010        BNE      ??_configure_buttons_1
    162          		/* Configure pios as inputs. */
    163          		pio_configure(&button_pins[i], 1);
   \       0x18   0x....'....        LDR      R5,??DataTable3_4
   \       0x1C   0xE3A0'1001        MOV      R1,#+1
   \       0x20   0xE1B0'0204        LSLS     R0,R4,#+4
   \       0x24   0xE095'0000        ADDS     R0,R5,R0
   \       0x28   0x....'....        BL       pio_configure
    164          
    165          		/* Initialize pios interrupt with its handlers, see */
    166          		/* PIO definition in board.h. */
    167          		pio_add_handler_to_group(button_pins[i].group,
    168          			button_pins[i].mask, _pio_handler, NULL);
   \       0x2C   0xE3A0'3000        MOV      R3,#+0
   \       0x30   0x....'....        ADR      R2,_pio_handler
   \       0x34   0xE1B0'0204        LSLS     R0,R4,#+4
   \       0x38   0xE095'0000        ADDS     R0,R5,R0
   \       0x3C   0xE590'1004        LDR      R1,[R0, #+4]
   \       0x40   0xE1B0'0204        LSLS     R0,R4,#+4
   \       0x44   0xE7D5'0000        LDRB     R0,[R5, +R0]
   \       0x48   0x....'....        BL       pio_add_handler_to_group
    169          		/* Enable PIO line interrupts. */
    170          		pio_enable_it(button_pins);
   \       0x4C   0xE1B0'0005        MOVS     R0,R5
   \       0x50   0x....'....        BL       pio_enable_it
    171          	}
   \       0x54   0xE294'4001        ADDS     R4,R4,#+1
   \       0x58   0xEAFF'FFEC        B        ??_configure_buttons_0
    172          #endif
    173          }
   \                     ??_configure_buttons_1:
   \       0x5C   0xE8BD'8031        POP      {R0,R4,R5,PC}    ;; return
    174          
    175          /*----------------------------------------------------------------------------
    176           *        Exported function
    177           *----------------------------------------------------------------------------*/
    178          

   \                                 In section SOFTPACK, align 4, keep-with-next
    179          void wakeup_event(uint32_t event){
   \                     wakeup_event:
   \        0x0   0xE92D'4010        PUSH     {R4,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
    180          	/* set wake up event */
    181          	switch (event) {
   \        0x8   0xE1B0'0004        MOVS     R0,R4
   \        0xC   0xE240'0001        SUB      R0,R0,#+1
   \       0x10   0xE350'0007        CMP      R0,#+7
   \       0x14   0x8A00'0010        BHI      ??wakeup_event_1
   \       0x18   0xE7DF'1000        LDRB     R1,[PC, R0]
   \       0x1C   0xE08F'F101        ADD      PC,PC,R1, LSL #+2
   \                     ??wakeup_event_0:
   \       0x20   0x01 0x03          DC8      0x1,0x3,0xE,0x7

   \              0x0E 0x07
   \       0x24   0x0E 0x0E          DC8      0xE,0xE,0xE,0xD

   \              0x0E 0x0D
    182          	case USER_BTN:
    183          		_configure_buttons();
   \                     ??wakeup_event_2:
   \       0x28   0x....'....        BL       _configure_buttons
    184          		break;
   \       0x2C   0xEA00'000A        B        ??wakeup_event_3
    185          	case RTC_INT:
    186          		/* set RTC interrupt */
    187          		_start_rtc_timer_for_wakeup(5, true);
   \                     ??wakeup_event_4:
   \       0x30   0xE3A0'1001        MOV      R1,#+1
   \       0x34   0xE3A0'0005        MOV      R0,#+5
   \       0x38   0x....'....        BL       _start_rtc_timer_for_wakeup
    188          
    189          		break;
   \       0x3C   0xEA00'0006        B        ??wakeup_event_3
    190          	case RTC_ALARM:
    191          		/* set RTC alarm */
    192          		_start_rtc_timer_for_wakeup(5, false);
   \                     ??wakeup_event_5:
   \       0x40   0xE3A0'1000        MOV      R1,#+0
   \       0x44   0xE3A0'0005        MOV      R0,#+5
   \       0x48   0x....'....        BL       _start_rtc_timer_for_wakeup
    193          
    194          #if defined(PMC_FSMR_LPM) && defined(PMC_FSMR_RTCAL)
    195          		/* config wake up sources */
    196          		pmc_set_fast_startup_mode(PMC_FSMR_RTCAL | PMC_FSMR_LPM);
    197          #elif defined(PMC_FSMR_RTCAL)
    198          		pmc_set_fast_startup_mode(PMC_FSMR_RTCAL);
   \       0x4C   0xE3A0'0B80        MOV      R0,#+131072
   \       0x50   0x....'....        BL       pmc_set_fast_startup_mode
    199          #endif
    200          		break;
   \       0x54   0xEA00'0000        B        ??wakeup_event_3
    201          	case WAKE_UP:
    202          		/* set WKUP0 pin */
    203          #ifdef PMC_FSMR_LPM
    204          		/* config wake up sources */
    205          		pmc_set_fast_startup_mode(PMC_FSMR_FSTT0 | PMC_FSMR_LPM);
    206          #endif
    207          		break;
   \                     ??wakeup_event_6:
   \       0x58   0xEAFF'FFFF        B        ??wakeup_event_3
    208          	default:
    209          		break;
    210          	}
    211          }
   \                     ??wakeup_event_1:
   \                     ??wakeup_event_3:
   \       0x5C   0xE8BD'8010        POP      {R4,PC}          ;; return

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable3:
   \        0x0   0x....'....        DC32     ?_5

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable3_1:
   \        0x0   0x....'....        DC32     ?_4

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable3_2:
   \        0x0   0x....'....        DC32     ?_6

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable3_3:
   \        0x0   0x....'....        DC32     ?_7

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable3_4:
   \        0x0   0x....'....        DC32     button_pins

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x75 0x73          DC8 "user_btn:  Use PB_USER button to wake up"

   \              0x65 0x72    

   \              0x5F 0x62    

   \              0x74 0x6E    

   \              0x3A 0x20    

   \              0x20 0x55    

   \              0x73 0x65    

   \              0x20 0x50    

   \              0x42 0x5F    

   \              0x55 0x53    

   \              0x45 0x52    

   \              0x20 0x62    

   \              0x75 0x74    

   \              0x74 0x6F    

   \              0x6E 0x20    

   \              0x74 0x6F    

   \              0x20 0x77    

   \              0x61 0x6B    

   \              0x65 0x20    

   \              0x75 0x70    

   \              0x00
   \       0x29   0x00 0x00          DC8 0, 0, 0

   \              0x00

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x72 0x74          DC8 0x72, 0x74, 0x63, 0x5F, 0x69, 0x6E, 0x74, 0x3A

   \              0x63 0x5F    

   \              0x69 0x6E    

   \              0x74 0x3A
   \        0x8   0x20 0x20          DC8 0x20, 0x20, 0x20, 0x41, 0x75, 0x74, 0x6F, 0x20

   \              0x20 0x41    

   \              0x75 0x74    

   \              0x6F 0x20
   \       0x10   0x77 0x61          DC8 0x77, 0x61, 0x6B, 0x65, 0x75, 0x70, 0x20, 0x62

   \              0x6B 0x65    

   \              0x75 0x70    

   \              0x20 0x62
   \       0x18   0x79 0x20          DC8 0x79, 0x20, 0x52, 0x54, 0x43, 0x20, 0x69, 0x6E

   \              0x52 0x54    

   \              0x43 0x20    

   \              0x69 0x6E
   \       0x20   0x74 0x65          DC8 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x20

   \              0x72 0x72    

   \              0x75 0x70    

   \              0x74 0x20
   \       0x28   0x61 0x66          DC8 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x33, 0x20

   \              0x74 0x65    

   \              0x72 0x20    

   \              0x33 0x20
   \       0x30   0x73 0x65          DC8 0x73, 0x65, 0x63, 0x6F, 0x6E, 0x64, 0

   \              0x63 0x6F    

   \              0x6E 0x64    

   \              0x00
   \       0x37   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x72 0x74          DC8 0x72, 0x74, 0x63, 0x5F, 0x61, 0x6C, 0x61, 0x72

   \              0x63 0x5F    

   \              0x61 0x6C    

   \              0x61 0x72
   \        0x8   0x6D 0x3A          DC8 0x6D, 0x3A, 0x20, 0x41, 0x75, 0x74, 0x6F, 0x20

   \              0x20 0x41    

   \              0x75 0x74    

   \              0x6F 0x20
   \       0x10   0x77 0x61          DC8 0x77, 0x61, 0x6B, 0x65, 0x75, 0x70, 0x20, 0x62

   \              0x6B 0x65    

   \              0x75 0x70    

   \              0x20 0x62
   \       0x18   0x79 0x20          DC8 0x79, 0x20, 0x52, 0x54, 0x43, 0x20, 0x61, 0x6C

   \              0x52 0x54    

   \              0x43 0x20    

   \              0x61 0x6C
   \       0x20   0x61 0x72          DC8 0x61, 0x72, 0x6D, 0x20, 0x61, 0x66, 0x74, 0x65

   \              0x6D 0x20    

   \              0x61 0x66    

   \              0x74 0x65
   \       0x28   0x72 0x20          DC8 0x72, 0x20, 0x33, 0x20, 0x73, 0x65, 0x63, 0x6F

   \              0x33 0x20    

   \              0x73 0x65    

   \              0x63 0x6F
   \       0x30   0x6E 0x64          DC8 0x6E, 0x64, 0

   \              0x00
   \       0x33   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x77 0x61          DC8 "wake_up:   Use WKUP button to wake up"

   \              0x6B 0x65    

   \              0x5F 0x75    

   \              0x70 0x3A    

   \              0x20 0x20    

   \              0x20 0x55    

   \              0x73 0x65    

   \              0x20 0x57    

   \              0x4B 0x55    

   \              0x50 0x20    

   \              0x62 0x75    

   \              0x74 0x74    

   \              0x6F 0x6E    

   \              0x20 0x74    

   \              0x6F 0x20    

   \              0x77 0x61    

   \              0x6B 0x65    

   \              0x20 0x75    

   \              0x70 0x00
   \       0x26   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x73 0x6F          DC8 "source == ( 1)"

   \              0x75 0x72    

   \              0x63 0x65    

   \              0x20 0x3D    

   \              0x3D 0x20    

   \              0x28 0x20    

   \              0x31 0x29    

   \              0x00
   \        0xF   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x43 0x3A          DC8 0x43, 0x3A, 0x5C, 0x77, 0x6F, 0x72, 0x6B, 0x5C

   \              0x5C 0x77    

   \              0x6F 0x72    

   \              0x6B 0x5C
   \        0x8   0x41 0x74          DC8 0x41, 0x74, 0x6D, 0x65, 0x6C, 0x53, 0x6F, 0x66

   \              0x6D 0x65    

   \              0x6C 0x53    

   \              0x6F 0x66
   \       0x10   0x74 0x50          DC8 0x74, 0x50, 0x41, 0x63, 0x6B, 0x5C, 0x61, 0x74

   \              0x41 0x63    

   \              0x6B 0x5C    

   \              0x61 0x74
   \       0x18   0x6D 0x65          DC8 0x6D, 0x65, 0x6C, 0x2D, 0x73, 0x6F, 0x66, 0x74

   \              0x6C 0x2D    

   \              0x73 0x6F    

   \              0x66 0x74
   \       0x20   0x77 0x61          DC8 0x77, 0x61, 0x72, 0x65, 0x2D, 0x70, 0x61, 0x63

   \              0x72 0x65    

   \              0x2D 0x70    

   \              0x61 0x63
   \       0x28   0x6B 0x61          DC8 0x6B, 0x61, 0x67, 0x65, 0x2D, 0x32, 0x2E, 0x31

   \              0x67 0x65    

   \              0x2D 0x32    

   \              0x2E 0x31
   \       0x30   0x37 0x5C          DC8 0x37, 0x5C, 0x65, 0x78, 0x61, 0x6D, 0x70, 0x6C

   \              0x65 0x78    

   \              0x61 0x6D    

   \              0x70 0x6C
   \       0x38   0x65 0x73          DC8 0x65, 0x73, 0x5C, 0x6C, 0x6F, 0x77, 0x5F, 0x70

   \              0x5C 0x6C    

   \              0x6F 0x77    

   \              0x5F 0x70
   \       0x40   0x6F 0x77          DC8 0x6F, 0x77, 0x65, 0x72, 0x5F, 0x6D, 0x6F, 0x64

   \              0x65 0x72    

   \              0x5F 0x6D    

   \              0x6F 0x64
   \       0x48   0x65 0x5C          DC8 0x65, 0x5C, 0x65, 0x76, 0x65, 0x6E, 0x74, 0x2D

   \              0x65 0x76    

   \              0x65 0x6E    

   \              0x74 0x2D
   \       0x50   0x63 0x6F          DC8 0x63, 0x6F, 0x6E, 0x66, 0x69, 0x67, 0x2E, 0x63

   \              0x6E 0x66    

   \              0x69 0x67    

   \              0x2E 0x63
   \       0x58   0x00               DC8 0
   \       0x59   0x00 0x00          DC8 0, 0, 0

   \              0x00

   \                                 In section .rodata, align 4
   \                     ?_6:
   \        0x0   0x0D 0x0A          DC8 "\015\012 Disable time alarm fail!"

   \              0x20 0x44    

   \              0x69 0x73    

   \              0x61 0x62    

   \              0x6C 0x65    

   \              0x20 0x74    

   \              0x69 0x6D    

   \              0x65 0x20    

   \              0x61 0x6C    

   \              0x61 0x72    

   \              0x6D 0x20    

   \              0x66 0x61    

   \              0x69 0x6C    

   \              0x21 0x00

   \                                 In section .rodata, align 4
   \                     ?_7:
   \        0x0   0x0D 0x0A          DC8 "\015\012 Disable date alarm fail!"

   \              0x20 0x44    

   \              0x69 0x73    

   \              0x61 0x62    

   \              0x6C 0x65    

   \              0x20 0x64    

   \              0x61 0x74    

   \              0x65 0x20    

   \              0x61 0x6C    

   \              0x61 0x72    

   \              0x6D 0x20    

   \              0x66 0x61    

   \              0x69 0x6C    

   \              0x21 0x00

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   _configure_buttons
        16   -> pio_add_handler_to_group
        16   -> pio_configure
        16   -> pio_enable_it
        16   -> pio_set_debounce_filter
       0   _pio_handler
      16   _rtc_handler
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
        16   -> rtc_clear_sccr
        16   -> rtc_disable_it
        16   -> rtc_get_sr
      32   _start_rtc_timer_for_wakeup
        32   -> irq_add_handler
        32   -> irq_enable
        32   -> memset
        32   -> printf
        32   -> rtc_disable_it
        32   -> rtc_enable_it
        32   -> rtc_set_date_alarm
        32   -> rtc_set_hour_mode
        32   -> rtc_set_time
        32   -> rtc_set_time_alarm
       8   wakeup_event
         8   -> _configure_buttons
         8   -> _start_rtc_timer_for_wakeup
         8   -> pmc_set_fast_startup_mode


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
      44  ?_0
      56  ?_1
      52  ?_2
      40  ?_3
      16  ?_4
      92  ?_5
      28  ?_6
      28  ?_7
      96  _configure_buttons
       4  _pio_handler
     108  _rtc_handler
     204  _start_rtc_timer_for_wakeup
      16  button_pins
      20  event_menu
      96  wakeup_event

 
  20 bytes in section .data
 372 bytes in section .rodata
 528 bytes in section SOFTPACK
 
 528 bytes of CODE  memory
 372 bytes of CONST memory
  20 bytes of DATA  memory

Errors: none
Warnings: none
