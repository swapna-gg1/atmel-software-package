###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.1.245/W32 for ARM         13/Jan/2021  17:37:11
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\utils\syscalls.c
#    Command line      =
#        -f C:\Users\c40450\AppData\Local\Temp\EW736E.tmp
#        (C:\work\AtmelSoftPAck\atmel-software-package-2.17\utils\syscalls.c -D
#        "SOFTPACK_VERSION=\"2.17\"" -D TRACE_LEVEL=5 -D VARIANT_DDRAM -D
#        CONFIG_ARCH_ARMV5TE -D CONFIG_ARCH_ARM -D CONFIG_SOC_SAM9X60 -D
#        CONFIG_CHIP_SAM9X60 -D CONFIG_BOARD_SAM9X60_EK -D CONFIG_HAVE_AIC5 -D
#        CONFIG_HAVE_FLEXCOM -D CONFIG_HAVE_PIO3 -D CONFIG_HAVE_PIT -D
#        CONFIG_HAVE_SMC -D CONFIG_HAVE_SDRAMC -D CONFIG_HAVE_MPDDRC -D
#        CONFIG_HAVE_MPDDRC_DATA_PATH -D CONFIG_HAVE_MPDDRC_IO_CALIBRATION -D
#        CONFIG_HAVE_MPDDRC_DDR2 -D CONFIG_HAVE_ADC_LOW_RES -D
#        CONFIG_HAVE_PMC_FAST_STARTUP -D CONFIG_HAVE_PMC_GENERATED_CLOCKS -D
#        CONFIG_HAVE_SCKC -D CONFIG_HAVE_NFD0_ON_D16 -D CONFIG_HAVE_XDMAC -D
#        CONFIG_HAVE_LCD -D CONFIG_HAVE_LCDC -D CONFIG_HAVE_LCDC_OVR1 -D
#        CONFIG_HAVE_LCDC_OVR2 -D CONFIG_HAVE_PWMC -D
#        CONFIG_HAVE_DDR2_W972GG6KB -D CONFIG_HAVE_RSTC_EXTERNAL_RESET -D
#        CONFIG_HAVE_RSTC_INDEPENDENT_RESET -D CONFIG_HAVE_RTT -D
#        CONFIG_HAVE_SHDWC -D CONFIG_HAVE_LED -D CONFIG_HAVE_MMU -D
#        CONFIG_HAVE_L1CACHE -D CONFIG_HAVE_OTPC -D CONFIG_HAVE_DBGU -D
#        CONFIG_HAVE_SERIALD_DBGU -D CONFIG_HAVE_USART -D
#        CONFIG_HAVE_USART_FIFO -D CONFIG_HAVE_DWDT --preprocess
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\build\sam9x60-ek\ddram\List
#        -lC
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\build\sam9x60-ek\ddram\List
#        --diag_suppress Pa050 -o
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\build\sam9x60-ek\ddram\Obj
#        --debug --endian=little --cpu=ARM926EJ-S -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\..\..\arch\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\..\..\utils\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\..\..\target\common\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\..\..\target\sam9x60\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\..\..\drivers\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\..\..\lib\
#        --section .text=SOFTPACK --cpu_mode arm -Oh)
#    Locale            =  C
#    List file         =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\build\sam9x60-ek\ddram\List\syscalls.lst
#    Object file       =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\build\sam9x60-ek\ddram\Obj\syscalls.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\work\AtmelSoftPAck\atmel-software-package-2.17\utils\syscalls.c
      1          /* ----------------------------------------------------------------------------
      2           *         SAM Software Package License
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2011, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          /**
     31            * \file syscalls.c
     32            *
     33            * Implementation of syscall bindings.
     34            *
     35            */
     36          
     37          /*----------------------------------------------------------------------------
     38           *        Headers
     39           *----------------------------------------------------------------------------*/
     40          #include "compiler.h"
     41          #include "serial/console.h"
     42          
     43          #ifdef __GNUC__
     44          
     45          #include <stdio.h>
     46          #include <stdarg.h>
     47          #include <sys/types.h>
     48          #include <sys/stat.h>
     49          
     50          /*----------------------------------------------------------------------------
     51           *        Imported variables
     52           *----------------------------------------------------------------------------*/
     53          
     54          extern int __heap_start__;
     55          extern int __heap_end__;
     56          
     57          /*----------------------------------------------------------------------------
     58           *        Exported functions
     59           *----------------------------------------------------------------------------*/
     60          
     61          /* Desactivate stream buffering */
     62          CONSTRUCTOR static void _disable_io_buffering(void)
     63          {
     64          	setvbuf(stdout, (char *)NULL, _IONBF, 0);
     65          }
     66          
     67          extern caddr_t _sbrk(int incr);
     68          caddr_t _sbrk(int incr)
     69          {
     70          	static caddr_t heap = NULL;
     71          	caddr_t prev_heap, next_heap;
     72          
     73          	if (heap == NULL) {
     74          		heap = (caddr_t)&__heap_start__;
     75          	}
     76          
     77          	prev_heap = heap;
     78          	next_heap = (caddr_t)((unsigned int)heap + incr);
     79          
     80          	if (next_heap >= (caddr_t)&__heap_end__) {
     81          		return NULL;
     82          	} else {
     83          		heap = next_heap;
     84          		return prev_heap;
     85          	}
     86          }
     87          
     88          extern int _getpid(void);
     89          int _getpid(void)
     90          {
     91          	return -1;
     92          }
     93          
     94          extern void _kill(int pid, int sig);
     95          void _kill(int pid, int sig)
     96          {
     97          	return;
     98          }
     99          
    100          extern void _exit(int status);
    101          void _exit(int status)
    102          {
    103          	printf("Program terminated with status %d.\n", status);
    104          	while (1) ;
    105          }
    106          
    107          extern int _fstat(int file, struct stat *st);
    108          int _fstat(int file, struct stat *st)
    109          {
    110          	st->st_mode = S_IFCHR;
    111          	return 0;
    112          }
    113          
    114          extern int _lseek(int file, int ptr, int dir);
    115          int _lseek(int file, int ptr, int dir)
    116          {
    117          	return 0;
    118          }
    119          
    120          extern int _isatty(int file);
    121          int _isatty(int file)
    122          {
    123          	return 1;
    124          }
    125          
    126          extern int _read(int file, char *ptr, int len);
    127          int _read(int file, char *ptr, int len)
    128          {
    129          	return 0;
    130          }
    131          
    132          extern int _write(int file, char *ptr, int len);
    133          int _write(int file, char *ptr, int len)
    134          {
    135          	int i;
    136          
    137          	for (i = 0; i < len; i++, ptr++) {
    138          		console_put_char(*ptr);
    139          	}
    140          
    141          	return i;
    142          }
    143          
    144          extern int _close(int file);
    145          int _close(int file)
    146          {
    147          	return -1;
    148          }
    149          
    150          #elif defined __ICCARM__  /* IAR Ewarm 5.41+ */
    151          
    152          /**
    153           * \brief Outputs a character on the DBGU.
    154           *
    155           * \param c  Character to output.
    156           *
    157           * \return The character that was output.
    158           */

   \                                 In section SOFTPACK, align 4
    159          WEAK int putchar(int c)
    160          {
   \                     putchar:
   \        0x0   0xE92D'4010        PUSH     {R4,LR}
   \        0x4   0xE1A0'4000        MOV      R4,R0
    161          	console_put_char(c);
   \        0x8   0xE200'00FF        AND      R0,R0,#0xFF
   \        0xC   0x....'....        BL       console_put_char
    162          	return c;
   \       0x10   0xE1A0'0004        MOV      R0,R4
   \       0x14   0xE8BD'8010        POP      {R4,PC}          ;; return
    163          }
    164          
    165          #endif  /* defined __ICCARM__ */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   putchar
         8   -> console_put_char


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      24  putchar

 
 24 bytes in section SOFTPACK
 
 0 bytes of CODE memory (+ 24 bytes shared)

Errors: none
Warnings: none
