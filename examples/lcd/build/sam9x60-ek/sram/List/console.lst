###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.1.245/W32 for ARM         20/Jan/2021  09:41:39
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode                    
#    Endian                   =  little
#    Source file              =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\serial\console.c
#    Command line             =
#        -f C:\Users\c40450\AppData\Local\Temp\EWCFBC.tmp
#        (C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\serial\console.c
#        -D "SOFTPACK_VERSION=\"2.17\"" -D TRACE_LEVEL=5 -D VARIANT_SRAM -D
#        CONFIG_ARCH_ARMV5TE -D CONFIG_ARCH_ARM -D CONFIG_SOC_SAM9X60 -D
#        CONFIG_CHIP_SAM9X60 -D CONFIG_BOARD_SAM9X60_EK -D CONFIG_HAVE_AIC5 -D
#        CONFIG_HAVE_FLEXCOM -D CONFIG_HAVE_PIO3 -D CONFIG_HAVE_PIT -D
#        CONFIG_HAVE_SMC -D CONFIG_HAVE_SDRAMC -D CONFIG_HAVE_MPDDRC -D
#        CONFIG_HAVE_MPDDRC_DATA_PATH -D CONFIG_HAVE_MPDDRC_IO_CALIBRATION -D
#        CONFIG_HAVE_MPDDRC_DDR2 -D CONFIG_HAVE_ADC_LOW_RES -D
#        CONFIG_HAVE_PMC_FAST_STARTUP -D CONFIG_HAVE_PMC_GENERATED_CLOCKS -D
#        CONFIG_HAVE_SCKC -D CONFIG_HAVE_NFD0_ON_D16 -D CONFIG_HAVE_XDMAC -D
#        CONFIG_HAVE_LCD -D CONFIG_HAVE_LCDC -D CONFIG_HAVE_LCDC_OVR1 -D
#        CONFIG_HAVE_LCDC_OVR2 -D CONFIG_HAVE_PWMC -D
#        CONFIG_HAVE_DDR2_W972GG6KB -D CONFIG_HAVE_RSTC_EXTERNAL_RESET -D
#        CONFIG_HAVE_RSTC_INDEPENDENT_RESET -D CONFIG_HAVE_RTT -D
#        CONFIG_HAVE_SHDWC -D CONFIG_HAVE_LED -D CONFIG_HAVE_MMU -D
#        CONFIG_HAVE_L1CACHE -D CONFIG_HAVE_OTPC -D CONFIG_HAVE_DBGU -D
#        CONFIG_HAVE_SERIALD_DBGU -D CONFIG_HAVE_USART -D
#        CONFIG_HAVE_USART_FIFO -D CONFIG_HAVE_DWDT --preprocess
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\build\sam9x60-ek\sram\List
#        -lC
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\build\sam9x60-ek\sram\List
#        --diag_suppress Pa050 -o
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\build\sam9x60-ek\sram\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=ARM926EJ-S -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\..\..\arch\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\..\..\utils\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\..\..\target\common\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\..\..\target\sam9x60\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\..\..\drivers\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\..\..\lib\
#        --section .text=SOFTPACK --cpu_mode arm -On)
#    Locale                   =  C
#    List file                =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\build\sam9x60-ek\sram\List\console.lst
#    Object file              =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\build\sam9x60-ek\sram\Obj\console.o
#    Runtime model:              
#      __SystemLibrary        =  DLib
#      __dlib_file_descriptor =  0
#      __dlib_version         =  6
#      __iar_require _Printf  =  flags,int_specials,widths
#
###############################################################################

C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\serial\console.c
      1          /* ----------------------------------------------------------------------------
      2           *         SAM Software Package License
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2015, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          /*----------------------------------------------------------------------------
     31          *        Headers
     32          *----------------------------------------------------------------------------*/
     33          
     34          #include <stdio.h>
     35          #include <string.h>
     36          
     37          #include "board.h"
     38          #include "chip.h"
     39          #include "console.h"
     40          #ifdef CONFIG_HAVE_L1CACHE
     41          #include "mm/l1cache.h"
     42          #endif
     43          #ifdef CONFIG_HAVE_L2CACHE
     44          #include "mm/l2cache.h"
     45          #endif
     46          #ifdef CONFIG_HAVE_MMU
     47          #include "mm/mmu.h"
     48          #endif
     49          #include "peripherals/pmc.h"
     50          #include "serial/seriald.h"
     51          

   \                                 In section .bss, align 4
     52          static struct _seriald console;
   \                     console:
   \        0x0                      DS8 16
     53          
     54          /*------------------------------------------------------------------------------
     55           *         Exported functions
     56           *------------------------------------------------------------------------------*/
     57          

   \                                 In section SOFTPACK, align 4, keep-with-next
     58          void console_configure(const struct _console_cfg* config)
     59          {
   \                     console_configure:
   \        0x0   0xE92D'40F8        PUSH     {R3-R7,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
     60          	if (config && config->addr && config->baudrate)
   \        0x8   0xE354'0000        CMP      R4,#+0
   \        0xC   0x0A00'0016        BEQ      ??console_configure_0
   \       0x10   0xE594'0000        LDR      R0,[R4, #+0]
   \       0x14   0xE350'0000        CMP      R0,#+0
   \       0x18   0x0A00'0013        BEQ      ??console_configure_0
   \       0x1C   0xE594'0004        LDR      R0,[R4, #+4]
   \       0x20   0xE350'0000        CMP      R0,#+0
   \       0x24   0x0A00'0010        BEQ      ??console_configure_0
     61          	{
     62          		if (config->tx_pin.mask)
   \       0x28   0xE594'000C        LDR      R0,[R4, #+12]
   \       0x2C   0xE350'0000        CMP      R0,#+0
   \       0x30   0x0A00'0002        BEQ      ??console_configure_1
     63          			pio_configure(&config->tx_pin, 1);
   \       0x34   0xE3A0'1001        MOV      R1,#+1
   \       0x38   0xE294'0008        ADDS     R0,R4,#+8
   \       0x3C   0x....'....        BL       pio_configure
     64          		if (config->rx_pin.mask)
   \                     ??console_configure_1:
   \       0x40   0xE594'001C        LDR      R0,[R4, #+28]
   \       0x44   0xE350'0000        CMP      R0,#+0
   \       0x48   0x0A00'0002        BEQ      ??console_configure_2
     65          			pio_configure(&config->rx_pin, 1);
   \       0x4C   0xE3A0'1001        MOV      R1,#+1
   \       0x50   0xE294'0018        ADDS     R0,R4,#+24
   \       0x54   0x....'....        BL       pio_configure
     66          		seriald_configure(&console, config->addr, config->baudrate);
   \                     ??console_configure_2:
   \       0x58   0xE594'2004        LDR      R2,[R4, #+4]
   \       0x5C   0xE594'1000        LDR      R1,[R4, #+0]
   \       0x60   0x....'....        LDR      R0,??DataTable17_4
   \       0x64   0x....'....        BL       seriald_configure
   \       0x68   0xEA00'0007        B        ??console_configure_3
     67          	} else {
     68          		memset(&console, 0, sizeof(console));
   \                     ??console_configure_0:
   \       0x6C   0xE3A0'5010        MOV      R5,#+16
   \       0x70   0xE3A0'6000        MOV      R6,#+0
   \       0x74   0x....'....        LDR      R7,??DataTable17_4
   \       0x78   0xE1B0'2006        MOVS     R2,R6
   \       0x7C   0xE1B0'1005        MOVS     R1,R5
   \       0x80   0xE1B0'0007        MOVS     R0,R7
   \       0x84   0x....'....        BL       __aeabi_memset
   \       0x88   0xE1B0'0007        MOVS     R0,R7
     69          	}
     70          }
   \                     ??console_configure_3:
   \       0x8C   0xE8BD'80F1        POP      {R0,R4-R7,PC}    ;; return
     71          

   \                                 In section SOFTPACK, align 4, keep-with-next
     72          void console_put_char(char c)
     73          {
   \                     console_put_char:
   \        0x0   0xE92D'4010        PUSH     {R4,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
     74          	seriald_put_char(&console, *(uint8_t*)&c);
   \        0x8   0xE1B0'1004        MOVS     R1,R4
   \        0xC   0xE211'10FF        ANDS     R1,R1,#0xFF      ;; Zero extend
   \       0x10   0x....'....        LDR      R0,??DataTable17_4
   \       0x14   0x....'....        BL       seriald_put_char
     75          }
   \       0x18   0xE8BD'8010        POP      {R4,PC}          ;; return
     76          

   \                                 In section SOFTPACK, align 4, keep-with-next
     77          void console_put_string(const char* str)
     78          {
   \                     console_put_string:
   \        0x0   0xE92D'4010        PUSH     {R4,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
     79          	seriald_put_string(&console, (const uint8_t*)str);
   \        0x8   0xE1B0'1004        MOVS     R1,R4
   \        0xC   0x....'....        LDR      R0,??DataTable17_4
   \       0x10   0x....'....        BL       seriald_put_string
     80          }
   \       0x14   0xE8BD'8010        POP      {R4,PC}          ;; return
     81          

   \                                 In section SOFTPACK, align 4, keep-with-next
     82          bool console_is_tx_empty(void)
     83          {
   \                     console_is_tx_empty:
   \        0x0   0xE92D'5000        PUSH     {R12,LR}
     84          	return seriald_is_tx_empty(&console);
   \        0x4   0x....'....        LDR      R0,??DataTable17_4
   \        0x8   0x....'....        BL       seriald_is_tx_empty
   \        0xC   0xE8BD'8002        POP      {R1,PC}          ;; return
     85          }
     86          

   \                                 In section SOFTPACK, align 4, keep-with-next
     87          char console_get_char(void)
     88          {
   \                     console_get_char:
   \        0x0   0xE92D'5000        PUSH     {R12,LR}
     89          	uint8_t c = seriald_get_char(&console);
   \        0x4   0x....'....        LDR      R0,??DataTable17_4
   \        0x8   0x....'....        BL       seriald_get_char
     90          	return *(char*)&c;
   \        0xC   0xE210'00FF        ANDS     R0,R0,#0xFF      ;; Zero extend
   \       0x10   0xE8BD'8002        POP      {R1,PC}          ;; return
     91          }
     92          

   \                                 In section SOFTPACK, align 4, keep-with-next
     93          bool console_is_rx_ready(void)
     94          {
   \                     console_is_rx_ready:
   \        0x0   0xE92D'5000        PUSH     {R12,LR}
     95          	return seriald_is_rx_ready(&console);
   \        0x4   0x....'....        LDR      R0,??DataTable17_4
   \        0x8   0x....'....        BL       seriald_is_rx_ready
   \        0xC   0xE8BD'8002        POP      {R1,PC}          ;; return
     96          }
     97          

   \                                 In section SOFTPACK, align 4, keep-with-next
     98          void console_set_rx_handler(console_rx_handler_t handler)
     99          {
   \                     console_set_rx_handler:
   \        0x0   0xE92D'4010        PUSH     {R4,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
    100          	seriald_set_rx_handler(&console, handler);
   \        0x8   0xE1B0'1004        MOVS     R1,R4
   \        0xC   0x....'....        LDR      R0,??DataTable17_4
   \       0x10   0x....'....        BL       seriald_set_rx_handler
    101          }
   \       0x14   0xE8BD'8010        POP      {R4,PC}          ;; return
    102          

   \                                 In section SOFTPACK, align 4, keep-with-next
    103          void console_enable_rx_interrupt(void)
    104          {
   \                     console_enable_rx_interrupt:
   \        0x0   0xE92D'5000        PUSH     {R12,LR}
    105          	seriald_enable_rx_interrupt(&console);
   \        0x4   0x....'....        LDR      R0,??DataTable17_4
   \        0x8   0x....'....        BL       seriald_enable_rx_interrupt
    106          }
   \        0xC   0xE8BD'8001        POP      {R0,PC}          ;; return
    107          

   \                                 In section SOFTPACK, align 4, keep-with-next
    108          void console_disable_rx_interrupt(void)
    109          {
   \                     console_disable_rx_interrupt:
   \        0x0   0xE92D'5000        PUSH     {R12,LR}
    110          	seriald_disable_rx_interrupt(&console);
   \        0x4   0x....'....        LDR      R0,??DataTable17_4
   \        0x8   0x....'....        BL       seriald_disable_rx_interrupt
    111          }
   \        0xC   0xE8BD'8001        POP      {R0,PC}          ;; return
    112          

   \                                 In section SOFTPACK, align 4, keep-with-next
    113          void console_example_info(const char *example_name)
    114          {
   \                     console_example_info:
   \        0x0   0xE92D'4038        PUSH     {R3-R5,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
    115          	/* Clear screen */
    116          	console_clear_screen();
   \        0x8   0x....'....        BL       console_clear_screen
    117          
    118          	/* reset cursor */
    119          	console_reset_cursor();
   \        0xC   0x....'....        BL       console_reset_cursor
    120          
    121          	/* Output example information */
    122          	printf("-- %s --\r\n", example_name);
   \       0x10   0xE1B0'1004        MOVS     R1,R4
   \       0x14   0x....'....        LDR      R0,??DataTable17_5
   \       0x18   0x....'....        BL       printf
    123          #ifndef NDEBUG
    124          	printf("Softpack v%s\r\n", SOFTPACK_VERSION);
   \       0x1C   0x....'....        LDR      R1,??DataTable17_6
   \       0x20   0x....'....        LDR      R0,??DataTable17_7
   \       0x24   0x....'....        BL       printf
    125          	printf("Built for %s\r\n", get_board_name());
   \       0x28   0x....'....        BL       get_board_name
   \       0x2C   0xE1B0'1000        MOVS     R1,R0
   \       0x30   0x....'....        LDR      R0,??DataTable17_8
   \       0x34   0x....'....        BL       printf
    126          	printf("Processor: %s\r\n", get_chip_name());
   \       0x38   0x....'....        BL       get_chip_name
   \       0x3C   0xE1B0'1000        MOVS     R1,R0
   \       0x40   0x....'....        LDR      R0,??DataTable17_9
   \       0x44   0x....'....        BL       printf
    127          	printf("Processor clock: %u MHz\r\n", (unsigned)(pmc_get_processor_clock() / 1000000));
   \       0x48   0x....'....        BL       pmc_get_processor_clock
   \       0x4C   0xE3A0'5AF4        MOV      R5,#+999424
   \       0x50   0xE385'5F90        ORR      R5,R5,#0x240
   \       0x54   0xE1B0'1005        MOVS     R1,R5
   \       0x58   0x....'....        BL       __aeabi_uidiv
   \       0x5C   0xE1B0'1000        MOVS     R1,R0
   \       0x60   0x....'....        LDR      R0,??DataTable17_10
   \       0x64   0x....'....        BL       printf
    128          	printf("Master clock: %u MHz\r\n", (unsigned)(pmc_get_master_clock() / 1000000));
   \       0x68   0x....'....        BL       pmc_get_master_clock
   \       0x6C   0xE1B0'1005        MOVS     R1,R5
   \       0x70   0x....'....        BL       __aeabi_uidiv
   \       0x74   0xE1B0'1000        MOVS     R1,R0
   \       0x78   0x....'....        LDR      R0,??DataTable17_11
   \       0x7C   0x....'....        BL       printf
    129          #ifdef CONFIG_HAVE_MMU
    130          	printf("MMU is %s\r\n", mmu_is_enabled() ? "enabled" : "disabled");
   \       0x80   0x....'....        BL       mmu_is_enabled
   \       0x84   0xE350'0000        CMP      R0,#+0
   \       0x88   0x0A00'0001        BEQ      ??console_example_info_0
   \       0x8C   0x....'....        LDR      R1,??DataTable17_12
   \       0x90   0xEA00'0000        B        ??console_example_info_1
   \                     ??console_example_info_0:
   \       0x94   0x....'....        LDR      R1,??DataTable17_13
   \                     ??console_example_info_1:
   \       0x98   0x....'....        LDR      R0,??DataTable17_14
   \       0x9C   0x....'....        BL       printf
    131          #endif
    132          #ifdef CONFIG_HAVE_L1CACHE
    133          	printf("I-Cache is %s\r\n", icache_is_enabled() ? "enabled" : "disabled");
   \       0xA0   0x....'....        BL       icache_is_enabled
   \       0xA4   0xE350'0000        CMP      R0,#+0
   \       0xA8   0x0A00'0001        BEQ      ??console_example_info_2
   \       0xAC   0x....'....        LDR      R1,??DataTable17_12
   \       0xB0   0xEA00'0000        B        ??console_example_info_3
   \                     ??console_example_info_2:
   \       0xB4   0x....'....        LDR      R1,??DataTable17_13
   \                     ??console_example_info_3:
   \       0xB8   0x....'....        LDR      R0,??DataTable17_15
   \       0xBC   0x....'....        BL       printf
    134          	printf("D-Cache is %s\r\n", dcache_is_enabled() ? "enabled" : "disabled");
   \       0xC0   0x....'....        BL       dcache_is_enabled
   \       0xC4   0xE350'0000        CMP      R0,#+0
   \       0xC8   0x0A00'0001        BEQ      ??console_example_info_4
   \       0xCC   0x....'....        LDR      R1,??DataTable17_12
   \       0xD0   0xEA00'0000        B        ??console_example_info_5
   \                     ??console_example_info_4:
   \       0xD4   0x....'....        LDR      R1,??DataTable17_13
   \                     ??console_example_info_5:
   \       0xD8   0x....'....        LDR      R0,??DataTable17_16
   \       0xDC   0x....'....        BL       printf
    135          #endif
    136          #ifdef CONFIG_HAVE_L2CACHE
    137          	printf("L2-Cache is %s\r\n", l2cache_is_enabled() ? "enabled" : "disabled");
    138          #endif
    139          #endif
    140          	console_put_string("\r\n");
   \       0xE0   0x....'....        ADR      R0,??DataTable13  ;; 0x0D, 0x0A, 0x00, 0x00
   \       0xE4   0x....'....        BL       console_put_string
    141          }
   \       0xE8   0xE8BD'8031        POP      {R0,R4,R5,PC}    ;; return
    142          

   \                                 In section SOFTPACK, align 4, keep-with-next
    143          void console_dump_frame(uint8_t *frame, uint32_t size)
    144          {
   \                     console_dump_frame:
   \        0x0   0xE92D'4070        PUSH     {R4-R6,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
   \        0x8   0xE1B0'5001        MOVS     R5,R1
    145          	uint32_t i;
    146          	for (i = 0; i < size; i++) {
   \        0xC   0xE3A0'6000        MOV      R6,#+0
   \                     ??console_dump_frame_0:
   \       0x10   0xE156'0005        CMP      R6,R5
   \       0x14   0x2A00'0004        BCS      ??console_dump_frame_1
    147          		printf("%02x ", frame[i]);
   \       0x18   0xE7D4'1006        LDRB     R1,[R4, +R6]
   \       0x1C   0x....'....        LDR      R0,??DataTable17_17
   \       0x20   0x....'....        BL       printf
    148          	}
   \       0x24   0xE296'6001        ADDS     R6,R6,#+1
   \       0x28   0xEAFF'FFF8        B        ??console_dump_frame_0
    149          	console_put_string("\n\r");
   \                     ??console_dump_frame_1:
   \       0x2C   0x....'....        ADR      R0,??DataTable16  ;; 0x0A, 0x0D, 0x00, 0x00
   \       0x30   0x....'....        BL       console_put_string
    150          }
   \       0x34   0xE8BD'8070        POP      {R4-R6,PC}       ;; return
    151          

   \                                 In section SOFTPACK, align 4, keep-with-next
    152          void console_dump_memory(uint8_t *buffer, uint32_t size,
    153          				uint32_t address)
    154          {
   \                     console_dump_memory:
   \        0x0   0xE92D'4FF7        PUSH     {R0-R2,R4-R11,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
   \        0x8   0xE1B0'5001        MOVS     R5,R1
    155          	uint32_t i, j;
    156          	uint32_t last_line_start;
    157          	uint8_t *tmp;
    158          
    159          	for (i = 0; i < (size / 16); i++) {
   \        0xC   0xE3A0'9000        MOV      R9,#+0
   \                     ??console_dump_memory_0:
   \       0x10   0xE159'0225        CMP      R9,R5, LSR #+4
   \       0x14   0x2A00'0021        BCS      ??console_dump_memory_1
    160          		printf("0x%08X: ", (unsigned int)(address + (i * 16)));
   \       0x18   0xE59D'0008        LDR      R0,[SP, #+8]
   \       0x1C   0xE3A0'2010        MOV      R2,#+16
   \       0x20   0xE021'0992        MLA      R1,R2,R9,R0
   \       0x24   0x....'....        LDR      R0,??DataTable17_18
   \       0x28   0x....'....        BL       printf
    161          		tmp = (uint8_t *) & buffer[i * 16];
   \       0x2C   0xE1B0'0209        LSLS     R0,R9,#+4
   \       0x30   0xE094'A000        ADDS     R10,R4,R0
    162          		for (j = 0; j < 4; j++) {
   \       0x34   0xE3A0'B000        MOV      R11,#+0
   \                     ??console_dump_memory_2:
   \       0x38   0xE35B'0004        CMP      R11,#+4
   \       0x3C   0x2A00'0009        BCS      ??console_dump_memory_3
    163          			printf("%02X%02X%02X%02X ", tmp[0], tmp[1], tmp[2],
    164          			       tmp[3]);
   \       0x40   0xE5DA'0003        LDRB     R0,[R10, #+3]
   \       0x44   0xE58D'0000        STR      R0,[SP, #+0]
   \       0x48   0xE5DA'3002        LDRB     R3,[R10, #+2]
   \       0x4C   0xE5DA'2001        LDRB     R2,[R10, #+1]
   \       0x50   0xE5DA'1000        LDRB     R1,[R10, #+0]
   \       0x54   0x....'....        LDR      R0,??DataTable17_19
   \       0x58   0x....'....        BL       printf
    165          			tmp += 4;
   \       0x5C   0xE29A'A004        ADDS     R10,R10,#+4
    166          		}
   \       0x60   0xE29B'B001        ADDS     R11,R11,#+1
   \       0x64   0xEAFF'FFF3        B        ??console_dump_memory_2
    167          		tmp = (uint8_t *) & buffer[i * 16];
   \                     ??console_dump_memory_3:
   \       0x68   0xE1B0'0209        LSLS     R0,R9,#+4
   \       0x6C   0xE094'7000        ADDS     R7,R4,R0
    168          		for (j = 0; j < 16; j++) {
   \       0x70   0xE3A0'8000        MOV      R8,#+0
   \                     ??console_dump_memory_4:
   \       0x74   0xE358'0010        CMP      R8,#+16
   \       0x78   0x2A00'0004        BCS      ??console_dump_memory_5
    169          			console_put_char(*tmp++);
   \       0x7C   0xE5D7'0000        LDRB     R0,[R7, #+0]
   \       0x80   0x....'....        BL       console_put_char
   \       0x84   0xE297'7001        ADDS     R7,R7,#+1
    170          		}
   \       0x88   0xE298'8001        ADDS     R8,R8,#+1
   \       0x8C   0xEAFF'FFF8        B        ??console_dump_memory_4
    171          		printf("\n\r");
   \                     ??console_dump_memory_5:
   \       0x90   0x....'....        ADR      R0,??DataTable17  ;; 0x0A, 0x0D, 0x00, 0x00
   \       0x94   0x....'....        BL       printf
    172          	}
   \       0x98   0xE299'9001        ADDS     R9,R9,#+1
   \       0x9C   0xEAFF'FFDB        B        ??console_dump_memory_0
    173          	if ((size % 16) != 0) {
   \                     ??console_dump_memory_1:
   \       0xA0   0xE315'000F        TST      R5,#0xF
   \       0xA4   0x0A00'0025        BEQ      ??console_dump_memory_6
    174          		last_line_start = size - (size % 16);
   \       0xA8   0xE215'000F        ANDS     R0,R5,#0xF
   \       0xAC   0xE055'0000        SUBS     R0,R5,R0
   \       0xB0   0xE1B0'6000        MOVS     R6,R0
    175          		printf("0x%08X: ", (unsigned int)(address + last_line_start));
   \       0xB4   0xE59D'0008        LDR      R0,[SP, #+8]
   \       0xB8   0xE096'1000        ADDS     R1,R6,R0
   \       0xBC   0x....'....        LDR      R0,??DataTable17_18
   \       0xC0   0x....'....        BL       printf
    176          		for (j = last_line_start; j < last_line_start + 16; j++) {
   \       0xC4   0xE1B0'A006        MOVS     R10,R6
   \                     ??console_dump_memory_7:
   \       0xC8   0xE296'0010        ADDS     R0,R6,#+16
   \       0xCC   0xE15A'0000        CMP      R10,R0
   \       0xD0   0x2A00'000F        BCS      ??console_dump_memory_8
    177          			if ((j != last_line_start) && (j % 4 == 0)) {
   \       0xD4   0xE15A'0006        CMP      R10,R6
   \       0xD8   0x0A00'0003        BEQ      ??console_dump_memory_9
   \       0xDC   0xE31A'0003        TST      R10,#0x3
   \       0xE0   0x1A00'0001        BNE      ??console_dump_memory_9
    178          				printf(" ");
   \       0xE4   0x....'....        ADR      R0,??DataTable17_1  ;; " "
   \       0xE8   0x....'....        BL       printf
    179          			}
    180          			if (j < size)
   \                     ??console_dump_memory_9:
   \       0xEC   0xE15A'0005        CMP      R10,R5
   \       0xF0   0x2A00'0003        BCS      ??console_dump_memory_10
    181          				printf("%02X", buffer[j]);
   \       0xF4   0xE7D4'100A        LDRB     R1,[R4, +R10]
   \       0xF8   0x....'....        LDR      R0,??DataTable17_20
   \       0xFC   0x....'....        BL       printf
   \      0x100   0xEA00'0001        B        ??console_dump_memory_11
    182          			else
    183          				printf("  ");
   \                     ??console_dump_memory_10:
   \      0x104   0x....'....        ADR      R0,??DataTable17_2  ;; 0x20, 0x20, 0x00, 0x00
   \      0x108   0x....'....        BL       printf
    184          		}
   \                     ??console_dump_memory_11:
   \      0x10C   0xE29A'A001        ADDS     R10,R10,#+1
   \      0x110   0xEAFF'FFEC        B        ??console_dump_memory_7
    185          		printf(" ");
   \                     ??console_dump_memory_8:
   \      0x114   0x....'....        ADR      R0,??DataTable17_1  ;; " "
   \      0x118   0x....'....        BL       printf
    186          		for (j = last_line_start; j < size; j++) {
   \      0x11C   0xE1B0'8006        MOVS     R8,R6
   \                     ??console_dump_memory_12:
   \      0x120   0xE158'0005        CMP      R8,R5
   \      0x124   0x2A00'0003        BCS      ??console_dump_memory_13
    187          			console_put_char(buffer[j]);
   \      0x128   0xE7D4'0008        LDRB     R0,[R4, +R8]
   \      0x12C   0x....'....        BL       console_put_char
    188          		}
   \      0x130   0xE298'8001        ADDS     R8,R8,#+1
   \      0x134   0xEAFF'FFF9        B        ??console_dump_memory_12
    189          		printf("\n\r");
   \                     ??console_dump_memory_13:
   \      0x138   0x....'....        ADR      R0,??DataTable17  ;; 0x0A, 0x0D, 0x00, 0x00
   \      0x13C   0x....'....        BL       printf
    190          	}
    191          }
   \                     ??console_dump_memory_6:
   \      0x140   0xE8BD'8FF7        POP      {R0-R2,R4-R11,PC}  ;; return
    192          

   \                                 In section SOFTPACK, align 4, keep-with-next
    193          uint32_t console_get_integer(uint32_t * pvalue)
    194          {
   \                     console_get_integer:
   \        0x0   0xE92D'40F8        PUSH     {R3-R7,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
    195          	uint8_t key;
    196          	uint8_t nb = 0;
   \        0x8   0xE3A0'6000        MOV      R6,#+0
    197          	uint32_t value = 0;
   \        0xC   0xE3A0'7000        MOV      R7,#+0
    198          
    199          	while (1) {
    200          		key = console_get_char();
   \                     ??console_get_integer_0:
   \       0x10   0x....'....        BL       console_get_char
   \       0x14   0xE1B0'5000        MOVS     R5,R0
    201          		console_put_char(key);
   \       0x18   0xE1B0'0005        MOVS     R0,R5
   \       0x1C   0xE210'00FF        ANDS     R0,R0,#0xFF      ;; Zero extend
   \       0x20   0x....'....        BL       console_put_char
    202          
    203          		if (key >= '0' && key <= '9') {
   \       0x24   0xE1B0'0005        MOVS     R0,R5
   \       0x28   0xE210'00FF        ANDS     R0,R0,#0xFF      ;; Zero extend
   \       0x2C   0xE350'0030        CMP      R0,#+48
   \       0x30   0xBA00'000A        BLT      ??console_get_integer_1
   \       0x34   0xE1B0'0005        MOVS     R0,R5
   \       0x38   0xE210'00FF        ANDS     R0,R0,#0xFF      ;; Zero extend
   \       0x3C   0xE350'003A        CMP      R0,#+58
   \       0x40   0xAA00'0006        BGE      ??console_get_integer_1
    204          			value = (value * 10) + (key - '0');
   \       0x44   0xE3A0'000A        MOV      R0,#+10
   \       0x48   0xE1B0'1005        MOVS     R1,R5
   \       0x4C   0xE211'10FF        ANDS     R1,R1,#0xFF      ;; Zero extend
   \       0x50   0xE251'1030        SUBS     R1,R1,#+48
   \       0x54   0xE027'1790        MLA      R7,R0,R7,R1
    205          			nb++;
   \       0x58   0xE296'6001        ADDS     R6,R6,#+1
   \       0x5C   0xEAFF'FFEB        B        ??console_get_integer_0
    206          		} else {
    207          			if (key == 0x0D || key == ' ') {
   \                     ??console_get_integer_1:
   \       0x60   0xE1B0'0005        MOVS     R0,R5
   \       0x64   0xE210'00FF        ANDS     R0,R0,#0xFF      ;; Zero extend
   \       0x68   0xE350'000D        CMP      R0,#+13
   \       0x6C   0x0A00'0003        BEQ      ??console_get_integer_2
   \       0x70   0xE1B0'0005        MOVS     R0,R5
   \       0x74   0xE210'00FF        ANDS     R0,R0,#0xFF      ;; Zero extend
   \       0x78   0xE350'0020        CMP      R0,#+32
   \       0x7C   0x1A00'000C        BNE      ??console_get_integer_3
    208          				if (nb == 0) {
   \                     ??console_get_integer_2:
   \       0x80   0xE1B0'0006        MOVS     R0,R6
   \       0x84   0xE210'00FF        ANDS     R0,R0,#0xFF      ;; Zero extend
   \       0x88   0xE350'0000        CMP      R0,#+0
   \       0x8C   0x1A00'0003        BNE      ??console_get_integer_4
    209          					printf
    210          					    ("\n\rWrite a number and press ENTER or SPACE!\n\r");
   \       0x90   0x....'....        LDR      R0,??DataTable17_21
   \       0x94   0x....'....        BL       printf
    211          					return 0;
   \       0x98   0xE3A0'0000        MOV      R0,#+0
   \       0x9C   0xEA00'0009        B        ??console_get_integer_5
    212          				} else {
    213          					printf("\n\r");
   \                     ??console_get_integer_4:
   \       0xA0   0x....'....        ADR      R0,??DataTable16  ;; 0x0A, 0x0D, 0x00, 0x00
   \       0xA4   0x....'....        BL       printf
    214          					*pvalue = value;
   \       0xA8   0xE584'7000        STR      R7,[R4, #+0]
    215          					return 1;
   \       0xAC   0xE3A0'0001        MOV      R0,#+1
   \       0xB0   0xEA00'0004        B        ??console_get_integer_5
    216          				}
    217          			} else {
    218          				printf("\n\r'%c' not a number!\n\r", key);
   \                     ??console_get_integer_3:
   \       0xB4   0xE1B0'1005        MOVS     R1,R5
   \       0xB8   0xE211'10FF        ANDS     R1,R1,#0xFF      ;; Zero extend
   \       0xBC   0x....'....        LDR      R0,??DataTable17_22
   \       0xC0   0x....'....        BL       printf
    219          				return 0;
   \       0xC4   0xE3A0'0000        MOV      R0,#+0
   \                     ??console_get_integer_5:
   \       0xC8   0xE8BD'80F2        POP      {R1,R4-R7,PC}    ;; return
    220          			}
    221          		}
    222          	}
    223          }
    224          

   \                                 In section SOFTPACK, align 4, keep-with-next
    225          uint32_t console_get_integer_min_max(uint32_t * pvalue, uint32_t min,
    226          					 uint32_t max)
    227          {
   \                     console_get_integer_min_max:
   \        0x0   0xE92D'407C        PUSH     {R2-R6,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
   \        0x8   0xE1B0'5001        MOVS     R5,R1
   \        0xC   0xE1B0'6002        MOVS     R6,R2
    228          	uint32_t value = 0;
   \       0x10   0xE3A0'0000        MOV      R0,#+0
   \       0x14   0xE58D'0000        STR      R0,[SP, #+0]
    229          
    230          	if (console_get_integer(&value) == 0)
   \       0x18   0xE1B0'000D        MOVS     R0,SP
   \       0x1C   0x....'....        BL       console_get_integer
   \       0x20   0xE350'0000        CMP      R0,#+0
   \       0x24   0x1A00'0001        BNE      ??console_get_integer_min_max_0
    231          		return 0;
   \       0x28   0xE3A0'0000        MOV      R0,#+0
   \       0x2C   0xEA00'0010        B        ??console_get_integer_min_max_1
    232          	if (value < min || value > max) {
   \                     ??console_get_integer_min_max_0:
   \       0x30   0xE59D'0000        LDR      R0,[SP, #+0]
   \       0x34   0xE150'0005        CMP      R0,R5
   \       0x38   0x3A00'0002        BCC      ??console_get_integer_min_max_2
   \       0x3C   0xE59D'0000        LDR      R0,[SP, #+0]
   \       0x40   0xE156'0000        CMP      R6,R0
   \       0x44   0x2A00'0005        BCS      ??console_get_integer_min_max_3
    233          		printf("\n\rThe number have to be between %u and %u\n\r",
    234          		       (unsigned int)min, (unsigned int)max);
   \                     ??console_get_integer_min_max_2:
   \       0x48   0xE1B0'2006        MOVS     R2,R6
   \       0x4C   0xE1B0'1005        MOVS     R1,R5
   \       0x50   0x....'....        LDR      R0,??DataTable17_23
   \       0x54   0x....'....        BL       printf
    235          		return 0;
   \       0x58   0xE3A0'0000        MOV      R0,#+0
   \       0x5C   0xEA00'0004        B        ??console_get_integer_min_max_1
    236          	}
    237          	console_put_string("\n\r");
   \                     ??console_get_integer_min_max_3:
   \       0x60   0x....'....        ADR      R0,??DataTable17  ;; 0x0A, 0x0D, 0x00, 0x00
   \       0x64   0x....'....        BL       console_put_string
    238          	*pvalue = value;
   \       0x68   0xE59D'0000        LDR      R0,[SP, #+0]
   \       0x6C   0xE584'0000        STR      R0,[R4, #+0]
    239          	return 1;
   \       0x70   0xE3A0'0001        MOV      R0,#+1
   \                     ??console_get_integer_min_max_1:
   \       0x74   0xE8BD'8076        POP      {R1,R2,R4-R6,PC}  ;; return
    240          }
    241          

   \                                 In section SOFTPACK, align 4, keep-with-next
    242          uint32_t console_get_hexa_32(uint32_t * pvalue)
    243          {
   \                     console_get_hexa_32:
   \        0x0   0xE92D'40F8        PUSH     {R3-R7,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
    244          	uint8_t key;
    245          	uint32_t dw = 0;
   \        0x8   0xE3A0'0000        MOV      R0,#+0
    246          	uint32_t value = 0;
   \        0xC   0xE3A0'5000        MOV      R5,#+0
    247          
    248          	for (dw = 0; dw < 8; dw++) {
   \       0x10   0xE3A0'6000        MOV      R6,#+0
   \                     ??console_get_hexa_32_0:
   \       0x14   0xE356'0008        CMP      R6,#+8
   \       0x18   0x2A00'0034        BCS      ??console_get_hexa_32_1
    249          		key = console_get_char();
   \       0x1C   0x....'....        BL       console_get_char
   \       0x20   0xE1B0'7000        MOVS     R7,R0
    250          		console_put_char(key);
   \       0x24   0xE1B0'0007        MOVS     R0,R7
   \       0x28   0xE210'00FF        ANDS     R0,R0,#0xFF      ;; Zero extend
   \       0x2C   0x....'....        BL       console_put_char
    251          
    252          		if (key >= '0' && key <= '9') {
   \       0x30   0xE1B0'0007        MOVS     R0,R7
   \       0x34   0xE210'00FF        ANDS     R0,R0,#0xFF      ;; Zero extend
   \       0x38   0xE350'0030        CMP      R0,#+48
   \       0x3C   0xBA00'0009        BLT      ??console_get_hexa_32_2
   \       0x40   0xE1B0'0007        MOVS     R0,R7
   \       0x44   0xE210'00FF        ANDS     R0,R0,#0xFF      ;; Zero extend
   \       0x48   0xE350'003A        CMP      R0,#+58
   \       0x4C   0xAA00'0005        BGE      ??console_get_hexa_32_2
    253          			value = (value * 16) + (key - '0');
   \       0x50   0xE3A0'0010        MOV      R0,#+16
   \       0x54   0xE1B0'1007        MOVS     R1,R7
   \       0x58   0xE211'10FF        ANDS     R1,R1,#0xFF      ;; Zero extend
   \       0x5C   0xE251'1030        SUBS     R1,R1,#+48
   \       0x60   0xE025'1590        MLA      R5,R0,R5,R1
   \       0x64   0xEA00'001F        B        ??console_get_hexa_32_3
    254          		} else {
    255          			if (key >= 'A' && key <= 'F') {
   \                     ??console_get_hexa_32_2:
   \       0x68   0xE1B0'0007        MOVS     R0,R7
   \       0x6C   0xE210'00FF        ANDS     R0,R0,#0xFF      ;; Zero extend
   \       0x70   0xE350'0041        CMP      R0,#+65
   \       0x74   0xBA00'0009        BLT      ??console_get_hexa_32_4
   \       0x78   0xE1B0'0007        MOVS     R0,R7
   \       0x7C   0xE210'00FF        ANDS     R0,R0,#0xFF      ;; Zero extend
   \       0x80   0xE350'0047        CMP      R0,#+71
   \       0x84   0xAA00'0005        BGE      ??console_get_hexa_32_4
    256          				value = (value * 16) + (key - 'A' + 10);
   \       0x88   0xE3A0'0010        MOV      R0,#+16
   \       0x8C   0xE1B0'1007        MOVS     R1,R7
   \       0x90   0xE211'10FF        ANDS     R1,R1,#0xFF      ;; Zero extend
   \       0x94   0xE251'1037        SUBS     R1,R1,#+55
   \       0x98   0xE025'1590        MLA      R5,R0,R5,R1
   \       0x9C   0xEA00'0011        B        ??console_get_hexa_32_3
    257          			} else {
    258          				if (key >= 'a' && key <= 'f') {
   \                     ??console_get_hexa_32_4:
   \       0xA0   0xE1B0'0007        MOVS     R0,R7
   \       0xA4   0xE210'00FF        ANDS     R0,R0,#0xFF      ;; Zero extend
   \       0xA8   0xE350'0061        CMP      R0,#+97
   \       0xAC   0xBA00'0009        BLT      ??console_get_hexa_32_5
   \       0xB0   0xE1B0'0007        MOVS     R0,R7
   \       0xB4   0xE210'00FF        ANDS     R0,R0,#0xFF      ;; Zero extend
   \       0xB8   0xE350'0067        CMP      R0,#+103
   \       0xBC   0xAA00'0005        BGE      ??console_get_hexa_32_5
    259          					value = (value * 16) + (key - 'a' + 10);
   \       0xC0   0xE3A0'0010        MOV      R0,#+16
   \       0xC4   0xE1B0'1007        MOVS     R1,R7
   \       0xC8   0xE211'10FF        ANDS     R1,R1,#0xFF      ;; Zero extend
   \       0xCC   0xE251'1057        SUBS     R1,R1,#+87
   \       0xD0   0xE025'1590        MLA      R5,R0,R5,R1
   \       0xD4   0xEA00'0003        B        ??console_get_hexa_32_3
    260          				} else {
    261          					console_put_string("\n\rIt is not a hexa character!\n\r");
   \                     ??console_get_hexa_32_5:
   \       0xD8   0x....'....        LDR      R0,??DataTable17_24
   \       0xDC   0x....'....        BL       console_put_string
    262          					return 0;
   \       0xE0   0xE3A0'0000        MOV      R0,#+0
   \       0xE4   0xEA00'0005        B        ??console_get_hexa_32_6
    263          				}
    264          			}
    265          		}
    266          	}
   \                     ??console_get_hexa_32_3:
   \       0xE8   0xE296'6001        ADDS     R6,R6,#+1
   \       0xEC   0xEAFF'FFC8        B        ??console_get_hexa_32_0
    267          	console_put_string("\n\r");
   \                     ??console_get_hexa_32_1:
   \       0xF0   0x....'....        ADR      R0,??DataTable17  ;; 0x0A, 0x0D, 0x00, 0x00
   \       0xF4   0x....'....        BL       console_put_string
    268          	*pvalue = value;
   \       0xF8   0xE584'5000        STR      R5,[R4, #+0]
    269          	return 1;
   \       0xFC   0xE3A0'0001        MOV      R0,#+1
   \                     ??console_get_hexa_32_6:
   \      0x100   0xE8BD'80F2        POP      {R1,R4-R7,PC}    ;; return
    270          }
    271          

   \                                 In section SOFTPACK, align 4, keep-with-next
    272          void console_clear_screen(void)
    273          {
   \                     console_clear_screen:
   \        0x0   0xE92D'5000        PUSH     {R12,LR}
    274          	console_put_string("\033[2J\033[0;0f");
   \        0x4   0x....'....        LDR      R0,??DataTable17_25
   \        0x8   0x....'....        BL       console_put_string
    275          }
   \        0xC   0xE8BD'8001        POP      {R0,PC}          ;; return
    276          

   \                                 In section SOFTPACK, align 4, keep-with-next
    277          void console_reset_cursor(void)
    278          {
   \                     console_reset_cursor:
   \        0x0   0xE92D'5000        PUSH     {R12,LR}
    279          	console_put_string("\033[0;0f");
   \        0x4   0x....'....        LDR      R0,??DataTable17_26
   \        0x8   0x....'....        BL       console_put_string
    280          }
   \        0xC   0xE8BD'8001        POP      {R0,PC}          ;; return
    281          

   \                                 In section SOFTPACK, align 4, keep-with-next
    282          void console_echo(uint8_t c)
    283          {
   \                     console_echo:
   \        0x0   0xE92D'4010        PUSH     {R4,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
    284          	switch (c) {
   \        0x8   0xE1B0'0004        MOVS     R0,R4
   \        0xC   0xE210'00FF        ANDS     R0,R0,#0xFF      ;; Zero extend
   \       0x10   0xE350'0008        CMP      R0,#+8
   \       0x14   0x0A00'000C        BEQ      ??console_echo_0
   \       0x18   0xE350'000A        CMP      R0,#+10
   \       0x1C   0x0A00'0004        BEQ      ??console_echo_1
   \       0x20   0xE350'000D        CMP      R0,#+13
   \       0x24   0x0A00'0002        BEQ      ??console_echo_1
   \       0x28   0xE350'007F        CMP      R0,#+127
   \       0x2C   0x0A00'0003        BEQ      ??console_echo_2
   \       0x30   0xEA00'0008        B        ??console_echo_3
    285          	case '\r':
    286          	case '\n':
    287          		console_put_string("\r\n");
   \                     ??console_echo_1:
   \       0x34   0x....'....        ADR      R0,??DataTable17_3  ;; 0x0D, 0x0A, 0x00, 0x00
   \       0x38   0x....'....        BL       console_put_string
    288          		break;
   \       0x3C   0xEA00'0008        B        ??console_echo_4
    289          	case 0x7F:
    290          		console_put_string("\033[1D\033[K");
   \                     ??console_echo_2:
   \       0x40   0x....'....        LDR      R0,??DataTable17_27
   \       0x44   0x....'....        BL       console_put_string
    291          		break;
   \       0x48   0xEA00'0005        B        ??console_echo_4
    292          	case '\b':
    293          		console_put_string("\033[1D\033[K");
   \                     ??console_echo_0:
   \       0x4C   0x....'....        LDR      R0,??DataTable17_27
   \       0x50   0x....'....        BL       console_put_string
    294          		break;
   \       0x54   0xEA00'0002        B        ??console_echo_4
    295          	default:
    296          		console_put_char(c);
   \                     ??console_echo_3:
   \       0x58   0xE1B0'0004        MOVS     R0,R4
   \       0x5C   0xE210'00FF        ANDS     R0,R0,#0xFF      ;; Zero extend
   \       0x60   0x....'....        BL       console_put_char
    297          	}
    298          }
   \                     ??console_echo_4:
   \       0x64   0xE8BD'8010        POP      {R4,PC}          ;; return

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable13:
   \        0x0   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00

   \              0x00 0x00

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable16:
   \        0x0   0x0A 0x0D          DC8      0x0A, 0x0D, 0x00, 0x00

   \              0x00 0x00

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable17:
   \        0x0   0x0A 0x0D          DC8      0x0A, 0x0D, 0x00, 0x00

   \              0x00 0x00

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable17_1:
   \        0x0   0x20 0x00          DC8      " ",0x0,0x0

   \              0x00 0x00

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable17_2:
   \        0x0   0x20 0x20          DC8      0x20, 0x20, 0x00, 0x00

   \              0x00 0x00

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable17_3:
   \        0x0   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00

   \              0x00 0x00

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable17_4:
   \        0x0   0x....'....        DC32     console

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable17_5:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable17_6:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable17_7:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable17_8:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable17_9:
   \        0x0   0x....'....        DC32     ?_4

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable17_10:
   \        0x0   0x....'....        DC32     ?_5

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable17_11:
   \        0x0   0x....'....        DC32     ?_6

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable17_12:
   \        0x0   0x....'....        DC32     ?_8

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable17_13:
   \        0x0   0x....'....        DC32     ?_9

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable17_14:
   \        0x0   0x....'....        DC32     ?_7

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable17_15:
   \        0x0   0x....'....        DC32     ?_10

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable17_16:
   \        0x0   0x....'....        DC32     ?_11

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable17_17:
   \        0x0   0x....'....        DC32     ?_13

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable17_18:
   \        0x0   0x....'....        DC32     ?_15

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable17_19:
   \        0x0   0x....'....        DC32     ?_16

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable17_20:
   \        0x0   0x....'....        DC32     ?_18

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable17_21:
   \        0x0   0x....'....        DC32     ?_20

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable17_22:
   \        0x0   0x....'....        DC32     ?_21

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable17_23:
   \        0x0   0x....'....        DC32     ?_22

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable17_24:
   \        0x0   0x....'....        DC32     ?_23

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable17_25:
   \        0x0   0x....'....        DC32     ?_24

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable17_26:
   \        0x0   0x....'....        DC32     ?_25

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable17_27:
   \        0x0   0x....'....        DC32     ?_26

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x2D 0x2D          DC8 "-- %s --\015\012"

   \              0x20 0x25    

   \              0x73 0x20    

   \              0x2D 0x2D    

   \              0x0D 0x0A    

   \              0x00
   \        0xB   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x53 0x6F          DC8 "Softpack v%s\015\012"

   \              0x66 0x74    

   \              0x70 0x61    

   \              0x63 0x6B    

   \              0x20 0x76    

   \              0x25 0x73    

   \              0x0D 0x0A    

   \              0x00
   \        0xF   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x32 0x2E          DC8 "2.17"

   \              0x31 0x37    

   \              0x00
   \        0x5   0x00 0x00          DC8 0, 0, 0

   \              0x00

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x42 0x75          DC8 "Built for %s\015\012"

   \              0x69 0x6C    

   \              0x74 0x20    

   \              0x66 0x6F    

   \              0x72 0x20    

   \              0x25 0x73    

   \              0x0D 0x0A    

   \              0x00
   \        0xF   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x50 0x72          DC8 "Processor: %s\015\012"

   \              0x6F 0x63    

   \              0x65 0x73    

   \              0x73 0x6F    

   \              0x72 0x3A    

   \              0x20 0x25    

   \              0x73 0x0D    

   \              0x0A 0x00

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x50 0x72          DC8 "Processor clock: %u MHz\015\012"

   \              0x6F 0x63    

   \              0x65 0x73    

   \              0x73 0x6F    

   \              0x72 0x20    

   \              0x63 0x6C    

   \              0x6F 0x63    

   \              0x6B 0x3A    

   \              0x20 0x25    

   \              0x75 0x20    

   \              0x4D 0x48    

   \              0x7A 0x0D    

   \              0x0A 0x00
   \       0x1A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_6:
   \        0x0   0x4D 0x61          DC8 "Master clock: %u MHz\015\012"

   \              0x73 0x74    

   \              0x65 0x72    

   \              0x20 0x63    

   \              0x6C 0x6F    

   \              0x63 0x6B    

   \              0x3A 0x20    

   \              0x25 0x75    

   \              0x20 0x4D    

   \              0x48 0x7A    

   \              0x0D 0x0A    

   \              0x00
   \       0x17   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_7:
   \        0x0   0x4D 0x4D          DC8 "MMU is %s\015\012"

   \              0x55 0x20    

   \              0x69 0x73    

   \              0x20 0x25    

   \              0x73 0x0D    

   \              0x0A 0x00

   \                                 In section .rodata, align 4
   \                     ?_8:
   \        0x0   0x65 0x6E          DC8 "enabled"

   \              0x61 0x62    

   \              0x6C 0x65    

   \              0x64 0x00

   \                                 In section .rodata, align 4
   \                     ?_9:
   \        0x0   0x64 0x69          DC8 "disabled"

   \              0x73 0x61    

   \              0x62 0x6C    

   \              0x65 0x64    

   \              0x00
   \        0x9   0x00 0x00          DC8 0, 0, 0

   \              0x00

   \                                 In section .rodata, align 4
   \                     ?_10:
   \        0x0   0x49 0x2D          DC8 "I-Cache is %s\015\012"

   \              0x43 0x61    

   \              0x63 0x68    

   \              0x65 0x20    

   \              0x69 0x73    

   \              0x20 0x25    

   \              0x73 0x0D    

   \              0x0A 0x00

   \                                 In section .rodata, align 4
   \                     ?_11:
   \        0x0   0x44 0x2D          DC8 "D-Cache is %s\015\012"

   \              0x43 0x61    

   \              0x63 0x68    

   \              0x65 0x20    

   \              0x69 0x73    

   \              0x20 0x25    

   \              0x73 0x0D    

   \              0x0A 0x00

   \                                 In section .rodata, align 4
   \        0x0   0x0D 0x0A          DC8 "\015\012"

   \              0x00
   \        0x3   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_13:
   \        0x0   0x25 0x30          DC8 "%02x "

   \              0x32 0x78    

   \              0x20 0x00
   \        0x6   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \        0x0   0x0A 0x0D          DC8 "\012\015"

   \              0x00
   \        0x3   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_15:
   \        0x0   0x30 0x78          DC8 "0x%08X: "

   \              0x25 0x30    

   \              0x38 0x58    

   \              0x3A 0x20    

   \              0x00
   \        0x9   0x00 0x00          DC8 0, 0, 0

   \              0x00

   \                                 In section .rodata, align 4
   \                     ?_16:
   \        0x0   0x25 0x30          DC8 "%02X%02X%02X%02X "

   \              0x32 0x58    

   \              0x25 0x30    

   \              0x32 0x58    

   \              0x25 0x30    

   \              0x32 0x58    

   \              0x25 0x30    

   \              0x32 0x58    

   \              0x20 0x00
   \       0x12   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 2
   \        0x0   0x20 0x00          DC8 " "

   \                                 In section .rodata, align 4
   \                     ?_18:
   \        0x0   0x25 0x30          DC8 "%02X"

   \              0x32 0x58    

   \              0x00
   \        0x5   0x00 0x00          DC8 0, 0, 0

   \              0x00

   \                                 In section .rodata, align 4
   \        0x0   0x20 0x20          DC8 "  "

   \              0x00
   \        0x3   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_20:
   \        0x0   0x0A 0x0D          DC8 "\012\015Write a number and press ENTER or SPACE!\012\015"

   \              0x57 0x72    

   \              0x69 0x74    

   \              0x65 0x20    

   \              0x61 0x20    

   \              0x6E 0x75    

   \              0x6D 0x62    

   \              0x65 0x72    

   \              0x20 0x61    

   \              0x6E 0x64    

   \              0x20 0x70    

   \              0x72 0x65    

   \              0x73 0x73    

   \              0x20 0x45    

   \              0x4E 0x54    

   \              0x45 0x52    

   \              0x20 0x6F    

   \              0x72 0x20    

   \              0x53 0x50    

   \              0x41 0x43    

   \              0x45 0x21    

   \              0x0A 0x0D    

   \              0x00
   \       0x2D   0x00 0x00          DC8 0, 0, 0

   \              0x00

   \                                 In section .rodata, align 4
   \                     ?_21:
   \        0x0   0x0A 0x0D          DC8 "\012\015'%c' not a number!\012\015"

   \              0x27 0x25    

   \              0x63 0x27    

   \              0x20 0x6E    

   \              0x6F 0x74    

   \              0x20 0x61    

   \              0x20 0x6E    

   \              0x75 0x6D    

   \              0x62 0x65    

   \              0x72 0x21    

   \              0x0A 0x0D    

   \              0x00
   \       0x17   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_22:
   \        0x0   0x0A 0x0D          DC8 "\012\015The number have to be between %u and %u\012\015"

   \              0x54 0x68    

   \              0x65 0x20    

   \              0x6E 0x75    

   \              0x6D 0x62    

   \              0x65 0x72    

   \              0x20 0x68    

   \              0x61 0x76    

   \              0x65 0x20    

   \              0x74 0x6F    

   \              0x20 0x62    

   \              0x65 0x20    

   \              0x62 0x65    

   \              0x74 0x77    

   \              0x65 0x65    

   \              0x6E 0x20    

   \              0x25 0x75    

   \              0x20 0x61    

   \              0x6E 0x64    

   \              0x20 0x25    

   \              0x75 0x0A    

   \              0x0D 0x00

   \                                 In section .rodata, align 4
   \                     ?_23:
   \        0x0   0x0A 0x0D          DC8 "\012\015It is not a hexa character!\012\015"

   \              0x49 0x74    

   \              0x20 0x69    

   \              0x73 0x20    

   \              0x6E 0x6F    

   \              0x74 0x20    

   \              0x61 0x20    

   \              0x68 0x65    

   \              0x78 0x61    

   \              0x20 0x63    

   \              0x68 0x61    

   \              0x72 0x61    

   \              0x63 0x74    

   \              0x65 0x72    

   \              0x21 0x0A    

   \              0x0D 0x00

   \                                 In section .rodata, align 4
   \                     ?_24:
   \        0x0   0x1B 0x5B          DC8 "\033[2J\033[0;0f"

   \              0x32 0x4A    

   \              0x1B 0x5B    

   \              0x30 0x3B    

   \              0x30 0x66    

   \              0x00
   \        0xB   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_25:
   \        0x0   0x1B 0x5B          DC8 "\033[0;0f"

   \              0x30 0x3B    

   \              0x30 0x66    

   \              0x00
   \        0x7   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_26:
   \        0x0   0x1B 0x5B          DC8 "\033[1D\033[K"

   \              0x31 0x44    

   \              0x1B 0x5B    

   \              0x4B 0x00

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   console_clear_screen
         8   -> console_put_string
      24   console_configure
        24   -> __aeabi_memset
        24   -> pio_configure
        24   -> seriald_configure
       8   console_disable_rx_interrupt
         8   -> seriald_disable_rx_interrupt
      16   console_dump_frame
        16   -> console_put_string
        16   -> printf
      48   console_dump_memory
        48   -> console_put_char
        48   -> printf
       8   console_echo
         8   -> console_put_char
         8   -> console_put_string
       8   console_enable_rx_interrupt
         8   -> seriald_enable_rx_interrupt
      16   console_example_info
        16   -> console_clear_screen
        16   -> console_put_string
        16   -> console_reset_cursor
        16   -> dcache_is_enabled
        16   -> get_board_name
        16   -> get_chip_name
        16   -> icache_is_enabled
        16   -> mmu_is_enabled
        16   -> pmc_get_master_clock
        16   -> pmc_get_processor_clock
        16   -> printf
        16 __aeabi_uidiv
       8   console_get_char
         8   -> seriald_get_char
      24   console_get_hexa_32
        24   -> console_get_char
        24   -> console_put_char
        24   -> console_put_string
      24   console_get_integer
        24   -> console_get_char
        24   -> console_put_char
        24   -> printf
      24   console_get_integer_min_max
        24   -> console_get_integer
        24   -> console_put_string
        24   -> printf
       8   console_is_rx_ready
         8   -> seriald_is_rx_ready
       8   console_is_tx_empty
         8   -> seriald_is_tx_empty
       8   console_put_char
         8   -> seriald_put_char
       8   console_put_string
         8   -> seriald_put_string
       8   console_reset_cursor
         8   -> console_put_string
       8   console_set_rx_handler
         8   -> seriald_set_rx_handler


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable13
       4  ??DataTable16
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable17_10
       4  ??DataTable17_11
       4  ??DataTable17_12
       4  ??DataTable17_13
       4  ??DataTable17_14
       4  ??DataTable17_15
       4  ??DataTable17_16
       4  ??DataTable17_17
       4  ??DataTable17_18
       4  ??DataTable17_19
       4  ??DataTable17_2
       4  ??DataTable17_20
       4  ??DataTable17_21
       4  ??DataTable17_22
       4  ??DataTable17_23
       4  ??DataTable17_24
       4  ??DataTable17_25
       4  ??DataTable17_26
       4  ??DataTable17_27
       4  ??DataTable17_3
       4  ??DataTable17_4
       4  ??DataTable17_5
       4  ??DataTable17_6
       4  ??DataTable17_7
       4  ??DataTable17_8
       4  ??DataTable17_9
      12  ?_0
      16  ?_1
      16  ?_10
      16  ?_11
       4  ?_12
       8  ?_13
       4  ?_14
      12  ?_15
      20  ?_16
       2  ?_17
       8  ?_18
       4  ?_19
       8  ?_2
      48  ?_20
      24  ?_21
      44  ?_22
      32  ?_23
      12  ?_24
       8  ?_25
       8  ?_26
      16  ?_3
      16  ?_4
      28  ?_5
      24  ?_6
      12  ?_7
       8  ?_8
      12  ?_9
      16  console
      16  console_clear_screen
     144  console_configure
      16  console_disable_rx_interrupt
      56  console_dump_frame
     324  console_dump_memory
     104  console_echo
      16  console_enable_rx_interrupt
     236  console_example_info
      20  console_get_char
     260  console_get_hexa_32
     204  console_get_integer
     120  console_get_integer_min_max
      16  console_is_rx_ready
      16  console_is_tx_empty
      28  console_put_char
      24  console_put_string
      16  console_reset_cursor
      24  console_set_rx_handler

 
    16 bytes in section .bss
   422 bytes in section .rodata
 1'760 bytes in section SOFTPACK
 
 1'760 bytes of CODE  memory
   422 bytes of CONST memory
    16 bytes of DATA  memory

Errors: none
Warnings: none
