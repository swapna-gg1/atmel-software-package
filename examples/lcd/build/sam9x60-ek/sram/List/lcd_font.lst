###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.1.245/W32 for ARM         20/Jan/2021  09:41:40
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\lcd_font.c
#    Command line      =
#        -f C:\Users\c40450\AppData\Local\Temp\EWD575.tmp
#        (C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\lcd_font.c
#        -D "SOFTPACK_VERSION=\"2.17\"" -D TRACE_LEVEL=5 -D VARIANT_SRAM -D
#        CONFIG_ARCH_ARMV5TE -D CONFIG_ARCH_ARM -D CONFIG_SOC_SAM9X60 -D
#        CONFIG_CHIP_SAM9X60 -D CONFIG_BOARD_SAM9X60_EK -D CONFIG_HAVE_AIC5 -D
#        CONFIG_HAVE_FLEXCOM -D CONFIG_HAVE_PIO3 -D CONFIG_HAVE_PIT -D
#        CONFIG_HAVE_SMC -D CONFIG_HAVE_SDRAMC -D CONFIG_HAVE_MPDDRC -D
#        CONFIG_HAVE_MPDDRC_DATA_PATH -D CONFIG_HAVE_MPDDRC_IO_CALIBRATION -D
#        CONFIG_HAVE_MPDDRC_DDR2 -D CONFIG_HAVE_ADC_LOW_RES -D
#        CONFIG_HAVE_PMC_FAST_STARTUP -D CONFIG_HAVE_PMC_GENERATED_CLOCKS -D
#        CONFIG_HAVE_SCKC -D CONFIG_HAVE_NFD0_ON_D16 -D CONFIG_HAVE_XDMAC -D
#        CONFIG_HAVE_LCD -D CONFIG_HAVE_LCDC -D CONFIG_HAVE_LCDC_OVR1 -D
#        CONFIG_HAVE_LCDC_OVR2 -D CONFIG_HAVE_PWMC -D
#        CONFIG_HAVE_DDR2_W972GG6KB -D CONFIG_HAVE_RSTC_EXTERNAL_RESET -D
#        CONFIG_HAVE_RSTC_INDEPENDENT_RESET -D CONFIG_HAVE_RTT -D
#        CONFIG_HAVE_SHDWC -D CONFIG_HAVE_LED -D CONFIG_HAVE_MMU -D
#        CONFIG_HAVE_L1CACHE -D CONFIG_HAVE_OTPC -D CONFIG_HAVE_DBGU -D
#        CONFIG_HAVE_SERIALD_DBGU -D CONFIG_HAVE_USART -D
#        CONFIG_HAVE_USART_FIFO -D CONFIG_HAVE_DWDT --preprocess
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\build\sam9x60-ek\sram\List
#        -lC
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\build\sam9x60-ek\sram\List
#        --diag_suppress Pa050 -o
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\build\sam9x60-ek\sram\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=ARM926EJ-S -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\..\..\arch\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\..\..\utils\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\..\..\target\common\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\..\..\target\sam9x60\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\..\..\drivers\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\..\..\lib\
#        --section .text=SOFTPACK --cpu_mode arm -On)
#    Locale            =  C
#    List file         =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\build\sam9x60-ek\sram\List\lcd_font.lst
#    Object file       =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\build\sam9x60-ek\sram\Obj\lcd_font.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\lcd\lcd_font.c
      1          /* ----------------------------------------------------------------------------
      2           *         SAM Software Package License
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2015, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          /** \file
     31           *
     32           * Implementation of draw font on LCD.
     33           *
     34           */
     35          
     36          /*----------------------------------------------------------------------------
     37           *        Headers
     38           *----------------------------------------------------------------------------*/
     39          
     40          #include "lcd_font.h"
     41          #include "lcd_draw.h"
     42          
     43          #include "font.h"
     44          
     45          #include <assert.h>
     46          
     47          /*----------------------------------------------------------------------------
     48           *        Local variables
     49           *----------------------------------------------------------------------------*/
     50          
     51          /** Global variable describing the font being instanced. */
     52          //const Font gFont = { 10, 14 };
     53          

   \                                 In section .bss, align 1
     54          static uint8_t font_sel = FONT10x14;
   \                     font_sel:
   \        0x0                      DS8 1
     55          
     56          /*----------------------------------------------------------------------------
     57           *        Exported functions
     58           *----------------------------------------------------------------------------*/
     59          

   \                                 In section SOFTPACK, align 4, keep-with-next
     60          struct _font_parameters* lcd_select_font (_FONT_enum font)
     61          {
     62          	font_sel = font;
   \                     lcd_select_font:
   \        0x0   0x....'....        LDR      R1,??DataTable3
   \        0x4   0xE5C1'0000        STRB     R0,[R1, #+0]
     63          	return &font_param[font];
   \        0x8   0x....'....        LDR      R1,??DataTable3_1
   \        0xC   0xE210'00FF        ANDS     R0,R0,#0xFF      ;; Zero extend
   \       0x10   0xE1B0'0180        LSLS     R0,R0,#+3
   \       0x14   0xE091'0000        ADDS     R0,R1,R0
   \       0x18   0xE12F'FF1E        BX       LR               ;; return
     64          }
     65          

   \                                 In section SOFTPACK, align 4, keep-with-next
     66          uint8_t lcd_get_selected_font (void)
     67          {
     68          	return font_sel;
   \                     lcd_get_selected_font:
   \        0x0   0x....'....        LDR      R0,??DataTable3
   \        0x4   0xE5D0'0000        LDRB     R0,[R0, #+0]
   \        0x8   0xE12F'FF1E        BX       LR               ;; return
     69          }
     70          

   \                                 In section SOFTPACK, align 4, keep-with-next
     71          void lcd_draw_char(uint32_t x, uint32_t y, uint8_t c, uint32_t color)
     72          {
   \                     lcd_draw_char:
   \        0x0   0xE92D'4FF7        PUSH     {R0-R2,R4-R11,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
   \        0x8   0xE1B0'5001        MOVS     R5,R1
   \        0xC   0xE1B0'6003        MOVS     R6,R3
     73          	uint32_t row, col;
     74          	uint8_t Ch;
     75          	uint8_t width = font_param[font_sel].width ;
   \       0x10   0x....'....        LDR      R10,??DataTable3
   \       0x14   0x....'....        LDR      R0,??DataTable3_1
   \       0x18   0xE5DA'1000        LDRB     R1,[R10, #+0]
   \       0x1C   0xE1B0'1181        LSLS     R1,R1,#+3
   \       0x20   0xE7D0'1001        LDRB     R1,[R0, +R1]
   \       0x24   0xE5CD'1000        STRB     R1,[SP, #+0]
     76              uint8_t height = font_param[font_sel].height;
   \       0x28   0xE5DA'1000        LDRB     R1,[R10, #+0]
   \       0x2C   0xE1B0'1181        LSLS     R1,R1,#+3
   \       0x30   0xE090'1001        ADDS     R1,R0,R1
   \       0x34   0xE5D1'1001        LDRB     R1,[R1, #+1]
   \       0x38   0xE5CD'1001        STRB     R1,[SP, #+1]
     77          	const uint8_t* pfont = font_param[font_sel].pfont;
   \       0x3C   0xE5DA'1000        LDRB     R1,[R10, #+0]
   \       0x40   0xE1B0'1181        LSLS     R1,R1,#+3
   \       0x44   0xE090'0001        ADDS     R0,R0,R1
   \       0x48   0xE590'B004        LDR      R11,[R0, #+4]
     78          
     79          	assert((c >= 0x20) && (c <= 0x7F));
   \       0x4C   0xE5DD'0008        LDRB     R0,[SP, #+8]
   \       0x50   0xE350'0020        CMP      R0,#+32
   \       0x54   0xBA00'0002        BLT      ??lcd_draw_char_1
   \       0x58   0xE5DD'0008        LDRB     R0,[SP, #+8]
   \       0x5C   0xE350'0080        CMP      R0,#+128
   \       0x60   0xBA00'0004        BLT      ??lcd_draw_char_2
   \                     ??lcd_draw_char_1:
   \       0x64   0xE3A0'204F        MOV      R2,#+79
   \       0x68   0x....'....        LDR      R1,??DataTable3_2
   \       0x6C   0x....'....        LDR      R0,??DataTable3_3
   \       0x70   0x....'....        BL       __aeabi_assert
   \       0x74   0x....'....        BL       __iar_EmptyStepPoint
     80          
     81              switch (font_sel)
   \                     ??lcd_draw_char_2:
   \       0x78   0xE5DA'0000        LDRB     R0,[R10, #+0]
   \       0x7C   0xE350'0003        CMP      R0,#+3
   \       0x80   0x8A00'0089        BHI      ??lcd_draw_char_3
   \       0x84   0xE7DF'1000        LDRB     R1,[PC, R0]
   \       0x88   0xE08F'F101        ADD      PC,PC,R1, LSL #+2
   \                     ??lcd_draw_char_0:
   \       0x8C   0x00 0x3B          DC8      0x0,0x3B,0x5E,0x5E

   \              0x5E 0x5E
     82              {
     83                case FONT10x14:
     84                  for (col=0 ; col < width ; col++ ) {
   \                     ??lcd_draw_char_4:
   \       0x90   0xE3A0'0000        MOV      R0,#+0
   \       0x94   0xE1B0'8000        MOVS     R8,R0
   \                     ??lcd_draw_char_5:
   \       0x98   0xE5DD'0000        LDRB     R0,[SP, #+0]
   \       0x9C   0xE158'0000        CMP      R8,R0
   \       0xA0   0x2A00'0034        BCS      ??lcd_draw_char_6
     85                    for (row=0 ; row<8 ; row++ ) {
   \       0xA4   0xE3A0'A000        MOV      R10,#+0
   \                     ??lcd_draw_char_7:
   \       0xA8   0xE35A'0008        CMP      R10,#+8
   \       0xAC   0x2A00'0015        BCS      ??lcd_draw_char_8
     86                      Ch = (pfont[((c - 0x20) * 20) + col * 2] >> (7 - row)) & 0x1;
   \       0xB0   0xE5DD'0008        LDRB     R0,[SP, #+8]
   \       0xB4   0xE3A0'1014        MOV      R1,#+20
   \       0xB8   0xE3A0'2002        MOV      R2,#+2
   \       0xBC   0xE013'0892        MULS     R3,R2,R8
   \       0xC0   0xE020'3091        MLA      R0,R1,R0,R3
   \       0xC4   0xE09B'0000        ADDS     R0,R11,R0
   \       0xC8   0xE550'0280        LDRB     R0,[R0, #-640]
   \       0xCC   0xE1B0'100A        MOVS     R1,R10
   \       0xD0   0xE271'1007        RSBS     R1,R1,#+7
   \       0xD4   0xE1B0'0150        ASRS     R0,R0,R1
   \       0xD8   0xE210'0001        ANDS     R0,R0,#0x1
   \       0xDC   0xE1B0'9000        MOVS     R9,R0
     87                      if (Ch) lcd_draw_pixel( x+col, y+row, color) ;
   \       0xE0   0xE1B0'0009        MOVS     R0,R9
   \       0xE4   0xE210'00FF        ANDS     R0,R0,#0xFF      ;; Zero extend
   \       0xE8   0xE350'0000        CMP      R0,#+0
   \       0xEC   0x0A00'0003        BEQ      ??lcd_draw_char_9
   \       0xF0   0xE1B0'2006        MOVS     R2,R6
   \       0xF4   0xE09A'1005        ADDS     R1,R10,R5
   \       0xF8   0xE098'0004        ADDS     R0,R8,R4
   \       0xFC   0x....'....        BL       lcd_draw_pixel
     88                    }
   \                     ??lcd_draw_char_9:
   \      0x100   0xE29A'A001        ADDS     R10,R10,#+1
   \      0x104   0xEAFF'FFE7        B        ??lcd_draw_char_7
     89                    for (row=0; row<6; row++ ) {
   \                     ??lcd_draw_char_8:
   \      0x108   0xE3A0'7000        MOV      R7,#+0
   \                     ??lcd_draw_char_10:
   \      0x10C   0xE357'0006        CMP      R7,#+6
   \      0x110   0x2A00'0016        BCS      ??lcd_draw_char_11
     90                      Ch = (pfont[((c - 0x20) * 20) + col * 2 + 1] >> (7 - row)) & 0x1;
   \      0x114   0xE5DD'0008        LDRB     R0,[SP, #+8]
   \      0x118   0xE3A0'1014        MOV      R1,#+20
   \      0x11C   0xE3A0'2002        MOV      R2,#+2
   \      0x120   0xE013'0892        MULS     R3,R2,R8
   \      0x124   0xE020'3091        MLA      R0,R1,R0,R3
   \      0x128   0xE09B'0000        ADDS     R0,R11,R0
   \      0x12C   0xE550'027F        LDRB     R0,[R0, #-639]
   \      0x130   0xE1B0'1007        MOVS     R1,R7
   \      0x134   0xE271'1007        RSBS     R1,R1,#+7
   \      0x138   0xE1B0'0150        ASRS     R0,R0,R1
   \      0x13C   0xE210'0001        ANDS     R0,R0,#0x1
   \      0x140   0xE1B0'9000        MOVS     R9,R0
     91                      if (Ch) lcd_draw_pixel( x+col, y+row+8, color) ;
   \      0x144   0xE1B0'0009        MOVS     R0,R9
   \      0x148   0xE210'00FF        ANDS     R0,R0,#0xFF      ;; Zero extend
   \      0x14C   0xE350'0000        CMP      R0,#+0
   \      0x150   0x0A00'0004        BEQ      ??lcd_draw_char_12
   \      0x154   0xE1B0'2006        MOVS     R2,R6
   \      0x158   0xE097'0005        ADDS     R0,R7,R5
   \      0x15C   0xE290'1008        ADDS     R1,R0,#+8
   \      0x160   0xE098'0004        ADDS     R0,R8,R4
   \      0x164   0x....'....        BL       lcd_draw_pixel
     92                    }
   \                     ??lcd_draw_char_12:
   \      0x168   0xE297'7001        ADDS     R7,R7,#+1
   \      0x16C   0xEAFF'FFE6        B        ??lcd_draw_char_10
     93                  }
   \                     ??lcd_draw_char_11:
   \      0x170   0xE298'8001        ADDS     R8,R8,#+1
   \      0x174   0xEAFF'FFC7        B        ??lcd_draw_char_5
     94                  break;
   \                     ??lcd_draw_char_6:
   \      0x178   0xEA00'004B        B        ??lcd_draw_char_3
     95          
     96                 case FONT10x8:
     97                  for (col=0 ; col < width ; col++ ) {
   \                     ??lcd_draw_char_13:
   \      0x17C   0xE3A0'A000        MOV      R10,#+0
   \      0x180   0xE1B0'800A        MOVS     R8,R10
   \                     ??lcd_draw_char_14:
   \      0x184   0xE5DD'0000        LDRB     R0,[SP, #+0]
   \      0x188   0xE158'0000        CMP      R8,R0
   \      0x18C   0x2A00'001C        BCS      ??lcd_draw_char_15
     98                    Ch = pfont[((c-0x20)*width)+ col];
   \      0x190   0xE5DD'0008        LDRB     R0,[SP, #+8]
   \      0x194   0xE250'0020        SUBS     R0,R0,#+32
   \      0x198   0xE5DD'1000        LDRB     R1,[SP, #+0]
   \      0x19C   0xE020'8091        MLA      R0,R1,R0,R8
   \      0x1A0   0xE7DB'0000        LDRB     R0,[R11, +R0]
   \      0x1A4   0xE1B0'9000        MOVS     R9,R0
     99          		  if (Ch) {
   \      0x1A8   0xE1B0'0009        MOVS     R0,R9
   \      0x1AC   0xE210'00FF        ANDS     R0,R0,#0xFF      ;; Zero extend
   \      0x1B0   0xE350'0000        CMP      R0,#+0
   \      0x1B4   0x0A00'0010        BEQ      ??lcd_draw_char_16
    100                      for (row=0 ; row < height; row++ ) {
   \      0x1B8   0xE1B0'700A        MOVS     R7,R10
   \                     ??lcd_draw_char_17:
   \      0x1BC   0xE5DD'0001        LDRB     R0,[SP, #+1]
   \      0x1C0   0xE157'0000        CMP      R7,R0
   \      0x1C4   0x2A00'000C        BCS      ??lcd_draw_char_16
    101                        if ((Ch>>row)&0x1) {
   \      0x1C8   0xE1B0'0009        MOVS     R0,R9
   \      0x1CC   0xE210'00FF        ANDS     R0,R0,#0xFF      ;; Zero extend
   \      0x1D0   0xE3A0'1001        MOV      R1,#+1
   \      0x1D4   0xE111'0750        TST      R1,R0, ASR R7
   \      0x1D8   0x0A00'0005        BEQ      ??lcd_draw_char_18
    102                            lcd_draw_pixel( x+(height-row), y+col, color) ;
   \      0x1DC   0xE1B0'2006        MOVS     R2,R6
   \      0x1E0   0xE098'1005        ADDS     R1,R8,R5
   \      0x1E4   0xE5DD'0001        LDRB     R0,[SP, #+1]
   \      0x1E8   0xE090'0004        ADDS     R0,R0,R4
   \      0x1EC   0xE050'0007        SUBS     R0,R0,R7
   \      0x1F0   0x....'....        BL       lcd_draw_pixel
    103                        }
    104                      }
   \                     ??lcd_draw_char_18:
   \      0x1F4   0xE297'7001        ADDS     R7,R7,#+1
   \      0x1F8   0xEAFF'FFEF        B        ??lcd_draw_char_17
    105                    }
    106                  }
   \                     ??lcd_draw_char_16:
   \      0x1FC   0xE298'8001        ADDS     R8,R8,#+1
   \      0x200   0xEAFF'FFDF        B        ??lcd_draw_char_14
    107                  break;
   \                     ??lcd_draw_char_15:
   \      0x204   0xEA00'0028        B        ??lcd_draw_char_3
    108          
    109                case FONT8x8:
    110                case FONT6x8:
    111                  for (col=0 ; col < width ; col++ ) {
   \                     ??lcd_draw_char_19:
   \      0x208   0xE3A0'0000        MOV      R0,#+0
   \      0x20C   0xE1B0'8000        MOVS     R8,R0
   \                     ??lcd_draw_char_20:
   \      0x210   0xE5DD'0000        LDRB     R0,[SP, #+0]
   \      0x214   0xE158'0000        CMP      R8,R0
   \      0x218   0x2A00'0023        BCS      ??lcd_draw_char_21
    112                    Ch = pfont[((c-0x20)*width)+ col];
   \      0x21C   0xE5DD'0008        LDRB     R0,[SP, #+8]
   \      0x220   0xE250'0020        SUBS     R0,R0,#+32
   \      0x224   0xE5DD'1000        LDRB     R1,[SP, #+0]
   \      0x228   0xE020'8091        MLA      R0,R1,R0,R8
   \      0x22C   0xE7DB'0000        LDRB     R0,[R11, +R0]
   \      0x230   0xE1B0'9000        MOVS     R9,R0
    113                    if (Ch) {
   \      0x234   0xE1B0'0009        MOVS     R0,R9
   \      0x238   0xE210'00FF        ANDS     R0,R0,#0xFF      ;; Zero extend
   \      0x23C   0xE350'0000        CMP      R0,#+0
   \      0x240   0x0A00'0017        BEQ      ??lcd_draw_char_22
    114                      for (row=0 ; row < height; row++ ) {
   \      0x244   0xE3A0'0000        MOV      R0,#+0
   \      0x248   0xE1B0'7000        MOVS     R7,R0
   \                     ??lcd_draw_char_23:
   \      0x24C   0xE5DD'0001        LDRB     R0,[SP, #+1]
   \      0x250   0xE157'0000        CMP      R7,R0
   \      0x254   0x2A00'0012        BCS      ??lcd_draw_char_22
    115                        if ((Ch>>row)&0x1)  {
   \      0x258   0xE1B0'0009        MOVS     R0,R9
   \      0x25C   0xE210'00FF        ANDS     R0,R0,#0xFF      ;; Zero extend
   \      0x260   0xE3A0'1001        MOV      R1,#+1
   \      0x264   0xE111'0750        TST      R1,R0, ASR R7
   \      0x268   0x0A00'000B        BEQ      ??lcd_draw_char_24
    116                          if (font_sel == FONT8x8)
   \      0x26C   0xE5DA'0000        LDRB     R0,[R10, #+0]
   \      0x270   0xE350'0002        CMP      R0,#+2
   \      0x274   0x1A00'0004        BNE      ??lcd_draw_char_25
    117                            lcd_draw_pixel( x+row, y+col, color) ;
   \      0x278   0xE1B0'2006        MOVS     R2,R6
   \      0x27C   0xE098'1005        ADDS     R1,R8,R5
   \      0x280   0xE097'0004        ADDS     R0,R7,R4
   \      0x284   0x....'....        BL       lcd_draw_pixel
   \      0x288   0xEA00'0003        B        ??lcd_draw_char_24
    118                          else
    119                            lcd_draw_pixel( x+col, y+row, color) ;
   \                     ??lcd_draw_char_25:
   \      0x28C   0xE1B0'2006        MOVS     R2,R6
   \      0x290   0xE097'1005        ADDS     R1,R7,R5
   \      0x294   0xE098'0004        ADDS     R0,R8,R4
   \      0x298   0x....'....        BL       lcd_draw_pixel
    120                        }
    121                      }
   \                     ??lcd_draw_char_24:
   \      0x29C   0xE297'7001        ADDS     R7,R7,#+1
   \      0x2A0   0xEAFF'FFE9        B        ??lcd_draw_char_23
    122                    }
    123                  }
   \                     ??lcd_draw_char_22:
   \      0x2A4   0xE298'8001        ADDS     R8,R8,#+1
   \      0x2A8   0xEAFF'FFD8        B        ??lcd_draw_char_20
    124                  break;
    125              }
    126          }
   \                     ??lcd_draw_char_21:
   \                     ??lcd_draw_char_3:
   \      0x2AC   0xE8BD'8FF7        POP      {R0-R2,R4-R11,PC}  ;; return
    127          
    128          /**
    129           * \brief Draws an ASCII character on LCD with given background color.
    130           *
    131           * \param x          X-coordinate of character upper-left corner.
    132           * \param y          Y-coordinate of character upper-left corner.
    133           * \param c          Character to output.
    134           * \param fontColor  Character color.
    135           * \param bgColor    Background color.
    136           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    137          void lcd_draw_char_with_bgcolor(uint32_t x, uint32_t y, uint8_t c, uint32_t fontColor,
    138          			 uint32_t bgColor)
    139          {
   \                     lcd_draw_char_with_bgcolor:
   \        0x0   0xE92D'4FF7        PUSH     {R0-R2,R4-R11,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
   \        0x8   0xE1B0'5001        MOVS     R5,R1
   \        0xC   0xE1B0'6003        MOVS     R6,R3
   \       0x10   0xE59D'7030        LDR      R7,[SP, #+48]
    140          	uint32_t row, col;
    141          	uint8_t Ch;
    142          	uint8_t width = font_param[font_sel].width ;
   \       0x14   0x....'....        LDR      R11,??DataTable3
   \       0x18   0x....'....        LDR      R0,??DataTable3_1
   \       0x1C   0xE5DB'1000        LDRB     R1,[R11, #+0]
   \       0x20   0xE1B0'1181        LSLS     R1,R1,#+3
   \       0x24   0xE7D0'1001        LDRB     R1,[R0, +R1]
   \       0x28   0xE5CD'1000        STRB     R1,[SP, #+0]
    143              uint8_t height = font_param[font_sel].height;
   \       0x2C   0xE5DB'1000        LDRB     R1,[R11, #+0]
   \       0x30   0xE1B0'1181        LSLS     R1,R1,#+3
   \       0x34   0xE090'1001        ADDS     R1,R0,R1
   \       0x38   0xE5D1'1001        LDRB     R1,[R1, #+1]
   \       0x3C   0xE5CD'1001        STRB     R1,[SP, #+1]
    144          	const uint8_t* pfont = font_param[font_sel].pfont;
   \       0x40   0xE5DB'1000        LDRB     R1,[R11, #+0]
   \       0x44   0xE1B0'1181        LSLS     R1,R1,#+3
   \       0x48   0xE090'0001        ADDS     R0,R0,R1
   \       0x4C   0xE590'0004        LDR      R0,[R0, #+4]
   \       0x50   0xE58D'0004        STR      R0,[SP, #+4]
    145          
    146          	assert((c >= 0x20) && (c <= 0x7F));
   \       0x54   0xE5DD'0008        LDRB     R0,[SP, #+8]
   \       0x58   0xE350'0020        CMP      R0,#+32
   \       0x5C   0xBA00'0002        BLT      ??lcd_draw_char_with_bgcolor_1
   \       0x60   0xE5DD'0008        LDRB     R0,[SP, #+8]
   \       0x64   0xE350'0080        CMP      R0,#+128
   \       0x68   0xBA00'0004        BLT      ??lcd_draw_char_with_bgcolor_2
   \                     ??lcd_draw_char_with_bgcolor_1:
   \       0x6C   0xE3A0'2092        MOV      R2,#+146
   \       0x70   0x....'....        LDR      R1,??DataTable3_2
   \       0x74   0x....'....        LDR      R0,??DataTable3_3
   \       0x78   0x....'....        BL       __aeabi_assert
   \       0x7C   0x....'....        BL       __iar_EmptyStepPoint
    147          
    148              switch (font_sel)
   \                     ??lcd_draw_char_with_bgcolor_2:
   \       0x80   0xE5DB'0000        LDRB     R0,[R11, #+0]
   \       0x84   0xE350'0003        CMP      R0,#+3
   \       0x88   0x8A00'00AC        BHI      ??lcd_draw_char_with_bgcolor_3
   \       0x8C   0xE7DF'1000        LDRB     R1,[PC, R0]
   \       0x90   0xE08F'F101        ADD      PC,PC,R1, LSL #+2
   \                     ??lcd_draw_char_with_bgcolor_0:
   \       0x94   0x00 0x48          DC8      0x0,0x48,0x73,0x73

   \              0x73 0x73
    149              {
    150                case FONT10x14:
    151                  for (col=0 ; col < width ; col++ ) {
   \                     ??lcd_draw_char_with_bgcolor_4:
   \       0x98   0xE3A0'0000        MOV      R0,#+0
   \       0x9C   0xE1B0'A000        MOVS     R10,R0
   \                     ??lcd_draw_char_with_bgcolor_5:
   \       0xA0   0xE5DD'0000        LDRB     R0,[SP, #+0]
   \       0xA4   0xE15A'0000        CMP      R10,R0
   \       0xA8   0x2A00'0041        BCS      ??lcd_draw_char_with_bgcolor_6
    152                    for (row=0 ; row<8 ; row++ ) {
   \       0xAC   0xE3A0'B000        MOV      R11,#+0
   \                     ??lcd_draw_char_with_bgcolor_7:
   \       0xB0   0xE35B'0008        CMP      R11,#+8
   \       0xB4   0x2A00'001B        BCS      ??lcd_draw_char_with_bgcolor_8
    153                      Ch = (pfont[((c - 0x20) * 20) + col * 2] >> (7 - row)) & 0x1;
   \       0xB8   0xE59D'0004        LDR      R0,[SP, #+4]
   \       0xBC   0xE5DD'1008        LDRB     R1,[SP, #+8]
   \       0xC0   0xE3A0'2014        MOV      R2,#+20
   \       0xC4   0xE3A0'3002        MOV      R3,#+2
   \       0xC8   0xE01C'0A93        MULS     R12,R3,R10
   \       0xCC   0xE021'C192        MLA      R1,R2,R1,R12
   \       0xD0   0xE090'0001        ADDS     R0,R0,R1
   \       0xD4   0xE550'0280        LDRB     R0,[R0, #-640]
   \       0xD8   0xE1B0'100B        MOVS     R1,R11
   \       0xDC   0xE271'1007        RSBS     R1,R1,#+7
   \       0xE0   0xE1B0'0150        ASRS     R0,R0,R1
   \       0xE4   0xE210'0001        ANDS     R0,R0,#0x1
   \       0xE8   0xE1B0'8000        MOVS     R8,R0
    154                      if (Ch) lcd_draw_pixel( x+col, y+row, fontColor) ;
   \       0xEC   0xE1B0'0008        MOVS     R0,R8
   \       0xF0   0xE210'00FF        ANDS     R0,R0,#0xFF      ;; Zero extend
   \       0xF4   0xE350'0000        CMP      R0,#+0
   \       0xF8   0x0A00'0004        BEQ      ??lcd_draw_char_with_bgcolor_9
   \       0xFC   0xE1B0'2006        MOVS     R2,R6
   \      0x100   0xE09B'1005        ADDS     R1,R11,R5
   \      0x104   0xE09A'0004        ADDS     R0,R10,R4
   \      0x108   0x....'....        BL       lcd_draw_pixel
   \      0x10C   0xEA00'0003        B        ??lcd_draw_char_with_bgcolor_10
    155          			else lcd_draw_pixel( x+col, y+row, bgColor) ;
   \                     ??lcd_draw_char_with_bgcolor_9:
   \      0x110   0xE1B0'2007        MOVS     R2,R7
   \      0x114   0xE09B'1005        ADDS     R1,R11,R5
   \      0x118   0xE09A'0004        ADDS     R0,R10,R4
   \      0x11C   0x....'....        BL       lcd_draw_pixel
    156                    }
   \                     ??lcd_draw_char_with_bgcolor_10:
   \      0x120   0xE29B'B001        ADDS     R11,R11,#+1
   \      0x124   0xEAFF'FFE1        B        ??lcd_draw_char_with_bgcolor_7
    157                    for (row=0; row<6; row++ ) {
   \                     ??lcd_draw_char_with_bgcolor_8:
   \      0x128   0xE3A0'9000        MOV      R9,#+0
   \                     ??lcd_draw_char_with_bgcolor_11:
   \      0x12C   0xE359'0006        CMP      R9,#+6
   \      0x130   0x2A00'001D        BCS      ??lcd_draw_char_with_bgcolor_12
    158                      Ch = (pfont[((c - 0x20) * 20) + col * 2 + 1] >> (7 - row)) & 0x1;
   \      0x134   0xE59D'0004        LDR      R0,[SP, #+4]
   \      0x138   0xE5DD'1008        LDRB     R1,[SP, #+8]
   \      0x13C   0xE3A0'2014        MOV      R2,#+20
   \      0x140   0xE3A0'3002        MOV      R3,#+2
   \      0x144   0xE01C'0A93        MULS     R12,R3,R10
   \      0x148   0xE021'C192        MLA      R1,R2,R1,R12
   \      0x14C   0xE090'0001        ADDS     R0,R0,R1
   \      0x150   0xE550'027F        LDRB     R0,[R0, #-639]
   \      0x154   0xE1B0'1009        MOVS     R1,R9
   \      0x158   0xE271'1007        RSBS     R1,R1,#+7
   \      0x15C   0xE1B0'0150        ASRS     R0,R0,R1
   \      0x160   0xE210'0001        ANDS     R0,R0,#0x1
   \      0x164   0xE1B0'8000        MOVS     R8,R0
    159                      if (Ch) lcd_draw_pixel( x+col, y+row+8, fontColor) ;
   \      0x168   0xE1B0'0008        MOVS     R0,R8
   \      0x16C   0xE210'00FF        ANDS     R0,R0,#0xFF      ;; Zero extend
   \      0x170   0xE350'0000        CMP      R0,#+0
   \      0x174   0x0A00'0005        BEQ      ??lcd_draw_char_with_bgcolor_13
   \      0x178   0xE1B0'2006        MOVS     R2,R6
   \      0x17C   0xE099'0005        ADDS     R0,R9,R5
   \      0x180   0xE290'1008        ADDS     R1,R0,#+8
   \      0x184   0xE09A'0004        ADDS     R0,R10,R4
   \      0x188   0x....'....        BL       lcd_draw_pixel
   \      0x18C   0xEA00'0004        B        ??lcd_draw_char_with_bgcolor_14
    160          			else lcd_draw_pixel( x+col, y+row+8, bgColor) ;
   \                     ??lcd_draw_char_with_bgcolor_13:
   \      0x190   0xE1B0'2007        MOVS     R2,R7
   \      0x194   0xE099'0005        ADDS     R0,R9,R5
   \      0x198   0xE290'1008        ADDS     R1,R0,#+8
   \      0x19C   0xE09A'0004        ADDS     R0,R10,R4
   \      0x1A0   0x....'....        BL       lcd_draw_pixel
    161                    }
   \                     ??lcd_draw_char_with_bgcolor_14:
   \      0x1A4   0xE299'9001        ADDS     R9,R9,#+1
   \      0x1A8   0xEAFF'FFDF        B        ??lcd_draw_char_with_bgcolor_11
    162                  }
   \                     ??lcd_draw_char_with_bgcolor_12:
   \      0x1AC   0xE29A'A001        ADDS     R10,R10,#+1
   \      0x1B0   0xEAFF'FFBA        B        ??lcd_draw_char_with_bgcolor_5
    163                  break;
   \                     ??lcd_draw_char_with_bgcolor_6:
   \      0x1B4   0xEA00'0061        B        ??lcd_draw_char_with_bgcolor_3
    164          
    165                 case FONT10x8:
    166                  for (col=0 ; col < width ; col++ ) {
   \                     ??lcd_draw_char_with_bgcolor_15:
   \      0x1B8   0xE3A0'B000        MOV      R11,#+0
   \      0x1BC   0xE1B0'A00B        MOVS     R10,R11
   \                     ??lcd_draw_char_with_bgcolor_16:
   \      0x1C0   0xE5DD'0000        LDRB     R0,[SP, #+0]
   \      0x1C4   0xE15A'0000        CMP      R10,R0
   \      0x1C8   0x2A00'0024        BCS      ??lcd_draw_char_with_bgcolor_17
    167                    Ch = pfont[((c-0x20)*width)+ col];
   \      0x1CC   0xE59D'0004        LDR      R0,[SP, #+4]
   \      0x1D0   0xE5DD'1008        LDRB     R1,[SP, #+8]
   \      0x1D4   0xE251'1020        SUBS     R1,R1,#+32
   \      0x1D8   0xE5DD'2000        LDRB     R2,[SP, #+0]
   \      0x1DC   0xE021'A192        MLA      R1,R2,R1,R10
   \      0x1E0   0xE7D0'0001        LDRB     R0,[R0, +R1]
   \      0x1E4   0xE1B0'8000        MOVS     R8,R0
    168          		  if (Ch) {
   \      0x1E8   0xE1B0'0008        MOVS     R0,R8
   \      0x1EC   0xE210'00FF        ANDS     R0,R0,#0xFF      ;; Zero extend
   \      0x1F0   0xE350'0000        CMP      R0,#+0
   \      0x1F4   0x0A00'0017        BEQ      ??lcd_draw_char_with_bgcolor_18
    169                      for (row=0 ; row < height; row++ ) {
   \      0x1F8   0xE1B0'900B        MOVS     R9,R11
   \                     ??lcd_draw_char_with_bgcolor_19:
   \      0x1FC   0xE5DD'0001        LDRB     R0,[SP, #+1]
   \      0x200   0xE159'0000        CMP      R9,R0
   \      0x204   0x2A00'0013        BCS      ??lcd_draw_char_with_bgcolor_18
    170                        if ((Ch>>row)&0x1) {
   \      0x208   0xE1B0'0008        MOVS     R0,R8
   \      0x20C   0xE210'00FF        ANDS     R0,R0,#0xFF      ;; Zero extend
   \      0x210   0xE3A0'1001        MOV      R1,#+1
   \      0x214   0xE111'0950        TST      R1,R0, ASR R9
   \      0x218   0x0A00'0006        BEQ      ??lcd_draw_char_with_bgcolor_20
    171                            lcd_draw_pixel( x+(height-row), y+col, fontColor) ;
   \      0x21C   0xE1B0'2006        MOVS     R2,R6
   \      0x220   0xE09A'1005        ADDS     R1,R10,R5
   \      0x224   0xE5DD'0001        LDRB     R0,[SP, #+1]
   \      0x228   0xE090'0004        ADDS     R0,R0,R4
   \      0x22C   0xE050'0009        SUBS     R0,R0,R9
   \      0x230   0x....'....        BL       lcd_draw_pixel
   \      0x234   0xEA00'0005        B        ??lcd_draw_char_with_bgcolor_21
    172          			  }
    173          			  else {
    174          				  lcd_draw_pixel( x+(height-row), y+col, bgColor) ;
   \                     ??lcd_draw_char_with_bgcolor_20:
   \      0x238   0xE1B0'2007        MOVS     R2,R7
   \      0x23C   0xE09A'1005        ADDS     R1,R10,R5
   \      0x240   0xE5DD'0001        LDRB     R0,[SP, #+1]
   \      0x244   0xE090'0004        ADDS     R0,R0,R4
   \      0x248   0xE050'0009        SUBS     R0,R0,R9
   \      0x24C   0x....'....        BL       lcd_draw_pixel
    175          			  }
    176                      }
   \                     ??lcd_draw_char_with_bgcolor_21:
   \      0x250   0xE299'9001        ADDS     R9,R9,#+1
   \      0x254   0xEAFF'FFE8        B        ??lcd_draw_char_with_bgcolor_19
    177                    }
    178                  }
   \                     ??lcd_draw_char_with_bgcolor_18:
   \      0x258   0xE29A'A001        ADDS     R10,R10,#+1
   \      0x25C   0xEAFF'FFD7        B        ??lcd_draw_char_with_bgcolor_16
    179                  break;
   \                     ??lcd_draw_char_with_bgcolor_17:
   \      0x260   0xEA00'0036        B        ??lcd_draw_char_with_bgcolor_3
    180          
    181                case FONT8x8:
    182                case FONT6x8:
    183                  for (col=0 ; col < width ; col++ ) {
   \                     ??lcd_draw_char_with_bgcolor_22:
   \      0x264   0xE3A0'0000        MOV      R0,#+0
   \      0x268   0xE1B0'A000        MOVS     R10,R0
   \                     ??lcd_draw_char_with_bgcolor_23:
   \      0x26C   0xE5DD'0000        LDRB     R0,[SP, #+0]
   \      0x270   0xE15A'0000        CMP      R10,R0
   \      0x274   0x2A00'0031        BCS      ??lcd_draw_char_with_bgcolor_24
    184                    Ch = pfont[((c-0x20)*width)+ col];
   \      0x278   0xE59D'0004        LDR      R0,[SP, #+4]
   \      0x27C   0xE5DD'1008        LDRB     R1,[SP, #+8]
   \      0x280   0xE251'1020        SUBS     R1,R1,#+32
   \      0x284   0xE5DD'2000        LDRB     R2,[SP, #+0]
   \      0x288   0xE021'A192        MLA      R1,R2,R1,R10
   \      0x28C   0xE7D0'0001        LDRB     R0,[R0, +R1]
   \      0x290   0xE1B0'8000        MOVS     R8,R0
    185                    if (Ch) {
   \      0x294   0xE1B0'0008        MOVS     R0,R8
   \      0x298   0xE210'00FF        ANDS     R0,R0,#0xFF      ;; Zero extend
   \      0x29C   0xE350'0000        CMP      R0,#+0
   \      0x2A0   0x0A00'0024        BEQ      ??lcd_draw_char_with_bgcolor_25
    186                      for (row=0 ; row < height; row++ ) {
   \      0x2A4   0xE3A0'0000        MOV      R0,#+0
   \      0x2A8   0xE1B0'9000        MOVS     R9,R0
   \                     ??lcd_draw_char_with_bgcolor_26:
   \      0x2AC   0xE5DD'0001        LDRB     R0,[SP, #+1]
   \      0x2B0   0xE159'0000        CMP      R9,R0
   \      0x2B4   0x2A00'001F        BCS      ??lcd_draw_char_with_bgcolor_25
    187                        if ((Ch>>row)&0x1)  {
   \      0x2B8   0xE1B0'0008        MOVS     R0,R8
   \      0x2BC   0xE210'00FF        ANDS     R0,R0,#0xFF      ;; Zero extend
   \      0x2C0   0xE3A0'1001        MOV      R1,#+1
   \      0x2C4   0xE111'0950        TST      R1,R0, ASR R9
   \      0x2C8   0x0A00'000C        BEQ      ??lcd_draw_char_with_bgcolor_27
    188                          if (font_sel == FONT8x8)
   \      0x2CC   0xE5DB'0000        LDRB     R0,[R11, #+0]
   \      0x2D0   0xE350'0002        CMP      R0,#+2
   \      0x2D4   0x1A00'0004        BNE      ??lcd_draw_char_with_bgcolor_28
    189                            lcd_draw_pixel( x+row, y+col, fontColor) ;
   \      0x2D8   0xE1B0'2006        MOVS     R2,R6
   \      0x2DC   0xE09A'1005        ADDS     R1,R10,R5
   \      0x2E0   0xE099'0004        ADDS     R0,R9,R4
   \      0x2E4   0x....'....        BL       lcd_draw_pixel
   \      0x2E8   0xEA00'0010        B        ??lcd_draw_char_with_bgcolor_29
    190                          else
    191                            lcd_draw_pixel( x+col, y+row, fontColor) ;
   \                     ??lcd_draw_char_with_bgcolor_28:
   \      0x2EC   0xE1B0'2006        MOVS     R2,R6
   \      0x2F0   0xE099'1005        ADDS     R1,R9,R5
   \      0x2F4   0xE09A'0004        ADDS     R0,R10,R4
   \      0x2F8   0x....'....        BL       lcd_draw_pixel
   \      0x2FC   0xEA00'000B        B        ??lcd_draw_char_with_bgcolor_29
    192                        }
    193          			  else {
    194          				  if (font_sel == FONT8x8)
   \                     ??lcd_draw_char_with_bgcolor_27:
   \      0x300   0xE5DB'0000        LDRB     R0,[R11, #+0]
   \      0x304   0xE350'0002        CMP      R0,#+2
   \      0x308   0x1A00'0004        BNE      ??lcd_draw_char_with_bgcolor_30
    195                            lcd_draw_pixel( x+row, y+col, bgColor) ;
   \      0x30C   0xE1B0'2007        MOVS     R2,R7
   \      0x310   0xE09A'1005        ADDS     R1,R10,R5
   \      0x314   0xE099'0004        ADDS     R0,R9,R4
   \      0x318   0x....'....        BL       lcd_draw_pixel
   \      0x31C   0xEA00'0003        B        ??lcd_draw_char_with_bgcolor_29
    196                          else
    197                            lcd_draw_pixel( x+col, y+row, bgColor) ;
   \                     ??lcd_draw_char_with_bgcolor_30:
   \      0x320   0xE1B0'2007        MOVS     R2,R7
   \      0x324   0xE099'1005        ADDS     R1,R9,R5
   \      0x328   0xE09A'0004        ADDS     R0,R10,R4
   \      0x32C   0x....'....        BL       lcd_draw_pixel
    198          			  }
    199                      }
   \                     ??lcd_draw_char_with_bgcolor_29:
   \      0x330   0xE299'9001        ADDS     R9,R9,#+1
   \      0x334   0xEAFF'FFDC        B        ??lcd_draw_char_with_bgcolor_26
    200                    }
    201                  }
   \                     ??lcd_draw_char_with_bgcolor_25:
   \      0x338   0xE29A'A001        ADDS     R10,R10,#+1
   \      0x33C   0xEAFF'FFCA        B        ??lcd_draw_char_with_bgcolor_23
    202                  break;
    203              }
    204          }
   \                     ??lcd_draw_char_with_bgcolor_24:
   \                     ??lcd_draw_char_with_bgcolor_3:
   \      0x340   0xE8BD'8FF7        POP      {R0-R2,R4-R11,PC}  ;; return

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable3:
   \        0x0   0x....'....        DC32     font_sel

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable3_1:
   \        0x0   0x....'....        DC32     font_param

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable3_2:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable3_3:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x28 0x63          DC8 "(c >= 0x20) && (c <= 0x7F)"

   \              0x20 0x3E    

   \              0x3D 0x20    

   \              0x30 0x78    

   \              0x32 0x30    

   \              0x29 0x20    

   \              0x26 0x26    

   \              0x20 0x28    

   \              0x63 0x20    

   \              0x3C 0x3D    

   \              0x20 0x30    

   \              0x78 0x37    

   \              0x46 0x29    

   \              0x00
   \       0x1B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x43 0x3A          DC8 0x43, 0x3A, 0x5C, 0x77, 0x6F, 0x72, 0x6B, 0x5C

   \              0x5C 0x77    

   \              0x6F 0x72    

   \              0x6B 0x5C
   \        0x8   0x41 0x74          DC8 0x41, 0x74, 0x6D, 0x65, 0x6C, 0x53, 0x6F, 0x66

   \              0x6D 0x65    

   \              0x6C 0x53    

   \              0x6F 0x66
   \       0x10   0x74 0x50          DC8 0x74, 0x50, 0x41, 0x63, 0x6B, 0x5C, 0x61, 0x74

   \              0x41 0x63    

   \              0x6B 0x5C    

   \              0x61 0x74
   \       0x18   0x6D 0x65          DC8 0x6D, 0x65, 0x6C, 0x2D, 0x73, 0x6F, 0x66, 0x74

   \              0x6C 0x2D    

   \              0x73 0x6F    

   \              0x66 0x74
   \       0x20   0x77 0x61          DC8 0x77, 0x61, 0x72, 0x65, 0x2D, 0x70, 0x61, 0x63

   \              0x72 0x65    

   \              0x2D 0x70    

   \              0x61 0x63
   \       0x28   0x6B 0x61          DC8 0x6B, 0x61, 0x67, 0x65, 0x2D, 0x32, 0x2E, 0x31

   \              0x67 0x65    

   \              0x2D 0x32    

   \              0x2E 0x31
   \       0x30   0x37 0x5C          DC8 0x37, 0x5C, 0x65, 0x78, 0x61, 0x6D, 0x70, 0x6C

   \              0x65 0x78    

   \              0x61 0x6D    

   \              0x70 0x6C
   \       0x38   0x65 0x73          DC8 0x65, 0x73, 0x5C, 0x6C, 0x63, 0x64, 0x5C, 0x6C

   \              0x5C 0x6C    

   \              0x63 0x64    

   \              0x5C 0x6C
   \       0x40   0x63 0x64          DC8 0x63, 0x64, 0x5F, 0x66, 0x6F, 0x6E, 0x74, 0x2E

   \              0x5F 0x66    

   \              0x6F 0x6E    

   \              0x74 0x2E
   \       0x48   0x63 0x00          DC8 0x63, 0
   \       0x4A   0x00 0x00          DC8 0, 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      48   lcd_draw_char
        48   -> __aeabi_assert
        48   -> __iar_EmptyStepPoint
        48   -> lcd_draw_pixel
      48   lcd_draw_char_with_bgcolor
        48   -> __aeabi_assert
        48   -> __iar_EmptyStepPoint
        48   -> lcd_draw_pixel
       0   lcd_get_selected_font
       0   lcd_select_font


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
      28  ?_0
      76  ?_1
       1  font_sel
     688  lcd_draw_char
     836  lcd_draw_char_with_bgcolor
      12  lcd_get_selected_font
      28  lcd_select_font

 
     1 byte  in section .bss
   104 bytes in section .rodata
 1'580 bytes in section SOFTPACK
 
 1'580 bytes of CODE  memory
   104 bytes of CONST memory
     1 byte  of DATA  memory

Errors: none
Warnings: none
