###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.1.245/W32 for ARM         10/Dec/2020  08:15:47
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\peripherals\pit.c
#    Command line      =
#        -f C:\Users\c40450\AppData\Local\Temp\EWC762.tmp
#        (C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\peripherals\pit.c
#        -D "SOFTPACK_VERSION=\"2.17\"" -D TRACE_LEVEL=5 -D VARIANT_SRAM -D
#        CONFIG_ARCH_ARMV7A -D CONFIG_ARCH_ARM -D CONFIG_SOC_SAMA5D2 -D
#        CONFIG_CHIP_SAMA5D27 -D CONFIG_PACKAGE_289PIN -D
#        CONFIG_BOARD_SAMA5D2_XPLAINED -D CONFIG_HAVE_AIC5 -D
#        CONFIG_HAVE_FLEXCOM -D CONFIG_HAVE_PIO4 -D CONFIG_HAVE_PIO4_SECURE -D
#        CONFIG_HAVE_NFC -D CONFIG_HAVE_PIT -D CONFIG_HAVE_SMC -D
#        CONFIG_HAVE_SMC_SCRAMBLING -D CONFIG_HAVE_GMAC_QUEUES -D
#        CONFIG_HAVE_MPDDRC -D CONFIG_HAVE_MPDDRC_DATA_PATH -D
#        CONFIG_HAVE_MPDDRC_IO_CALIBRATION -D CONFIG_HAVE_MPDDRC_DDR2 -D
#        CONFIG_HAVE_MPDDRC_LPDDR2 -D CONFIG_HAVE_MPDDRC_DDR3 -D
#        CONFIG_HAVE_MPDDRC_LPDDR3 -D CONFIG_HAVE_ADC_SETTLING_TIME -D
#        CONFIG_HAVE_ADC_DIFF_INPUT -D CONFIG_HAVE_ADC_SEQ_R2 -D
#        CONFIG_HAVE_PMC_FAST_STARTUP -D CONFIG_HAVE_PMC_GENERATED_CLOCKS -D
#        CONFIG_HAVE_PMC_AUDIO_CLOCK -D CONFIG_HAVE_PMC_PLLADIV2 -D
#        CONFIG_HAVE_PMC_H32MXDIV -D CONFIG_HAVE_PMC_UPLL_BIAS -D
#        CONFIG_HAVE_SCKC -D CONFIG_HAVE_PWMC_DMA -D
#        CONFIG_HAVE_PWMC_SPREAD_SPECTRUM -D CONFIG_HAVE_PWMC_EXTERNAL_TRIGGER
#        -D CONFIG_HAVE_PWMC_FAULT_PROT_HIZ -D CONFIG_HAVE_PWMC_STEPPER_MOTOR
#        -D CONFIG_HAVE_PWMC_CMP_UNIT -D CONFIG_HAVE_PWMC_SYNC_MODE -D
#        CONFIG_HAVE_PWMC_OOV -D CONFIG_HAVE_PWMC_FMODE -D CONFIG_HAVE_PWMC_WP
#        -D CONFIG_HAVE_PWMC_DTIME -D CONFIG_HAVE_PWMC_ELINE -D
#        CONFIG_HAVE_SFRBU -D CONFIG_HAVE_L2CC -D CONFIG_HAVE_SAIC -D
#        CONFIG_HAVE_XDMAC -D CONFIG_HAVE_XDMAC_DATA_WIDTH_DWORD -D
#        CONFIG_HAVE_SECUMOD -D CONFIG_HAVE_SFC -D CONFIG_HAVE_PWMC -D
#        CONFIG_HAVE_SECURE_MATRIX -D CONFIG_HAVE_DDR3_MT41K128M16 -D
#        CONFIG_HAVE_RSTC_CONFIGURABLE_USER_RESET -D CONFIG_HAVE_TC_FAULT_MODE
#        -D CONFIG_HAVE_TC_DMA_MODE -D CONFIG_HAVE_RTC_CALIBRATION -D
#        CONFIG_HAVE_RTC_MODE_PERSIAN -D CONFIG_HAVE_RTC_MODE_UTC -D
#        CONFIG_HAVE_RTC_TAMPER -D CONFIG_HAVE_AUDIO -D CONFIG_HAVE_SSC -D
#        CONFIG_HAVE_CLASSD -D CONFIG_HAVE_PDMIC -D CONFIG_HAVE_AUDIO_AD1934 -D
#        CONFIG_HAVE_SHDWC -D CONFIG_HAVE_SPI -D CONFIG_HAVE_SPI_FIFO -D
#        CONFIG_HAVE_MMU -D CONFIG_HAVE_L1CACHE -D CONFIG_HAVE_L2CACHE -D
#        CONFIG_HAVE_SPI_BUS -D CONFIG_HAVE_UART -D CONFIG_HAVE_SERIALD_UART -D
#        CONFIG_HAVE_USART -D CONFIG_HAVE_USART_FIFO -D CONFIG_HAVE_I2C_BUS -D
#        CONFIG_HAVE_I2SC -D CONFIG_HAVE_AUDIO_WM8731 --preprocess
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\iis_dma_codec\build\sama5d2-xplained\sram\List
#        -lC
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\iis_dma_codec\build\sama5d2-xplained\sram\List
#        --diag_suppress Pa050 -o
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\iis_dma_codec\build\sama5d2-xplained\sram\Obj
#        --debug --endian=little --cpu=Cortex-A5 -e --fpu=VFPv4_D16
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\iis_dma_codec\..\..\arch\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\iis_dma_codec\..\..\utils\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\iis_dma_codec\..\..\target\common\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\iis_dma_codec\..\..\target\sama5d2\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\iis_dma_codec\..\..\drivers\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\iis_dma_codec\..\..\lib\
#        --section .text=SOFTPACK --cpu_mode arm -Oh)
#    Locale            =  C
#    List file         =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\iis_dma_codec\build\sama5d2-xplained\sram\List\pit.lst
#    Object file       =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\iis_dma_codec\build\sama5d2-xplained\sram\Obj\pit.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\peripherals\pit.c
      1          /* ----------------------------------------------------------------------------
      2           *         SAM Software Package License
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2015, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          /** \addtogroup pit_module Working with PIT
     31           * \section Purpose
     32           * The PIT driver provides the Interface for configuration the Periodic
     33           *  Interval Timer (PIT) peripheral.
     34           *
     35           * \section Usage
     36           * <ul>
     37           * <li>  Initialize the PIT with the desired period using pit_init().
     38           *    Alternatively, the Periodic Interval Value (PIV) can be configured
     39           *    manually using pit_set_piv(). </li>
     40           * <li>  Start the PIT counting using pit_enable().
     41           * <li>  Enable & disable the PIT interrupt using pit_enable_it() and
     42           *    pit_disable_it(). </li>
     43           * <li>  Retrieve the current status of the PIT using pit_get_status(). </li>
     44           * <li>  To get the current value of the internal counter and the number of ticks
     45           *    that have occurred, use either pit_get_pivr() or pit_get_piir() depending
     46           *    on whether you want the values to be cleared or not. </li>
     47           *
     48           * </ul>
     49           * For more accurate information, please look at the PIT section of the
     50           * Datasheet.
     51           *
     52           * Related files :\n
     53           * \ref pit.c\n
     54           * \ref pit.h.\n
     55          */
     56          /*@{*/
     57          /*@}*/
     58          
     59          /**
     60           * \file
     61           *
     62           * Implementation of PIT (Periodic Interval Timer) controller.
     63           *
     64           */
     65          /*------------------------------------------------------------------------------
     66           *         Headers
     67           *------------------------------------------------------------------------------*/
     68          
     69          #include "chip.h"
     70          #include "compiler.h"
     71          #include "peripherals/pit.h"
     72          #include "peripherals/pmc.h"
     73          #include "irq/irq.h"
     74          

   \                                 In section .bss, align 4
     75          volatile uint32_t   tickCounter = 0;
   \                     tickCounter:
   \        0x0                      DS8 4
     76          
     77          /*------------------------------------------------------------------------------
     78           *         Exported functions
     79           *------------------------------------------------------------------------------*/
     80          

   \                                 In section SOFTPACK, align 4, keep-with-next
     81          void pit_init(uint32_t period)
     82          {
   \                     pit_init:
   \        0x0   0xE92D'4010        PUSH     {R4,LR}
   \        0x4   0xE1A0'4000        MOV      R4,R0
     83          	uint32_t pit_frequency = pmc_get_peripheral_clock(ID_PIT) / 1000000;
   \        0x8   0xE3A0'0003        MOV      R0,#+3
   \        0xC   0x....'....        BL       pmc_get_peripheral_clock
   \       0x10   0x....'....        LDR      R2,??DataTable11  ;; 0x8637bd06
   \       0x14   0xE081'2290        UMULL    R2,R1,R0,R2
     84          	PIT->PIT_MR = period ? ROUND_INT_DIV(period * pit_frequency, 16) : 0;
   \       0x18   0xE354'0000        CMP      R4,#+0
   \       0x1C   0xE1A0'09A1        LSR      R0,R1,#+19
   \       0x20   0x0A00'0003        BEQ      ??pit_init_0
   \       0x24   0xE011'0490        MULS     R1,R0,R4
   \       0x28   0x1281'0008        ADDNE    R0,R1,#+8
   \       0x2C   0x11A0'0220        LSRNE    R0,R0,#+4
   \       0x30   0x1A00'0000        BNE      ??pit_init_1
   \                     ??pit_init_0:
   \       0x34   0xE3A0'0000        MOV      R0,#+0
   \                     ??pit_init_1:
   \       0x38   0x....'....        LDR      R1,??DataTable11_1  ;; 0xf8048030
   \       0x3C   0xE581'0000        STR      R0,[R1, #+0]
     85          	PIT->PIT_MR |= PIT_MR_PITEN;
   \       0x40   0xE591'0000        LDR      R0,[R1, #+0]
   \       0x44   0xE380'2740        ORR      R2,R0,#0x1000000
   \       0x48   0xE581'2000        STR      R2,[R1, #+0]
     86          }
   \       0x4C   0xE8BD'8010        POP      {R4,PC}          ;; return
     87          

   \                                 In section SOFTPACK, align 4, keep-with-next
     88          void pit_set_piv(uint32_t piv)
     89          {
     90          	uint32_t mr = PIT->PIT_MR & ~PIT_MR_PIV_Msk;
   \                     pit_set_piv:
   \        0x0   0x....'....        LDR      R1,??DataTable11_1  ;; 0xf8048030
     91          	PIT->PIT_MR = mr | PIT_MR_PIV(piv);
   \        0x4   0xE1A0'0600        LSL      R0,R0,#+12
   \        0x8   0xE591'2000        LDR      R2,[R1, #+0]
   \        0xC   0xE1A0'0620        LSR      R0,R0,#+12
   \       0x10   0xE1A0'2A22        LSR      R2,R2,#+20
   \       0x14   0xE180'0A02        ORR      R0,R0,R2, LSL #+20
   \       0x18   0xE581'0000        STR      R0,[R1, #+0]
     92          }
   \       0x1C   0xE12F'FF1E        BX       LR               ;; return
     93          

   \                                 In section SOFTPACK, align 4, keep-with-next
     94          void pit_enable(void)
     95          {
     96          	PIT->PIT_MR |= PIT_MR_PITEN;
   \                     pit_enable:
   \        0x0   0x....'....        LDR      R0,??DataTable11_1  ;; 0xf8048030
   \        0x4   0xE590'1000        LDR      R1,[R0, #+0]
   \        0x8   0xE381'2740        ORR      R2,R1,#0x1000000
   \        0xC   0x....'....        B        ?Subroutine0
     97          }

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ?Subroutine0:
   \        0x0   0xE580'2000        STR      R2,[R0, #+0]
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
     98          

   \                                 In section SOFTPACK, align 4, keep-with-next
     99          void pit_disable(void)
    100          {
    101          	PIT->PIT_MR &= ~PIT_MR_PITEN;
   \                     pit_disable:
   \        0x0   0x....'....        LDR      R0,??DataTable11_1  ;; 0xf8048030
   \        0x4   0xE590'1000        LDR      R1,[R0, #+0]
   \        0x8   0xE3C1'2740        BIC      R2,R1,#0x1000000
   \        0xC                      REQUIRE ?Subroutine0
   \        0xC                      ;; // Fall through to label ?Subroutine0
    102          }

   \                                 In section SOFTPACK, align 4, keep-with-next
    103          static void _pit_handler(uint32_t source, void* user_arg)
    104          {
    105          	uint32_t interruptStatus = pit_get_status();
   \                     _pit_handler:
   \        0x0   0x....'....        LDR      R0,??DataTable11_2  ;; 0xf8048034
   \        0x4   0xE24D'D004        SUB      SP,SP,#+4
   \        0x8   0xE590'1000        LDR      R1,[R0, #+0]
    106                  if( interruptStatus ) {
   \        0xC   0xE351'0000        CMP      R1,#+0
   \       0x10   0x0A00'0006        BEQ      ??_pit_handler_0
    107                    volatile uint32_t reg = pit_get_pivr();
   \       0x14   0xE590'0004        LDR      R0,[R0, #+4]
   \       0x18   0xE58D'0000        STR      R0,[SP, #+0]
    108                    (void)reg;
   \       0x1C   0xE59D'2000        LDR      R2,[SP, #+0]
    109                    tickCounter++;
   \       0x20   0x....'....        LDR      R0,??DataTable11_3
   \       0x24   0xE590'3000        LDR      R3,[R0, #+0]
   \       0x28   0xE283'C001        ADD      R12,R3,#+1
   \       0x2C   0xE580'C000        STR      R12,[R0, #+0]
    110                  }
    111              
    112          }
   \                     ??_pit_handler_0:
   \       0x30   0xE28D'D004        ADD      SP,SP,#+4
   \       0x34   0xE12F'FF1E        BX       LR               ;; return

   \                                 In section SOFTPACK, align 4, keep-with-next
    113          void pit_enable_it(void)
    114          {
   \                     pit_enable_it:
   \        0x0   0xE92D'5000        PUSH     {R12,LR}
    115                  irq_add_handler(ID_PIT, _pit_handler, NULL);
   \        0x4   0xE3A0'2000        MOV      R2,#+0
   \        0x8   0x....'....        ADR      R1,_pit_handler
   \        0xC   0xE3A0'0003        MOV      R0,#+3
   \       0x10   0x....'....        BL       irq_add_handler
    116          	irq_enable(ID_PIT);
   \       0x14   0xE3A0'0003        MOV      R0,#+3
   \       0x18   0x....'....        BL       irq_enable
    117                          
    118          	PIT->PIT_MR |= PIT_MR_PITIEN;
   \       0x1C   0x....'....        LDR      R0,??DataTable11_1  ;; 0xf8048030
   \       0x20   0xE590'1000        LDR      R1,[R0, #+0]
   \       0x24   0xE381'2780        ORR      R2,R1,#0x2000000
   \       0x28   0xE580'2000        STR      R2,[R0, #+0]
    119          }
   \       0x2C   0xE8BD'8001        POP      {R0,PC}          ;; return
    120          

   \                                 In section SOFTPACK, align 4, keep-with-next
    121          void pit_disable_it(void)
    122          {
    123          	PIT->PIT_MR &= ~PIT_MR_PITIEN;
   \                     pit_disable_it:
   \        0x0   0x....'....        LDR      R0,??DataTable11_1  ;; 0xf8048030
   \        0x4   0xE590'1000        LDR      R1,[R0, #+0]
   \        0x8   0xE3C1'2780        BIC      R2,R1,#0x2000000
   \        0xC   0x....'....        B        ?Subroutine0
    124          }
    125          

   \                                 In section SOFTPACK, align 4, keep-with-next
    126          uint32_t pit_get_mode(void)
    127          {
    128          	return PIT->PIT_MR;
   \                     pit_get_mode:
   \        0x0   0x....'....        LDR      R0,??DataTable11_1  ;; 0xf8048030
   \        0x4   0x....'....        B        ?Subroutine1
    129          }

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ?Subroutine1:
   \        0x0   0xE590'0000        LDR      R0,[R0, #+0]
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
    130          

   \                                 In section SOFTPACK, align 4, keep-with-next
    131          uint32_t pit_get_status(void)
    132          {
    133          	return PIT->PIT_SR;
   \                     pit_get_status:
   \        0x0   0x....'....        LDR      R0,??DataTable11_2  ;; 0xf8048034
   \        0x4                      REQUIRE ?Subroutine1
   \        0x4                      ;; // Fall through to label ?Subroutine1
    134          }
    135          

   \                                 In section SOFTPACK, align 4, keep-with-next
    136          uint32_t pit_get_piir(void)
    137          {
    138          	return PIT->PIT_PIIR;
   \                     pit_get_piir:
   \        0x0   0x....'....        LDR      R0,??DataTable11_4  ;; 0xf804803c
   \        0x4   0x....'....        B        ?Subroutine1
    139          }
    140          

   \                                 In section SOFTPACK, align 4, keep-with-next
    141          uint32_t pit_get_pivr(void)
    142          {
    143          	return PIT->PIT_PIVR;
   \                     pit_get_pivr:
   \        0x0   0x....'....        LDR      R0,??DataTable11_5  ;; 0xf8048038
   \        0x4   0x....'....        B        ?Subroutine1
    144          }
    145          

   \                                 In section SOFTPACK, align 4, keep-with-next
    146          uint32_t gettick(void)
    147          {
    148            return tickCounter;
   \                     gettick:
   \        0x0   0x....'....        LDR      R0,??DataTable11_3
   \        0x4   0x....'....        B        ?Subroutine1
    149          }

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable11:
   \        0x0   0x8637'BD06        DC32     0x8637bd06

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable11_1:
   \        0x0   0xF804'8030        DC32     0xf8048030

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable11_2:
   \        0x0   0xF804'8034        DC32     0xf8048034

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable11_3:
   \        0x0   0x....'....        DC32     tickCounter

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable11_4:
   \        0x0   0xF804'803C        DC32     0xf804803c

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable11_5:
   \        0x0   0xF804'8038        DC32     0xf8048038

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   _pit_handler
       0   gettick
       0   pit_disable
       0   pit_disable_it
       0   pit_enable
       8   pit_enable_it
         8   -> irq_add_handler
         8   -> irq_enable
       0   pit_get_mode
       0   pit_get_piir
       0   pit_get_pivr
       0   pit_get_status
       8   pit_init
         8   -> pmc_get_peripheral_clock
       0   pit_set_piv


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_2
       4  ??DataTable11_3
       4  ??DataTable11_4
       4  ??DataTable11_5
       8  ?Subroutine0
       8  ?Subroutine1
      56  _pit_handler
       8  gettick
      12  pit_disable
      16  pit_disable_it
      16  pit_enable
      48  pit_enable_it
       8  pit_get_mode
       8  pit_get_piir
       8  pit_get_pivr
       4  pit_get_status
      80  pit_init
      32  pit_set_piv
       4  tickCounter

 
   4 bytes in section .bss
 336 bytes in section SOFTPACK
 
 336 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
