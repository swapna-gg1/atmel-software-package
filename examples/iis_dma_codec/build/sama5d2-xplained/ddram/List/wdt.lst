###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.1.245/W32 for ARM         08/Dec/2020  15:53:45
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode                    
#    Endian                   =  little
#    Source file              =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\peripherals\wdt.c
#    Command line             =
#        -f C:\Users\c40450\AppData\Local\Temp\EW88A3.tmp
#        (C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\peripherals\wdt.c
#        -D "SOFTPACK_VERSION=\"2.17\"" -D TRACE_LEVEL=5 -D VARIANT_DDRAM -D
#        CONFIG_ARCH_ARMV7A -D CONFIG_ARCH_ARM -D CONFIG_SOC_SAMA5D2 -D
#        CONFIG_CHIP_SAMA5D27 -D CONFIG_PACKAGE_289PIN -D
#        CONFIG_BOARD_SAMA5D2_XPLAINED -D CONFIG_HAVE_AIC5 -D
#        CONFIG_HAVE_FLEXCOM -D CONFIG_HAVE_PIO4 -D CONFIG_HAVE_PIO4_SECURE -D
#        CONFIG_HAVE_NFC -D CONFIG_HAVE_PIT -D CONFIG_HAVE_SMC -D
#        CONFIG_HAVE_SMC_SCRAMBLING -D CONFIG_HAVE_GMAC_QUEUES -D
#        CONFIG_HAVE_MPDDRC -D CONFIG_HAVE_MPDDRC_DATA_PATH -D
#        CONFIG_HAVE_MPDDRC_IO_CALIBRATION -D CONFIG_HAVE_MPDDRC_DDR2 -D
#        CONFIG_HAVE_MPDDRC_LPDDR2 -D CONFIG_HAVE_MPDDRC_DDR3 -D
#        CONFIG_HAVE_MPDDRC_LPDDR3 -D CONFIG_HAVE_ADC_SETTLING_TIME -D
#        CONFIG_HAVE_ADC_DIFF_INPUT -D CONFIG_HAVE_ADC_SEQ_R2 -D
#        CONFIG_HAVE_PMC_FAST_STARTUP -D CONFIG_HAVE_PMC_GENERATED_CLOCKS -D
#        CONFIG_HAVE_PMC_AUDIO_CLOCK -D CONFIG_HAVE_PMC_PLLADIV2 -D
#        CONFIG_HAVE_PMC_H32MXDIV -D CONFIG_HAVE_PMC_UPLL_BIAS -D
#        CONFIG_HAVE_SCKC -D CONFIG_HAVE_PWMC_DMA -D
#        CONFIG_HAVE_PWMC_SPREAD_SPECTRUM -D CONFIG_HAVE_PWMC_EXTERNAL_TRIGGER
#        -D CONFIG_HAVE_PWMC_FAULT_PROT_HIZ -D CONFIG_HAVE_PWMC_STEPPER_MOTOR
#        -D CONFIG_HAVE_PWMC_CMP_UNIT -D CONFIG_HAVE_PWMC_SYNC_MODE -D
#        CONFIG_HAVE_PWMC_OOV -D CONFIG_HAVE_PWMC_FMODE -D CONFIG_HAVE_PWMC_WP
#        -D CONFIG_HAVE_PWMC_DTIME -D CONFIG_HAVE_PWMC_ELINE -D
#        CONFIG_HAVE_SFRBU -D CONFIG_HAVE_L2CC -D CONFIG_HAVE_SAIC -D
#        CONFIG_HAVE_XDMAC -D CONFIG_HAVE_XDMAC_DATA_WIDTH_DWORD -D
#        CONFIG_HAVE_I2C_BUS -D CONFIG_HAVE_SECUMOD -D CONFIG_HAVE_SFC -D
#        CONFIG_HAVE_PWMC -D CONFIG_HAVE_SECURE_MATRIX -D
#        CONFIG_HAVE_DDR3_MT41K128M16 -D
#        CONFIG_HAVE_RSTC_CONFIGURABLE_USER_RESET -D CONFIG_HAVE_TC_FAULT_MODE
#        -D CONFIG_HAVE_TC_DMA_MODE -D CONFIG_HAVE_RTC_CALIBRATION -D
#        CONFIG_HAVE_RTC_MODE_PERSIAN -D CONFIG_HAVE_RTC_MODE_UTC -D
#        CONFIG_HAVE_RTC_TAMPER -D CONFIG_HAVE_AUDIO -D CONFIG_HAVE_SSC -D
#        CONFIG_HAVE_CLASSD -D CONFIG_HAVE_I2SC -D CONFIG_HAVE_PDMIC -D
#        CONFIG_HAVE_AUDIO_AD1934 -D CONFIG_HAVE_SHDWC -D CONFIG_HAVE_SPI -D
#        CONFIG_HAVE_SPI_FIFO -D CONFIG_HAVE_MMU -D CONFIG_HAVE_L1CACHE -D
#        CONFIG_HAVE_L2CACHE -D CONFIG_HAVE_SPI_BUS -D CONFIG_HAVE_UART -D
#        CONFIG_HAVE_SERIALD_UART -D CONFIG_HAVE_USART -D
#        CONFIG_HAVE_USART_FIFO -D CONFIG_HAVE_AUDIO_WM8731 --preprocess
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\iis_dma_codec\build\sama5d2-xplained\ddram\List
#        -lC
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\iis_dma_codec\build\sama5d2-xplained\ddram\List
#        --diag_suppress Pa050 -o
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\iis_dma_codec\build\sama5d2-xplained\ddram\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-A5 -e --fpu=VFPv4_D16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\iis_dma_codec\..\..\arch\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\iis_dma_codec\..\..\utils\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\iis_dma_codec\..\..\target\common\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\iis_dma_codec\..\..\target\sama5d2\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\iis_dma_codec\..\..\drivers\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\iis_dma_codec\..\..\lib\
#        --section .text=SOFTPACK --cpu_mode arm -On)
#    Locale                   =  C
#    List file                =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\iis_dma_codec\build\sama5d2-xplained\ddram\List\wdt.lst
#    Object file              =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\iis_dma_codec\build\sama5d2-xplained\ddram\Obj\wdt.o
#    Runtime model:              
#      __SystemLibrary        =  DLib
#      __dlib_file_descriptor =  0
#      __dlib_version         =  6
#
###############################################################################

C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\peripherals\wdt.c
      1          /* ----------------------------------------------------------------------------
      2           *        SAM Software Package License
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2015, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          /**
     31           * \file
     32           *
     33           * Implementation of Watchdog Timer (WDT) controller.
     34           *
     35           */
     36          
     37          /** \addtogroup wdt_module Working with WDT
     38           * \section Purpose
     39           * The WDT driver provides the interface to configure and use the WDT
     40           * peripheral.
     41           *
     42           * The WDT can be used to prevent system lock-up if the software becomes
     43           * trapped in a deadlock. It can generate a general reset or a processor
     44           * reset only. It is clocked by slow clock divided by 128.
     45           *
     46           * The WDT is running at reset with 16 seconds watchdog period (slow clock at 32.768 kHz)
     47           * and external reset generation enabled. The user must either disable it or
     48           * reprogram it to meet the application requires.
     49           *
     50           * \section Usage
     51           * To use the WDT, the user could follow these few steps:
     52           * <ul>
     53           * <li>Enable watchdog with given mode using \ref wdt_enable().
     54           * <li>Restart the watchdog using \ref wdt_restart() within the watchdog period.
     55           * </ul>
     56           *
     57           * For more accurate information, please look at the WDT section of the
     58           * Datasheet.
     59           *
     60           * \note
     61           * The Watchdog Mode Register (WDT_MR) can be written only once.\n
     62           *
     63           * Related files :\n
     64           * \ref wdt.c\n
     65           * \ref wdt.h.\n
     66           */
     67          /*@{*/
     68          /*@}*/
     69          
     70          /*---------------------------------------------------------------------------
     71           *        Headers
     72           *---------------------------------------------------------------------------*/
     73          
     74          #include "chip.h"
     75          #include "peripherals/pmc.h"
     76          #include "peripherals/wdt.h"
     77          #include "trace.h"
     78          #include "timer.h"
     79          #include <stdio.h>
     80          
     81          /*----------------------------------------------------------------------------
     82           *        Local functions
     83           *----------------------------------------------------------------------------*/
     84          

   \                                 In section SOFTPACK, align 4, keep-with-next
     85          static uint32_t _wdt_compute_period(uint32_t timeout)
     86          {
   \                     _wdt_compute_period:
   \        0x0   0xE92D'4010        PUSH     {R4,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
     87          	/* Calculate the reload value to achive this (appoximate) timeout.
     88          	*
     89          	* Examples with WDT_FREQUENCY = 32768 / 128 = 256:
     90          	*  timeout = 4     -> reload = 1
     91          	*  timeout = 16000 -> reload = 4096
     92          	*/
     93          	uint32_t reload = (timeout * (pmc_get_slow_clock() >> 7) + 500) / 1000;
   \        0x8   0x....'....        BL       pmc_get_slow_clock
   \        0xC   0xE1B0'03A0        LSRS     R0,R0,#+7
   \       0x10   0xE011'0490        MULS     R1,R0,R4
   \       0x14   0xE291'0F7D        ADDS     R0,R1,#+500
   \       0x18   0xE3A0'1FFA        MOV      R1,#+1000
   \       0x1C   0x....'....        BL       __aeabi_uidiv
     94          	if (reload < 1) {
   \       0x20   0xE350'0000        CMP      R0,#+0
   \       0x24   0x1A00'0002        BNE      ??_wdt_compute_period_0
     95          		reload = 1;
   \       0x28   0xE3A0'1001        MOV      R1,#+1
   \       0x2C   0xE1B0'0001        MOVS     R0,R1
   \       0x30   0xEA00'0003        B        ??_wdt_compute_period_1
     96          	}
     97          	else if (reload > 4095) {
   \                     ??_wdt_compute_period_0:
   \       0x34   0xE350'0D40        CMP      R0,#+4096
   \       0x38   0x3A00'0001        BCC      ??_wdt_compute_period_1
     98          		reload = 4095;
   \       0x3C   0xE300'1FFF        MOVW     R1,#+4095
   \       0x40   0xE1B0'0001        MOVS     R0,R1
     99          	}
    100          	return reload;
   \                     ??_wdt_compute_period_1:
   \       0x44   0xE8BD'8010        POP      {R4,PC}          ;; return
    101          }
    102          
    103          /*----------------------------------------------------------------------------
    104           *        Exported functions
    105           *----------------------------------------------------------------------------*/
    106          

   \                                 In section SOFTPACK, align 4, keep-with-next
    107          void wdt_enable(bool en_int,
    108          				bool en_rst,
    109          				bool en_dbghlt,
    110          				bool en_idlehlt,
    111          				uint32_t delta,
    112          				uint32_t counter)
    113          {
   \                     wdt_enable:
   \        0x0   0xE92D'4FF8        PUSH     {R3-R11,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
   \        0x8   0xE1B0'5001        MOVS     R5,R1
   \        0xC   0xE1B0'6002        MOVS     R6,R2
   \       0x10   0xE1B0'7003        MOVS     R7,R3
   \       0x14   0xE59D'8028        LDR      R8,[SP, #+40]
   \       0x18   0xE59D'902C        LDR      R9,[SP, #+44]
    114          	uint32_t mode = 0;
   \       0x1C   0xE3A0'0000        MOV      R0,#+0
    115          
    116          #ifdef CONFIG_HAVE_DWDT
    117          	uint32_t wc;
    118          
    119          	mode &= ~(WDT_MR_WDDIS);
    120          	WDT->WDT_MR = mode;
    121          	wc = _wdt_compute_period(counter);
    122          	WDT->WDT_WLR = WDT_WLR_PERIOD(wc) | WDT_WLR_RPTH(_wdt_compute_period(delta));
    123          	WDT->WDT_ILR = WDT_ILR_LVLTH(wc);
    124          	if (en_int)
    125          		WDT->WDT_IER = WDT_IER_PERINT | WDT_IER_RPTHINT | WDT_IER_LVLINT;
    126          	else
    127          		WDT->WDT_IER = 0;
    128          
    129          	if (en_rst)
    130          		mode |= WDT_MR_PERIODRST;
    131          	if (en_dbghlt)
    132          		mode |= WDT_MR_WDDBGHLT;
    133          	if (en_idlehlt)
    134          		mode |= WDT_MR_WDIDLEHLT;
    135          	WDT->WDT_MR = mode;
    136          
    137          #else
    138          	mode &= ~(WDT_MR_WDDIS | WDT_MR_WDD_Msk | WDT_MR_WDV_Msk);
   \       0x20   0xE3A0'14F0        MOV      R1,#-268435456
   \       0x24   0xE381'1C70        ORR      R1,R1,#0x7000
   \       0x28   0xE011'0000        ANDS     R0,R1,R0
    139          	mode &= ~(WDT_MR_WDD_Msk | WDT_MR_WDV_Msk);
   \       0x2C   0xE3A0'14F0        MOV      R1,#-268435456
   \       0x30   0xE381'1CF0        ORR      R1,R1,#0xF000
   \       0x34   0xE011'B000        ANDS     R11,R1,R0
    140          	WDT->WDT_MR = mode;
   \       0x38   0x....'....        LDR      R10,??DataTable5  ;; 0xf8048044
   \       0x3C   0xE58A'B000        STR      R11,[R10, #+0]
    141          	usleep(100);
   \       0x40   0xE3A0'0064        MOV      R0,#+100
   \       0x44   0x....'....        BL       usleep
    142          	if (en_int)
   \       0x48   0xE1B0'0004        MOVS     R0,R4
   \       0x4C   0xE6EF'0070        UXTB     R0,R0
   \       0x50   0xE350'0000        CMP      R0,#+0
   \       0x54   0x0A00'0000        BEQ      ??wdt_enable_0
    143          		mode |= WDT_MR_WDFIEN;
   \       0x58   0xE39B'BD40        ORRS     R11,R11,#0x1000
    144          	if (en_rst)
   \                     ??wdt_enable_0:
   \       0x5C   0xE1B0'0005        MOVS     R0,R5
   \       0x60   0xE6EF'0070        UXTB     R0,R0
   \       0x64   0xE350'0000        CMP      R0,#+0
   \       0x68   0x0A00'0000        BEQ      ??wdt_enable_1
    145          		mode |= WDT_MR_WDRSTEN;
   \       0x6C   0xE39B'BD80        ORRS     R11,R11,#0x2000
    146          	if (en_dbghlt)
   \                     ??wdt_enable_1:
   \       0x70   0xE1B0'0006        MOVS     R0,R6
   \       0x74   0xE6EF'0070        UXTB     R0,R0
   \       0x78   0xE350'0000        CMP      R0,#+0
   \       0x7C   0x0A00'0000        BEQ      ??wdt_enable_2
    147          		mode |= WDT_MR_WDDBGHLT;
   \       0x80   0xE39B'B540        ORRS     R11,R11,#0x10000000
    148          	if (en_idlehlt)
   \                     ??wdt_enable_2:
   \       0x84   0xE1B0'0007        MOVS     R0,R7
   \       0x88   0xE6EF'0070        UXTB     R0,R0
   \       0x8C   0xE350'0000        CMP      R0,#+0
   \       0x90   0x0A00'0000        BEQ      ??wdt_enable_3
    149          		mode |= WDT_MR_WDIDLEHLT;
   \       0x94   0xE39B'B580        ORRS     R11,R11,#0x20000000
    150          	WDT->WDT_MR = mode |
    151          				  WDT_MR_WDD(_wdt_compute_period(delta)) |
    152          				  WDT_MR_WDV(_wdt_compute_period(counter));
   \                     ??wdt_enable_3:
   \       0x98   0xE1B0'0008        MOVS     R0,R8
   \       0x9C   0x....'....        BL       _wdt_compute_period
   \       0xA0   0xE3A0'16F0        MOV      R1,#+251658240
   \       0xA4   0xE381'18FF        ORR      R1,R1,#0xFF0000
   \       0xA8   0xE011'0800        ANDS     R0,R1,R0, LSL #+16
   \       0xAC   0xE190'000B        ORRS     R0,R0,R11
   \       0xB0   0xE58D'0000        STR      R0,[SP, #+0]
   \       0xB4   0xE1B0'0009        MOVS     R0,R9
   \       0xB8   0x....'....        BL       _wdt_compute_period
   \       0xBC   0xE1B0'1A00        LSLS     R1,R0,#+20
   \       0xC0   0xE59D'0000        LDR      R0,[SP, #+0]
   \       0xC4   0xE190'0A21        ORRS     R0,R0,R1, LSR #+20
   \       0xC8   0xE58A'0000        STR      R0,[R10, #+0]
    153          #endif
    154          }
   \       0xCC   0xE8BD'8FF1        POP      {R0,R4-R11,PC}   ;; return
    155          

   \                                 In section SOFTPACK, align 4, keep-with-next
    156          void wdt_disable(void)
    157          {
    158          	WDT->WDT_MR = WDT_MR_WDDIS;
   \                     wdt_disable:
   \        0x0   0xE3A0'0C80        MOV      R0,#+32768
   \        0x4   0x....'....        LDR      R1,??DataTable5  ;; 0xf8048044
   \        0x8   0xE581'0000        STR      R0,[R1, #+0]
    159          }
   \        0xC   0xE12F'FF1E        BX       LR               ;; return
    160          

   \                                 In section SOFTPACK, align 4, keep-with-next
    161          void wdt_restart()
    162          {
    163          	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;
   \                     wdt_restart:
   \        0x0   0xE3A0'0001        MOV      R0,#+1
   \        0x4   0xE380'04A5        ORR      R0,R0,#0xA5000000
   \        0x8   0x....'....        LDR      R1,??DataTable5_1  ;; 0xf8048040
   \        0xC   0xE581'0000        STR      R0,[R1, #+0]
    164          }
   \       0x10   0xE12F'FF1E        BX       LR               ;; return
    165          

   \                                 In section SOFTPACK, align 4, keep-with-next
    166          uint32_t wdt_get_status(void)
    167          {
    168          #ifdef CONFIG_HAVE_DWDT
    169          	return WDT->WDT_ISR;
    170          #else
    171          	return WDT->WDT_SR & (WDT_SR_WDUNF | WDT_SR_WDERR);
   \                     wdt_get_status:
   \        0x0   0x....'....        LDR      R0,??DataTable5_2  ;; 0xf8048048
   \        0x4   0xE590'0000        LDR      R0,[R0, #+0]
   \        0x8   0xE210'0003        ANDS     R0,R0,#0x3
   \        0xC   0xE12F'FF1E        BX       LR               ;; return
    172          #endif
    173          }
    174          

   \                                 In section SOFTPACK, align 4, keep-with-next
    175          uint32_t wdt_get_counter_value(void)
    176          {
    177          #ifdef CONFIG_HAVE_DWDT
    178          	return (WDT->WDT_VR & WDT_VR_COUNTER_Msk) >> WDT_VR_COUNTER_Pos;
    179          #else
    180          	return (WDT->WDT_MR & WDT_MR_WDV_Msk) >> WDT_MR_WDV_Pos;
   \                     wdt_get_counter_value:
   \        0x0   0x....'....        LDR      R0,??DataTable5  ;; 0xf8048044
   \        0x4   0xE590'0000        LDR      R0,[R0, #+0]
   \        0x8   0xE1B0'0A00        LSLS     R0,R0,#+20
   \        0xC   0xE1B0'0A20        LSRS     R0,R0,#+20
   \       0x10   0xE12F'FF1E        BX       LR               ;; return
    181          #endif
    182          }

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5:
   \        0x0   0xF804'8044        DC32     0xf8048044

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_1:
   \        0x0   0xF804'8040        DC32     0xf8048040

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_2:
   \        0x0   0xF804'8048        DC32     0xf8048048

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   _wdt_compute_period
         8   -> pmc_get_slow_clock
         8 __aeabi_uidiv
       0   wdt_disable
      40   wdt_enable
        40   -> _wdt_compute_period
        40   -> usleep
       0   wdt_get_counter_value
       0   wdt_get_status
       0   wdt_restart


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
      72  _wdt_compute_period
      16  wdt_disable
     208  wdt_enable
      20  wdt_get_counter_value
      16  wdt_get_status
      20  wdt_restart

 
 364 bytes in section SOFTPACK
 
 364 bytes of CODE memory

Errors: none
Warnings: none
