###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.1.245/W32 for ARM         01/Dec/2020  16:43:00
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\serial\uart.c
#    Command line      =
#        -f C:\Users\c40450\AppData\Local\Temp\EW8870.tmp
#        (C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\serial\uart.c
#        -D "SOFTPACK_VERSION=\"2.17\"" -D TRACE_LEVEL=5 -D VARIANT_DDRAM -D
#        CONFIG_ARCH_ARMV7A -D CONFIG_ARCH_ARM -D CONFIG_SOC_SAMA5D2 -D
#        CONFIG_CHIP_SAMA5D27 -D CONFIG_PACKAGE_289PIN -D
#        CONFIG_BOARD_SAMA5D2_XPLAINED -D CONFIG_HAVE_AIC5 -D
#        CONFIG_HAVE_FLEXCOM -D CONFIG_HAVE_PIO4 -D CONFIG_HAVE_PIO4_SECURE -D
#        CONFIG_HAVE_NFC -D CONFIG_HAVE_PIT -D CONFIG_HAVE_SMC -D
#        CONFIG_HAVE_SMC_SCRAMBLING -D CONFIG_HAVE_GMAC_QUEUES -D
#        CONFIG_HAVE_MPDDRC -D CONFIG_HAVE_MPDDRC_DATA_PATH -D
#        CONFIG_HAVE_MPDDRC_IO_CALIBRATION -D CONFIG_HAVE_MPDDRC_DDR2 -D
#        CONFIG_HAVE_MPDDRC_LPDDR2 -D CONFIG_HAVE_MPDDRC_DDR3 -D
#        CONFIG_HAVE_MPDDRC_LPDDR3 -D CONFIG_HAVE_ADC_SETTLING_TIME -D
#        CONFIG_HAVE_ADC_DIFF_INPUT -D CONFIG_HAVE_ADC_SEQ_R2 -D
#        CONFIG_HAVE_PMC_FAST_STARTUP -D CONFIG_HAVE_PMC_GENERATED_CLOCKS -D
#        CONFIG_HAVE_PMC_AUDIO_CLOCK -D CONFIG_HAVE_PMC_PLLADIV2 -D
#        CONFIG_HAVE_PMC_H32MXDIV -D CONFIG_HAVE_PMC_UPLL_BIAS -D
#        CONFIG_HAVE_SCKC -D CONFIG_HAVE_PWMC_DMA -D
#        CONFIG_HAVE_PWMC_SPREAD_SPECTRUM -D CONFIG_HAVE_PWMC_EXTERNAL_TRIGGER
#        -D CONFIG_HAVE_PWMC_FAULT_PROT_HIZ -D CONFIG_HAVE_PWMC_STEPPER_MOTOR
#        -D CONFIG_HAVE_PWMC_CMP_UNIT -D CONFIG_HAVE_PWMC_SYNC_MODE -D
#        CONFIG_HAVE_PWMC_OOV -D CONFIG_HAVE_PWMC_FMODE -D CONFIG_HAVE_PWMC_WP
#        -D CONFIG_HAVE_PWMC_DTIME -D CONFIG_HAVE_PWMC_ELINE -D
#        CONFIG_HAVE_SFRBU -D CONFIG_HAVE_L2CC -D CONFIG_HAVE_SAIC -D
#        CONFIG_HAVE_XDMAC -D CONFIG_HAVE_XDMAC_DATA_WIDTH_DWORD -D
#        CONFIG_HAVE_SECUMOD -D CONFIG_HAVE_SFC -D CONFIG_HAVE_PWMC -D
#        CONFIG_HAVE_SECURE_MATRIX -D CONFIG_HAVE_DDR3_MT41K128M16 -D
#        CONFIG_HAVE_RSTC_CONFIGURABLE_USER_RESET -D CONFIG_HAVE_TC_FAULT_MODE
#        -D CONFIG_HAVE_TC_DMA_MODE -D CONFIG_HAVE_RTC_CALIBRATION -D
#        CONFIG_HAVE_RTC_MODE_PERSIAN -D CONFIG_HAVE_RTC_MODE_UTC -D
#        CONFIG_HAVE_RTC_TAMPER -D CONFIG_HAVE_AUDIO -D
#        CONFIG_HAVE_AUDIO_WM8731 -D CONFIG_HAVE_SSC -D CONFIG_HAVE_CLASSD -D
#        CONFIG_HAVE_PDMIC -D CONFIG_HAVE_SHDWC -D CONFIG_HAVE_SPI -D
#        CONFIG_HAVE_SPI_FIFO -D CONFIG_HAVE_MMU -D CONFIG_HAVE_L1CACHE -D
#        CONFIG_HAVE_L2CACHE -D CONFIG_HAVE_SPI_BUS -D CONFIG_HAVE_UART -D
#        CONFIG_HAVE_SERIALD_UART -D CONFIG_HAVE_USART -D
#        CONFIG_HAVE_USART_FIFO -D CONFIG_HAVE_I2C_BUS --preprocess
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\ssc_dma_audio\build\sama5d2-xplained\ddram\List
#        -lC
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\ssc_dma_audio\build\sama5d2-xplained\ddram\List
#        --diag_suppress Pa050 -o
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\ssc_dma_audio\build\sama5d2-xplained\ddram\Obj
#        --debug --endian=little --cpu=Cortex-A5 -e --fpu=VFPv4_D16
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\ssc_dma_audio\..\..\arch\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\ssc_dma_audio\..\..\utils\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\ssc_dma_audio\..\..\target\common\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\ssc_dma_audio\..\..\target\sama5d2\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\ssc_dma_audio\..\..\drivers\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\ssc_dma_audio\..\..\lib\
#        --section .text=SOFTPACK --cpu_mode arm -Oh)
#    Locale            =  C
#    List file         =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\ssc_dma_audio\build\sama5d2-xplained\ddram\List\uart.lst
#    Object file       =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\ssc_dma_audio\build\sama5d2-xplained\ddram\Obj\uart.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\serial\uart.c
      1          /* ----------------------------------------------------------------------------
      2           *         SAM Software Package License
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2015, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          /*------------------------------------------------------------------------------
     31           *         Headers
     32           *------------------------------------------------------------------------------*/
     33          
     34          #include "chip.h"
     35          #include "serial/uart.h"
     36          #include "peripherals/pmc.h"
     37          #include <assert.h>
     38          
     39          /*------------------------------------------------------------------------------
     40           *         Exported functions
     41           *------------------------------------------------------------------------------*/
     42          
     43          /*
     44           * Initializes the UART with the given parameters, and enables both the
     45           * transmitter and the receiver. The mode parameter contains the value of the
     46           * UART_MR register.
     47           * Value UART_STANDARD can be used for mode to get the most common configuration
     48           * (i.e. aysnchronous, 8bits, no parity, 1 stop bit, no flow control).
     49           * \param mode  Operating mode to configure.
     50           * \param baudrate  Desired baudrate (e.g. 115200).
     51           * \param mck  Frequency of the system master clock in Hz.
     52           */

   \                                 In section SOFTPACK, align 4, keep-with-next
     53          void uart_configure(Uart* uart, uint32_t mode, uint32_t baudrate)
     54          {
   \                     uart_configure:
   \        0x0   0xE92D'4070        PUSH     {R4-R6,LR}
   \        0x4   0xE1A0'4000        MOV      R4,R0
   \        0x8   0xE1A0'5001        MOV      R5,R1
   \        0xC   0xE1A0'6002        MOV      R6,R2
     55          	uint32_t uart_id = get_uart_id_from_addr(uart);
   \       0x10   0x....'....        BL       get_uart_id_from_addr
     56          
     57          	/* Reset & disable receiver and transmitter, disable interrupts */
     58          	uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX |
     59          	                UART_CR_RXDIS | UART_CR_TXDIS | UART_CR_RSTSTA;
   \       0x14   0xE3A0'1F6B        MOV      R1,#+428
     60          	uart->UART_IDR = 0xffffffffu;
   \       0x18   0xE3E0'2000        MVN      R2,#+0
   \       0x1C   0xE584'1000        STR      R1,[R4, #+0]
   \       0x20   0xE584'200C        STR      R2,[R4, #+12]
     61          
     62          	/* Configure baud rate */
     63          	uart->UART_BRGR = pmc_get_peripheral_clock(uart_id) / (baudrate * 16);
   \       0x24   0x....'....        BL       pmc_get_peripheral_clock
   \       0x28   0xE1A0'1206        LSL      R1,R6,#+4
   \       0x2C   0x....'....        BL       __aeabi_uidiv
   \       0x30   0xE584'0020        STR      R0,[R4, #+32]
     64          
     65          	/* Configure mode register */
     66          	uart->UART_MR = mode;
   \       0x34   0xE584'5004        STR      R5,[R4, #+4]
     67          
     68          	/* Enable receiver and transmitter */
     69          	uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   \       0x38   0xE3A0'0050        MOV      R0,#+80
   \       0x3C   0xE584'0000        STR      R0,[R4, #+0]
     70          }
   \       0x40   0xE8BD'8070        POP      {R4-R6,PC}       ;; return
     71          
     72          /* Enable transmitter
     73           *
     74           */

   \                                 In section SOFTPACK, align 4, keep-with-next
     75          void uart_set_transmitter_enabled(Uart* uart, bool enabled)
     76          {
     77          	uart->UART_CR = enabled ? UART_CR_TXEN : UART_CR_TXDIS;
   \                     uart_set_transmitter_enabled:
   \        0x0   0xE351'0000        CMP      R1,#+0
   \        0x4   0x13A0'1040        MOVNE    R1,#+64
   \        0x8   0x03A0'1080        MOVEQ    R1,#+128
   \        0xC   0x....'....        B        ?Subroutine0
     78          }

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ?Subroutine0:
   \        0x0   0xE580'1000        STR      R1,[R0, #+0]
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
     79          
     80          /* Enable receiver
     81           *
     82           */

   \                                 In section SOFTPACK, align 4, keep-with-next
     83          void uart_set_receiver_enabled(Uart* uart, bool enabled)
     84          {
     85          	uart->UART_CR = enabled ? UART_CR_RXEN : UART_CR_RXDIS;
   \                     uart_set_receiver_enabled:
   \        0x0   0xE351'0000        CMP      R1,#+0
   \        0x4   0x13A0'1010        MOVNE    R1,#+16
   \        0x8   0x03A0'1020        MOVEQ    R1,#+32
   \        0xC                      REQUIRE ?Subroutine0
   \        0xC                      ;; // Fall through to label ?Subroutine0
     86          }
     87          
     88          /* Enable interrupt bits
     89           *
     90           */

   \                                 In section SOFTPACK, align 4, keep-with-next
     91          void uart_enable_it(Uart* uart, uint32_t mask)
     92          {
     93          	uart->UART_IER = mask;
   \                     uart_enable_it:
   \        0x0   0xE580'1008        STR      R1,[R0, #+8]
     94          }
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
     95          
     96          /* Disable interrupt bits
     97           *
     98           */

   \                                 In section SOFTPACK, align 4, keep-with-next
     99          void uart_disable_it(Uart* uart, uint32_t mask)
    100          {
    101          	uart->UART_IDR = mask;
   \                     uart_disable_it:
   \        0x0   0xE580'100C        STR      R1,[R0, #+12]
    102          }
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
    103          
    104          /**
    105           * Return true if a character can be written in UART
    106           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    107          bool uart_is_tx_ready(Uart* uart)
    108          {
    109          	return (uart->UART_SR & UART_SR_TXRDY) != 0;
   \                     uart_is_tx_ready:
   \        0x0   0xE590'0014        LDR      R0,[R0, #+20]
   \        0x4   0xE1A0'10A0        LSR      R1,R0,#+1
   \        0x8   0x....'....        B        ?Subroutine1
    110          }

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ?Subroutine1:
   \        0x0   0xE201'0001        AND      R0,R1,#0x1
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
    111          
    112          /**
    113           * Return true if any pending character has been sent
    114           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    115          bool uart_is_tx_empty(Uart* uart)
    116          {
    117          	return (uart->UART_SR & UART_SR_TXEMPTY) != 0;
   \                     uart_is_tx_empty:
   \        0x0   0xE590'0014        LDR      R0,[R0, #+20]
   \        0x4   0xE1A0'14A0        LSR      R1,R0,#+9
   \        0x8                      REQUIRE ?Subroutine1
   \        0x8                      ;; // Fall through to label ?Subroutine1
    118          }
    119          
    120          /**
    121           * Outputs a character on the UART line.
    122           * \note This function is synchronous (i.e. uses polling).
    123           * \param c  Character to send.
    124           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    125          void uart_put_char(Uart* uart, uint8_t c)
    126          {
    127          	/* Wait for the transmitter to be ready */
    128          	while (!uart_is_tx_ready(uart)) {}
   \                     uart_put_char:
   \                     ??uart_put_char_0:
   \        0x0   0xE590'2014        LDR      R2,[R0, #+20]
   \        0x4   0xE312'0002        TST      R2,#0x2
   \        0x8   0x0AFF'FFFC        BEQ      ??uart_put_char_0
    129          
    130          	/* Send character */
    131          	uart->UART_THR = c;
   \        0xC   0xE580'101C        STR      R1,[R0, #+28]
    132          }
   \       0x10   0xE12F'FF1E        BX       LR               ;; return
    133          
    134          /**
    135           * Return true if a character can be read in UART
    136           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    137          bool uart_is_rx_ready(Uart* uart)
    138          {
    139          	return (uart->UART_SR & UART_SR_RXRDY) != 0;
   \                     uart_is_rx_ready:
   \        0x0   0xE590'0014        LDR      R0,[R0, #+20]
   \        0x4   0xE200'0001        AND      R0,R0,#0x1
   \        0x8   0xE12F'FF1E        BX       LR               ;; return
    140          }
    141          
    142          /**
    143           * \brief Reads and returns a character from the UART.
    144           * \note This function is synchronous (i.e. uses polling).
    145           * \return Character received.
    146           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    147          uint8_t uart_get_char(Uart* uart)
    148          {
    149          	/* Wait for the receiver to be ready */
    150          	while (!uart_is_rx_ready(uart)) {}
   \                     uart_get_char:
   \                     ??uart_get_char_0:
   \        0x0   0xE590'1014        LDR      R1,[R0, #+20]
   \        0x4   0xE311'0001        TST      R1,#0x1
   \        0x8   0x0AFF'FFFC        BEQ      ??uart_get_char_0
    151          
    152          	/* Read charecter */
    153          	return uart->UART_RHR;
   \        0xC   0xE590'0018        LDR      R0,[R0, #+24]
   \       0x10   0xE6EF'0070        UXTB     R0,R0
   \       0x14   0xE12F'FF1E        BX       LR               ;; return
    154          }
    155          

   \                                 In section SOFTPACK, align 4, keep-with-next
    156          uint32_t uart_get_status(Uart *uart)
    157          {
   \                     uart_get_status:
   \        0x0   0xE92D'4010        PUSH     {R4,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
    158          	assert(uart != NULL);
   \        0x8   0x1A00'0004        BNE      ??uart_get_status_0
   \        0xC   0xE3A0'209E        MOV      R2,#+158
   \       0x10   0x....'....        LDR      R1,??DataTable3
   \       0x14   0x....'....        ADR      R0,?_1
   \       0x18   0x....'....        BL       __aeabi_assert
   \       0x1C   0x....'....        BL       __iar_EmptyStepPoint
    159          	return uart->UART_SR;
   \                     ??uart_get_status_0:
   \       0x20   0xE594'0014        LDR      R0,[R4, #+20]
   \       0x24   0xE8BD'8010        POP      {R4,PC}          ;; return
    160          }
    161          

   \                                 In section SOFTPACK, align 4, keep-with-next
    162          uint32_t uart_get_masked_status(Uart *uart)
    163          {
   \                     uart_get_masked_status:
   \        0x0   0xE92D'4010        PUSH     {R4,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
    164          	uint32_t status;
    165          	assert(uart != NULL);
   \        0x8   0x1A00'0004        BNE      ??uart_get_masked_status_0
   \        0xC   0xE3A0'20A5        MOV      R2,#+165
   \       0x10   0x....'....        LDR      R1,??DataTable3
   \       0x14   0x....'....        ADR      R0,?_1
   \       0x18   0x....'....        BL       __aeabi_assert
   \       0x1C   0x....'....        BL       __iar_EmptyStepPoint
    166          	status = uart->UART_SR;
   \                     ??uart_get_masked_status_0:
   \       0x20   0xE594'0014        LDR      R0,[R4, #+20]
    167          	status &= uart->UART_IMR;
   \       0x24   0xE594'1010        LDR      R1,[R4, #+16]
    168          	return status;
   \       0x28   0xE001'0000        AND      R0,R1,R0
   \       0x2C   0xE8BD'8010        POP      {R4,PC}          ;; return
    169          }

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable3:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x43 0x3A          DC8 0x43, 0x3A, 0x5C, 0x77, 0x6F, 0x72, 0x6B, 0x5C

   \              0x5C 0x77    

   \              0x6F 0x72    

   \              0x6B 0x5C
   \        0x8   0x41 0x74          DC8 0x41, 0x74, 0x6D, 0x65, 0x6C, 0x53, 0x6F, 0x66

   \              0x6D 0x65    

   \              0x6C 0x53    

   \              0x6F 0x66
   \       0x10   0x74 0x50          DC8 0x74, 0x50, 0x41, 0x63, 0x6B, 0x5C, 0x61, 0x74

   \              0x41 0x63    

   \              0x6B 0x5C    

   \              0x61 0x74
   \       0x18   0x6D 0x65          DC8 0x6D, 0x65, 0x6C, 0x2D, 0x73, 0x6F, 0x66, 0x74

   \              0x6C 0x2D    

   \              0x73 0x6F    

   \              0x66 0x74
   \       0x20   0x77 0x61          DC8 0x77, 0x61, 0x72, 0x65, 0x2D, 0x70, 0x61, 0x63

   \              0x72 0x65    

   \              0x2D 0x70    

   \              0x61 0x63
   \       0x28   0x6B 0x61          DC8 0x6B, 0x61, 0x67, 0x65, 0x2D, 0x32, 0x2E, 0x31

   \              0x67 0x65    

   \              0x2D 0x32    

   \              0x2E 0x31
   \       0x30   0x37 0x5C          DC8 0x37, 0x5C, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72

   \              0x64 0x72    

   \              0x69 0x76    

   \              0x65 0x72
   \       0x38   0x73 0x5C          DC8 0x73, 0x5C, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6C

   \              0x73 0x65    

   \              0x72 0x69    

   \              0x61 0x6C
   \       0x40   0x5C 0x75          DC8 0x5C, 0x75, 0x61, 0x72, 0x74, 0x2E, 0x63, 0

   \              0x61 0x72    

   \              0x74 0x2E    

   \              0x63 0x00

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ?_1:
   \        0x0   0x75 0x61          DC8 "uart != ((void*)0)"

   \              0x72 0x74    

   \              0x20 0x21    

   \              0x3D 0x20    

   \              0x28 0x28    

   \              0x76 0x6F    

   \              0x69 0x64    

   \              0x2A 0x29    

   \              0x30 0x29    

   \              0x00
   \       0x13   0x00               DC8 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   uart_configure
        16   -> get_uart_id_from_addr
        16   -> pmc_get_peripheral_clock
        16 __aeabi_uidiv
       0   uart_disable_it
       0   uart_enable_it
       0   uart_get_char
       8   uart_get_masked_status
         8   -> __aeabi_assert
         8   -> __iar_EmptyStepPoint
       8   uart_get_status
         8   -> __aeabi_assert
         8   -> __iar_EmptyStepPoint
       0   uart_is_rx_ready
       0   uart_is_tx_empty
       0   uart_is_tx_ready
       0   uart_put_char
       0   uart_set_receiver_enabled
       0   uart_set_transmitter_enabled


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       8  ?Subroutine0
       8  ?Subroutine1
      72  ?_0
      20  ?_1
      68  uart_configure
       8  uart_disable_it
       8  uart_enable_it
      24  uart_get_char
      48  uart_get_masked_status
      40  uart_get_status
      12  uart_is_rx_ready
       8  uart_is_tx_empty
      12  uart_is_tx_ready
      20  uart_put_char
      12  uart_set_receiver_enabled
      16  uart_set_transmitter_enabled

 
  72 bytes in section .rodata
 316 bytes in section SOFTPACK
 
 316 bytes of CODE  memory
  72 bytes of CONST memory

Errors: none
Warnings: none
