###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.1.245/W32 for ARM         29/Oct/2020  16:00:31
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode                    
#    Endian                   =  little
#    Source file              =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\main.c
#    Command line             =
#        -f C:\Users\c40450\AppData\Local\Temp\EW1F3A.tmp
#        (C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\main.c
#        -D "SOFTPACK_VERSION=\"2.17\"" -D TRACE_LEVEL=5 -D VARIANT_QSPI1 -D
#        CONFIG_ARCH_ARMV7A -D CONFIG_ARCH_ARM -D CONFIG_SOC_SAMA5D2 -D
#        CONFIG_CHIP_SAMA5D27 -D CONFIG_PACKAGE_289PIN -D
#        CONFIG_BOARD_SAMA5D27_SOM1_EK -D CONFIG_HAVE_AIC5 -D
#        CONFIG_HAVE_FLEXCOM -D CONFIG_HAVE_PIO4 -D CONFIG_HAVE_PIO4_SECURE -D
#        CONFIG_HAVE_NFC -D CONFIG_HAVE_PIT -D CONFIG_HAVE_SMC -D
#        CONFIG_HAVE_SMC_SCRAMBLING -D CONFIG_HAVE_GMAC_QUEUES -D
#        CONFIG_HAVE_MPDDRC -D CONFIG_HAVE_MPDDRC_DATA_PATH -D
#        CONFIG_HAVE_MPDDRC_IO_CALIBRATION -D CONFIG_HAVE_MPDDRC_DDR2 -D
#        CONFIG_HAVE_MPDDRC_LPDDR2 -D CONFIG_HAVE_MPDDRC_DDR3 -D
#        CONFIG_HAVE_MPDDRC_LPDDR3 -D CONFIG_HAVE_ADC_SETTLING_TIME -D
#        CONFIG_HAVE_ADC_DIFF_INPUT -D CONFIG_HAVE_ADC_SEQ_R2 -D
#        CONFIG_HAVE_PMC_FAST_STARTUP -D CONFIG_HAVE_PMC_GENERATED_CLOCKS -D
#        CONFIG_HAVE_PMC_AUDIO_CLOCK -D CONFIG_HAVE_PMC_PLLADIV2 -D
#        CONFIG_HAVE_PMC_H32MXDIV -D CONFIG_HAVE_PMC_UPLL_BIAS -D
#        CONFIG_HAVE_SCKC -D CONFIG_HAVE_PWMC_DMA -D
#        CONFIG_HAVE_PWMC_SPREAD_SPECTRUM -D CONFIG_HAVE_PWMC_EXTERNAL_TRIGGER
#        -D CONFIG_HAVE_PWMC_FAULT_PROT_HIZ -D CONFIG_HAVE_PWMC_STEPPER_MOTOR
#        -D CONFIG_HAVE_PWMC_CMP_UNIT -D CONFIG_HAVE_PWMC_SYNC_MODE -D
#        CONFIG_HAVE_PWMC_OOV -D CONFIG_HAVE_PWMC_FMODE -D CONFIG_HAVE_PWMC_WP
#        -D CONFIG_HAVE_PWMC_DTIME -D CONFIG_HAVE_PWMC_ELINE -D
#        CONFIG_HAVE_SFRBU -D CONFIG_HAVE_L2CC -D CONFIG_HAVE_SAIC -D
#        CONFIG_HAVE_XDMAC -D CONFIG_HAVE_XDMAC_DATA_WIDTH_DWORD -D
#        CONFIG_HAVE_SECUMOD -D CONFIG_HAVE_SFC -D CONFIG_HAVE_PWMC -D
#        CONFIG_HAVE_SECURE_MATRIX -D CONFIG_HAVE_DDR2_W971GG6SB -D
#        CONFIG_HAVE_RSTC_CONFIGURABLE_USER_RESET -D CONFIG_HAVE_TC_FAULT_MODE
#        -D CONFIG_HAVE_TC_DMA_MODE -D CONFIG_HAVE_RTC_CALIBRATION -D
#        CONFIG_HAVE_RTC_MODE_PERSIAN -D CONFIG_HAVE_RTC_MODE_UTC -D
#        CONFIG_HAVE_RTC_TAMPER -D CONFIG_HAVE_SHDWC -D CONFIG_HAVE_LED -D
#        CONFIG_HAVE_MMU -D CONFIG_HAVE_L1CACHE -D CONFIG_HAVE_L2CACHE -D
#        CONFIG_HAVE_UART -D CONFIG_HAVE_SERIALD_UART -D CONFIG_HAVE_USART -D
#        CONFIG_HAVE_USART_FIFO --preprocess
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\build\sama5d27-som1-ek\qspi1\List
#        -lC
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\build\sama5d27-som1-ek\qspi1\List
#        --diag_suppress Pa050 -o
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\build\sama5d27-som1-ek\qspi1\Obj
#        --debug --endian=little --cpu=Cortex-A5 -e --fpu=VFPv4_D16
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\arch\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\utils\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\target\common\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\target\sama5d2\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\drivers\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\lib\
#        --section .text=SOFTPACK --cpu_mode arm -Oh)
#    Locale                   =  C
#    List file                =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\build\sama5d27-som1-ek\qspi1\List\main.lst
#    Object file              =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\build\sama5d27-som1-ek\qspi1\Obj\main.o
#    Runtime model:              
#      __SystemLibrary        =  DLib
#      __dlib_file_descriptor =  0
#      __dlib_version         =  6
#      __iar_require _Printf  =  int_specials
#
###############################################################################

C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\main.c
      1          /* ----------------------------------------------------------------------------
      2           *         SAM Software Package License
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2015, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          /**
     31           *  \page getting-started Getting Started with sama5d4x Microcontrollers
     32           *
     33           *  \section Purpose
     34           *
     35           *  The Getting Started example will help new users get familiar with Atmel's
     36           *  sama5d4x microcontroller. This basic application shows the startup
     37           *  sequence of a chip and how to use its core peripherals.
     38           *
     39           *  \section Requirements
     40           *
     41           *  This package can be used with SAMA5D4-EK and SAMA5D4-XULT.
     42           *
     43           *  \section Description
     44           *
     45           *  The demonstration program makes two LEDs on the board blink at a fixed rate.
     46           *  This rate is generated by using Time tick timer. The blinking can be stopped
     47           *  using two buttons (one for each LED). If there is no enough buttons on board, please
     48           *  type "1" or "2" in the terminal application on PC to control the LEDs
     49           *  instead.
     50           *
     51           *  \section Usage
     52           *
     53           *  -# Build the program and download it inside the evaluation board. Please
     54           *     refer to the
     55           *     <a href="http://www.atmel.com/dyn/resources/prod_documents/6421B.pdf">
     56           *     SAM-BA User Guide</a>, the
     57           *     <a href="http://www.atmel.com/dyn/resources/prod_documents/doc6310.pdf">
     58           *     GNU-Based Software Development</a>
     59           *     application note or to the
     60           *     <a href="ftp://ftp.iar.se/WWWfiles/arm/Guides/EWARM_UserGuide.ENU.pdf">
     61           *     IAR EWARM User Guide</a>,
     62           *     depending on your chosen solution.
     63           *  -# On the computer, open and configure a terminal application
     64           *     (e.g. HyperTerminal on Microsoft Windows) with these settings:
     65           *    - 115200 bauds
     66           *    - 8 bits of data
     67           *    - No parity
     68           *    - 1 stop bit
     69           *    - No flow control
     70           *  -# Start the application.
     71           *  -# Two LEDs should start blinking on the board. In the terminal window, the
     72           *     following text should appear (values depend on the board and chip used):
     73           *     \code
     74           *      -- Getting Started Example xxx --
     75           *      -- SAMxxxxx-xx
     76           *      -- Compiled: xxx xx xxxx xx:xx:xx --
     77           *     \endcode
     78           *  -# Pressing and release button 1 or type "1" in the terminal application on
     79           *     PC should make the first LED stop & restart blinking.
     80           *     Pressing and release button 2 or type "2" in the terminal application on
     81           *     PC should make the other LED stop & restart blinking.
     82           *
     83           *  \section References
     84           *  - getting-started/main.c
     85           *  - pio.h
     86           *  - pio_it.h
     87           *  - led.h
     88           *  - trace.h
     89           */
     90          
     91          /** \file
     92           *
     93           *  This file contains all the specific code for the getting-started example.
     94           *
     95           */
     96          
     97          /*----------------------------------------------------------------------------
     98           *        Headers
     99           *----------------------------------------------------------------------------*/
    100          
    101          #include "board.h"
    102          #include "chip.h"
    103          #include "trace.h"
    104          #include "compiler.h"
    105          #include "timer.h"
    106          
    107          #include "irq/irq.h"
    108          #include "gpio/pio.h"
    109          #include "peripherals/pmc.h"
    110          #include "peripherals/tcd.h"
    111          
    112          #include "serial/console.h"
    113          #include "led/led.h"
    114          
    115          
    116          #include <stdbool.h>
    117          #include <stdio.h>
    118          
    119          /*----------------------------------------------------------------------------
    120           *        Local definitions
    121           *----------------------------------------------------------------------------*/
    122          
    123          /** Delay for pushbutton debouncing (in milliseconds). */
    124          #define DEBOUNCE_TIME       500
    125          
    126          struct _tcd_desc tc = {
    127          	.addr = TC0,
    128          	.channel = 0,
    129          };
    130          
    131          /*----------------------------------------------------------------------------
    132           *        Local variables
    133           *----------------------------------------------------------------------------*/
    134          
    135          
    136          #ifdef PINS_PUSHBUTTONS
    137          /** Pushbutton \#1 pin instance. */

   \                                 In section SOFTPACK, align 4, keep-with-next
    138          static const struct _pin button_pins[] = PINS_PUSHBUTTONS;
   \                     button_pins:
   \        0x0   0x00 0x00          DC8 0, 0, 0, 0

   \              0x00 0x00
   \        0x4   0x2000'0000        DC32 536'870'912
   \        0x8   0x07 0x00          DC8 7, 0, 0, 0

   \              0x00 0x00
   \        0xC   0x0000'0011        DC32 17

   \                                 In section .data, align 4
    139          #endif
    140          
    141          volatile bool led_status[NUM_LEDS];
   \                     led_status:
   \        0x0   0x00 0x00          DC8 0, 0, 0, 0

   \              0x00 0x00
   \                     tc:
   \        0x4   0xF800'C000        DC32 0xf800'c000
   \        0x8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00
   \       0x19   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00
   \       0x29   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00
    142          
    143          /*----------------------------------------------------------------------------
    144           *        Local functions
    145           *----------------------------------------------------------------------------*/
    146          
    147          /**
    148           *  \brief Process Buttons Events
    149           *
    150           *  Change active states of LEDs when corresponding button events happened.
    151           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    152          static void process_button_evt(uint8_t bt)
    153          {
    154          	if (bt >= NUM_LEDS) {
   \                     process_button_evt:
   \        0x0   0xE350'0003        CMP      R0,#+3
   \        0x4   0xAA00'000F        BGE      ??process_button_evt_0
    155          		return;
    156          	}
    157          	led_status[bt] = !led_status[bt];
   \        0x8   0x....'....        LDR      R2,??DataTable9_2
   \        0xC   0xE7D2'3000        LDRB     R3,[R2, +R0]
   \       0x10   0xE353'0000        CMP      R3,#+0
   \       0x14   0x03A0'3001        MOVEQ    R3,#+1
   \       0x18   0x13A0'3000        MOVNE    R3,#+0
   \       0x1C   0xE7C2'3000        STRB     R3,[R2, +R0]
    158          	if (bt == 0) {
   \       0x20   0xE1B0'3000        MOVS     R3,R0
   \       0x24   0x1A00'0003        BNE      ??process_button_evt_1
    159          		if (!led_status[bt]) {
   \       0x28   0xE5D2'0000        LDRB     R0,[R2, #+0]
   \       0x2C   0xE350'0000        CMP      R0,#+0
   \       0x30   0x1A00'0004        BNE      ??process_button_evt_0
    160          			led_clear(bt);
   \       0x34   0x....'....        B        led_clear        ;; tailcall
    161          		}
    162          	} else if (bt < NUM_LEDS) {
    163          		if (led_status[bt]) {
   \                     ??process_button_evt_1:
   \       0x38   0xE7D2'1000        LDRB     R1,[R2, +R0]
   \       0x3C   0xE351'0000        CMP      R1,#+0
    164          			led_set(bt);
   \       0x40   0x....'....        BNE      led_set          ;; tailcall
    165          		} else {
    166          			led_clear(bt);
   \       0x44   0x....'....        B        led_clear        ;; tailcall
    167          		}
    168          	}
    169          }
   \                     ??process_button_evt_0:
   \       0x48   0xE12F'FF1E        BX       LR               ;; return
    170          
    171          #ifdef PINS_PUSHBUTTONS
    172          
    173          /**
    174           *  \brief Handler for Buttons rising edge interrupt.
    175           *
    176           *  Handle process led1 status change.
    177           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    178          static void pio_handler(uint32_t group, uint32_t status, void* user_arg)
    179          {
    180          	int i;
    181          
    182          	/* unused */
    183          	(void)user_arg;
    184          
    185          	for (i = 0; i < ARRAY_SIZE(button_pins); ++i) {
    186          		if (group != button_pins[i].group)
   \                     pio_handler:
   \        0x0   0xE350'0000        CMP      R0,#+0
   \        0x4   0x1A00'000A        BNE      ??pio_handler_0
    187          			continue;
    188          		if (status & button_pins[i].mask)
   \        0x8   0xE311'0580        TST      R1,#0x20000000
   \        0xC   0x0A00'0008        BEQ      ??pio_handler_0
    189          			process_button_evt(i);
   \       0x10   0x....'....        LDR      R0,??DataTable9_2
   \       0x14   0xE5D0'1000        LDRB     R1,[R0, #+0]
   \       0x18   0xE351'0000        CMP      R1,#+0
   \       0x1C   0x03A0'1001        MOVEQ    R1,#+1
   \       0x20   0x13A0'1000        MOVNE    R1,#+0
   \       0x24   0xE5C0'1000        STRB     R1,[R0, #+0]
   \       0x28   0xE5D0'0000        LDRB     R0,[R0, #+0]
   \       0x2C   0xE350'0000        CMP      R0,#+0
   \       0x30   0x....'....        BEQ      led_clear        ;; tailcall
    190          	}
    191          }
   \                     ??pio_handler_0:
   \       0x34   0xE12F'FF1E        BX       LR               ;; return
    192          
    193          /**
    194           *  \brief Configure the Pushbuttons
    195           *
    196           *  Configure the PIO as inputs and generate corresponding interrupt when
    197           *  pressed or released.
    198           */
    199          static void configure_buttons(void)
    200          {
    201          	/* Adjust debounce filter parameters, use 10 Hz filter */
    202          	pio_set_debounce_filter(10);
    203          
    204          	int i = 0;
    205          	for (i = 0; i < ARRAY_SIZE(button_pins); ++i)
    206          	{
    207          		/* Configure PIO */
    208          		pio_configure(&button_pins[i], 1);
    209          
    210          		/* Initialize interrupt with its handlers */
    211          		pio_add_handler_to_group(button_pins[i].group,
    212          				      button_pins[i].mask, pio_handler, NULL);
    213          
    214          		/* Enable interrupts */
    215          		pio_enable_it(button_pins);
    216          	}
    217          }
    218          
    219          #endif /* PINS_PUSHBUTTONS */
    220          
    221          #if NUM_LEDS > 1
    222          /**
    223           *  Interrupt handler for TC interrupt. Toggles the state of all LEDs except 0
    224           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    225          static int _tc_handler(void* arg, void* arg2)
    226          {
   \                     _tc_handler:
   \        0x0   0xE92D'4038        PUSH     {R3-R5,LR}
    227          	int i;
    228          
    229          	/** Toggle LEDs state. */
    230          	for (i = 1; i < NUM_LEDS; ++i) {
   \        0x4   0x....'....        LDR      R5,??DataTable9_2
   \        0x8   0x....'....        ADR      R4,??DataTable9  ;; "%i "
    231          		if (led_status[i]) {
   \        0xC   0xE5D5'1001        LDRB     R1,[R5, #+1]
   \       0x10   0xE351'0000        CMP      R1,#+0
   \       0x14   0x0A00'0004        BEQ      ??_tc_handler_0
    232          			led_toggle(i);
   \       0x18   0xE3A0'0001        MOV      R0,#+1
   \       0x1C   0x....'....        BL       led_toggle
    233          			printf("%i ", (unsigned int)i);
   \       0x20   0xE3A0'1001        MOV      R1,#+1
   \       0x24   0xE1A0'0004        MOV      R0,R4
   \       0x28   0x....'....        BL       printf
   \                     ??_tc_handler_0:
   \       0x2C   0xE5D5'0002        LDRB     R0,[R5, #+2]
   \       0x30   0xE350'0000        CMP      R0,#+0
   \       0x34   0x0A00'0005        BEQ      ??_tc_handler_1
   \       0x38   0xE3A0'0002        MOV      R0,#+2
   \       0x3C   0x....'....        BL       led_toggle
   \       0x40   0xE3A0'1002        MOV      R1,#+2
   \       0x44   0xE1A0'0004        MOV      R0,R4
   \       0x48   0x....'....        BL       printf
    234          		}
    235          	}
    236          
    237          	return 0;
   \       0x4C   0xE3A0'0000        MOV      R0,#+0
   \                     ??_tc_handler_1:
   \       0x50   0xE8BD'8032        POP      {R1,R4,R5,PC}    ;; return
    238          }
    239          
    240          #endif /* NUM_LEDS > 1 */
    241          
    242          /**
    243           *  \brief Handler for DBGU input.
    244           *
    245           *  Handle process LED1 or LED2 status change.
    246           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    247          static void console_handler(uint8_t key)
    248          {
   \                     console_handler:
   \        0x0   0xE92D'5C00        PUSH     {R10-R12,LR}
    249          	if (key >= '0' && key <= '9') {
   \        0x4   0xE240'1030        SUB      R1,R0,#+48
   \        0x8   0xE351'000A        CMP      R1,#+10
   \        0xC   0x2A00'0003        BCS      ??console_handler_0
    250          		process_button_evt(key - '0');
   \       0x10   0xE240'0030        SUB      R0,R0,#+48
   \       0x14   0xE6EF'0070        UXTB     R0,R0
   \       0x18   0x....'....        BL       process_button_evt
    251          	}
    252          #if NUM_LEDS > 1
    253          	else if (key == 's') {
    254          		tcd_stop(&tc);
    255          	} else if (key == 'b') {
    256          		struct _callback _cb;
    257          
    258          		callback_set(&_cb, _tc_handler, NULL);
    259          		tcd_start(&tc, &_cb);
    260          	}
    261          #endif
    262          }
   \       0x1C   0x....'....        B        ?Subroutine0
   \                     ??console_handler_0:
   \       0x20   0xE350'0073        CMP      R0,#+115
   \       0x24   0x1A00'0002        BNE      ??console_handler_1
   \       0x28   0x....'....        LDR      R0,??DataTable9_3
   \       0x2C   0x....'....        BL       tcd_stop
   \       0x30   0x....'....        B        ?Subroutine0
   \                     ??console_handler_1:
   \       0x34   0xE350'0062        CMP      R0,#+98
   \       0x38   0x1A00'0006        BNE      ??console_handler_2
   \       0x3C   0xE3A0'2000        MOV      R2,#+0
   \       0x40   0x....'....        ADR      R1,_tc_handler
   \       0x44   0xE1A0'000D        MOV      R0,SP
   \       0x48   0x....'....        BL       callback_set
   \       0x4C   0xE1A0'100D        MOV      R1,SP
   \       0x50   0x....'....        LDR      R0,??DataTable9_3
   \       0x54   0x....'....        BL       tcd_start
   \                     ??console_handler_2:
   \       0x58                      REQUIRE ?Subroutine0
   \       0x58                      ;; // Fall through to label ?Subroutine0

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ?Subroutine0:
   \        0x0   0xE28D'D00C        ADD      SP,SP,#+12
   \        0x4   0xE8BD'8000        POP      {PC}             ;; return
    263          
    264          /*----------------------------------------------------------------------------
    265           *        Global functions
    266           *----------------------------------------------------------------------------*/
    267          
    268          /**
    269           *  \brief getting-started Application entry point.
    270           *
    271           *  \return Unused (ANSI-C compatibility).
    272           */

   \                                 In section SOFTPACK, align 4, keep-with-next
    273          int main(void)
    274          {
   \                     main:
   \        0x0   0xE92D'4070        PUSH     {R4-R6,LR}
    275          	int i = 0;
    276          // none of these are
    277          
    278          	led_status[0] = true;
   \        0x4   0x....'....        LDR      R4,??DataTable9_2
   \        0x8   0xE3A0'0001        MOV      R0,#+1
    279          	for (i = 1; i < NUM_LEDS; ++i) {
    280          		led_status[i] = led_status[i-1];
    281          	}
    282          
    283          	console_example_info("Getting Started Example");
   \        0xC   0x....'....        LDR      R5,??DataTable9_4
   \       0x10   0xE5C4'0000        STRB     R0,[R4, #+0]
   \       0x14   0xE5D4'1000        LDRB     R1,[R4, #+0]
   \       0x18   0x....'....        ADR      R0,?_7
   \       0x1C   0x....'....        ADR      R6,button_pins
   \       0x20   0xE5C4'1001        STRB     R1,[R4, #+1]
   \       0x24   0xE5D4'2001        LDRB     R2,[R4, #+1]
   \       0x28   0xE5C4'2002        STRB     R2,[R4, #+2]
   \       0x2C   0x....'....        BL       console_example_info
    284          
    285          	printf("Initializing console interrupts\r\n");
   \       0x30   0xE1A0'0005        MOV      R0,R5
   \       0x34   0x....'....        BL       printf
    286          	console_set_rx_handler(console_handler);
   \       0x38   0x....'....        ADR      R0,console_handler
   \       0x3C   0x....'....        BL       console_set_rx_handler
    287          	console_enable_rx_interrupt();
   \       0x40   0x....'....        BL       console_enable_rx_interrupt
    288          #ifdef PINS_PUSHBUTTONS
    289          	printf("Configure buttons with debouncing.\n\r");
   \       0x44   0xE285'0024        ADD      R0,R5,#+36
   \       0x48   0x....'....        BL       printf
    290          	configure_buttons();
   \       0x4C   0xE3A0'000A        MOV      R0,#+10
   \       0x50   0x....'....        BL       pio_set_debounce_filter
   \       0x54   0xE3A0'1001        MOV      R1,#+1
   \       0x58   0xE1A0'0006        MOV      R0,R6
   \       0x5C   0x....'....        BL       pio_configure
   \       0x60   0xE3A0'3000        MOV      R3,#+0
   \       0x64   0x....'....        ADR      R2,pio_handler
   \       0x68   0xE3A0'1580        MOV      R1,#+536870912
   \       0x6C   0xE3A0'0000        MOV      R0,#+0
   \       0x70   0x....'....        BL       pio_add_handler_to_group
   \       0x74   0xE1A0'0006        MOV      R0,R6
   \       0x78   0x....'....        BL       pio_enable_it
    291          	printf("Use push buttons or console key 0 to %d.\n\r", NUM_LEDS - 1);
   \       0x7C   0xE3A0'1002        MOV      R1,#+2
   \       0x80   0xE285'004C        ADD      R0,R5,#+76
   \       0x84   0x....'....        BL       printf
    292          #else
    293          	printf("Use console key 0 to %d.\n\r", NUM_LEDS - 1);
    294          #endif /* PINS_PUSHBUTTONS */
    295          
    296          	printf("Press the number of the led to make it "
    297          	       "start or stop blinking.\n\r");
   \       0x88   0xE285'0078        ADD      R0,R5,#+120
   \       0x8C   0x....'....        BL       printf
    298          
    299          	printf("LED 0 uses softpack timer functions\r\n");
   \       0x90   0xE285'00BC        ADD      R0,R5,#+188
   \       0x94   0x....'....        BL       printf
    300          
    301          #if NUM_LEDS > 1
    302          	/* Configure TC */
    303          #if NUM_LEDS == 2
    304          	printf("LED 1 uses a TC\r\n");
    305          #else
    306          	printf("LEDs 1-%d use a TC\r\n", NUM_LEDS - 1);
   \       0x98   0xE3A0'1002        MOV      R1,#+2
   \       0x9C   0x....'....        ADR      R0,?_8
   \       0xA0   0x....'....        BL       printf
    307          #endif
    308          	printf("Press 's' to stop the TC and 'b' to start it\r\n");
   \       0xA4   0xE285'00E4        ADD      R0,R5,#+228
   \       0xA8   0x....'....        BL       printf
    309          	tcd_configure_counter(&tc, 0, 4); /* 4Hz */
   \       0xAC   0xE3A0'2004        MOV      R2,#+4
   \       0xB0   0xE3A0'1000        MOV      R1,#+0
   \       0xB4   0xE284'0004        ADD      R0,R4,#+4
   \       0xB8   0x....'....        BL       tcd_configure_counter
   \       0xBC   0x....'....        ADR      R5,??DataTable9_1  ;; 0x30, 0x20, 0x00, 0x00
    310          #endif
    311          
    312          	while (1) {
    313          
    314          		/* Wait for LED to be active */
    315          		while (!led_status[0]);
   \                     ??main_0:
   \       0xC0   0xE5D4'0000        LDRB     R0,[R4, #+0]
   \       0xC4   0xE350'0000        CMP      R0,#+0
   \       0xC8   0x0AFF'FFFC        BEQ      ??main_0
    316          
    317          		/* Toggle LED state if active */
    318          		if (led_status[0]) {
   \       0xCC   0xE5D4'1000        LDRB     R1,[R4, #+0]
   \       0xD0   0xE351'0000        CMP      R1,#+0
   \       0xD4   0x0A00'0003        BEQ      ??main_1
    319          			led_toggle(0);
   \       0xD8   0xE3A0'0000        MOV      R0,#+0
   \       0xDC   0x....'....        BL       led_toggle
    320          			printf("0 ");
   \       0xE0   0xE1A0'0005        MOV      R0,R5
   \       0xE4   0x....'....        BL       printf
    321          		}
    322          
    323          		/* Wait for 250ms (4Hz) */
    324          		msleep(250);
   \                     ??main_1:
   \       0xE8   0xE3A0'00FA        MOV      R0,#+250
   \       0xEC   0x....'....        BL       msleep
   \       0xF0   0xEAFF'FFF2        B        ??main_0
    325          	}
    326          }

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable9:
   \        0x0   0x25 0x69          DC8      "%i "

   \              0x20 0x00

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable9_1:
   \        0x0   0x30 0x20          DC8      0x30, 0x20, 0x00, 0x00

   \              0x00 0x00

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable9_2:
   \        0x0   0x....'....        DC32     led_status

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable9_3:
   \        0x0   0x....'....        DC32     led_status+0x4

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable9_4:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ?_7:
   \        0x0   0x47 0x65          DC8 "Getting Started Example"

   \              0x74 0x74    

   \              0x69 0x6E    

   \              0x67 0x20    

   \              0x53 0x74    

   \              0x61 0x72    

   \              0x74 0x65    

   \              0x64 0x20    

   \              0x45 0x78    

   \              0x61 0x6D    

   \              0x70 0x6C    

   \              0x65 0x00

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x49 0x6E          DC8 "Initializing console interrupts\015\012"

   \              0x69 0x74    

   \              0x69 0x61    

   \              0x6C 0x69    

   \              0x7A 0x69    

   \              0x6E 0x67    

   \              0x20 0x63    

   \              0x6F 0x6E    

   \              0x73 0x6F    

   \              0x6C 0x65    

   \              0x20 0x69    

   \              0x6E 0x74    

   \              0x65 0x72    

   \              0x72 0x75    

   \              0x70 0x74    

   \              0x73 0x0D    

   \              0x0A 0x00
   \       0x22   0x00 0x00          DC8 0, 0
   \       0x24   0x43 0x6F          DC8 "Configure buttons with debouncing.\012\015"

   \              0x6E 0x66    

   \              0x69 0x67    

   \              0x75 0x72    

   \              0x65 0x20    

   \              0x62 0x75    

   \              0x74 0x74    

   \              0x6F 0x6E    

   \              0x73 0x20    

   \              0x77 0x69    

   \              0x74 0x68    

   \              0x20 0x64    

   \              0x65 0x62    

   \              0x6F 0x75    

   \              0x6E 0x63    

   \              0x69 0x6E    

   \              0x67 0x2E    

   \              0x0A 0x0D    

   \              0x00
   \       0x49   0x00 0x00          DC8 0, 0, 0

   \              0x00
   \       0x4C   0x55 0x73          DC8 "Use push buttons or console key 0 to %d.\012\015"

   \              0x65 0x20    

   \              0x70 0x75    

   \              0x73 0x68    

   \              0x20 0x62    

   \              0x75 0x74    

   \              0x74 0x6F    

   \              0x6E 0x73    

   \              0x20 0x6F    

   \              0x72 0x20    

   \              0x63 0x6F    

   \              0x6E 0x73    

   \              0x6F 0x6C    

   \              0x65 0x20    

   \              0x6B 0x65    

   \              0x79 0x20    

   \              0x30 0x20    

   \              0x74 0x6F    

   \              0x20 0x25    

   \              0x64 0x2E    

   \              0x0A 0x0D    

   \              0x00
   \       0x77   0x00               DC8 0
   \       0x78   0x50 0x72          DC8 0x50, 0x72, 0x65, 0x73, 0x73, 0x20, 0x74, 0x68

   \              0x65 0x73    

   \              0x73 0x20    

   \              0x74 0x68
   \       0x80   0x65 0x20          DC8 0x65, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72

   \              0x6E 0x75    

   \              0x6D 0x62    

   \              0x65 0x72
   \       0x88   0x20 0x6F          DC8 0x20, 0x6F, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20

   \              0x66 0x20    

   \              0x74 0x68    

   \              0x65 0x20
   \       0x90   0x6C 0x65          DC8 0x6C, 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x6D

   \              0x64 0x20    

   \              0x74 0x6F    

   \              0x20 0x6D
   \       0x98   0x61 0x6B          DC8 0x61, 0x6B, 0x65, 0x20, 0x69, 0x74, 0x20, 0x73

   \              0x65 0x20    

   \              0x69 0x74    

   \              0x20 0x73
   \       0xA0   0x74 0x61          DC8 0x74, 0x61, 0x72, 0x74, 0x20, 0x6F, 0x72, 0x20

   \              0x72 0x74    

   \              0x20 0x6F    

   \              0x72 0x20
   \       0xA8   0x73 0x74          DC8 0x73, 0x74, 0x6F, 0x70, 0x20, 0x62, 0x6C, 0x69

   \              0x6F 0x70    

   \              0x20 0x62    

   \              0x6C 0x69
   \       0xB0   0x6E 0x6B          DC8 0x6E, 0x6B, 0x69, 0x6E, 0x67, 0x2E, 0x0A, 0x0D

   \              0x69 0x6E    

   \              0x67 0x2E    

   \              0x0A 0x0D
   \       0xB8   0x00               DC8 0
   \       0xB9   0x00 0x00          DC8 0, 0, 0

   \              0x00
   \       0xBC   0x4C 0x45          DC8 "LED 0 uses softpack timer functions\015\012"

   \              0x44 0x20    

   \              0x30 0x20    

   \              0x75 0x73    

   \              0x65 0x73    

   \              0x20 0x73    

   \              0x6F 0x66    

   \              0x74 0x70    

   \              0x61 0x63    

   \              0x6B 0x20    

   \              0x74 0x69    

   \              0x6D 0x65    

   \              0x72 0x20    

   \              0x66 0x75    

   \              0x6E 0x63    

   \              0x74 0x69    

   \              0x6F 0x6E    

   \              0x73 0x0D    

   \              0x0A 0x00
   \       0xE2   0x00 0x00          DC8 0, 0
   \       0xE4   0x50 0x72          DC8 "Press 's' to stop the TC and 'b' to start it\015\012"

   \              0x65 0x73    

   \              0x73 0x20    

   \              0x27 0x73    

   \              0x27 0x20    

   \              0x74 0x6F    

   \              0x20 0x73    

   \              0x74 0x6F    

   \              0x70 0x20    

   \              0x74 0x68    

   \              0x65 0x20    

   \              0x54 0x43    

   \              0x20 0x61    

   \              0x6E 0x64    

   \              0x20 0x27    

   \              0x62 0x27    

   \              0x20 0x74    

   \              0x6F 0x20    

   \              0x73 0x74    

   \              0x61 0x72    

   \              0x74 0x20    

   \              0x69 0x74    

   \              0x0D 0x0A    

   \              0x00
   \      0x113   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_6:
   \        0x0   0x25 0x69          DC8 "%i "

   \              0x20 0x00

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_9:
   \        0x0   0x30 0x20          DC8 "0 "

   \              0x00
   \        0x3   0x00               DC8 0

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ?_8:
   \        0x0   0x4C 0x45          DC8 "LEDs 1-%d use a TC\015\012"

   \              0x44 0x73    

   \              0x20 0x31    

   \              0x2D 0x25    

   \              0x64 0x20    

   \              0x75 0x73    

   \              0x65 0x20    

   \              0x61 0x20    

   \              0x54 0x43    

   \              0x0D 0x0A    

   \              0x00
   \       0x15   0x00 0x00          DC8 0, 0, 0

   \              0x00

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   _tc_handler
        16   -> led_toggle
        16   -> printf
      16   console_handler
        16   -> callback_set
        16   -> process_button_evt
        16   -> tcd_start
        16   -> tcd_stop
      16   main
        16   -> console_enable_rx_interrupt
        16   -> console_example_info
        16   -> console_set_rx_handler
        16   -> led_toggle
        16   -> msleep
        16   -> pio_add_handler_to_group
        16   -> pio_configure
        16   -> pio_enable_it
        16   -> pio_set_debounce_filter
        16   -> printf
        16   -> tcd_configure_counter
       0   pio_handler
         0   -> led_clear
       0   process_button_evt
         0   -> led_clear
         0   -> led_set


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       8  ?Subroutine0
     276  ?_0
       4  ?_6
      24  ?_7
      24  ?_8
       4  ?_9
      84  _tc_handler
      16  button_pins
      88  console_handler
      56  led_status
          tc
     244  main
      56  pio_handler
      76  process_button_evt

 
  56 bytes in section .data
 284 bytes in section .rodata
 640 bytes in section SOFTPACK
 
 640 bytes of CODE  memory
 284 bytes of CONST memory
  56 bytes of DATA  memory

Errors: none
Warnings: none
