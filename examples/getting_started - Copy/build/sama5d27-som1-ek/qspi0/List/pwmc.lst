###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.1.245/W32 for ARM         29/Oct/2020  16:00:15
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode                    
#    Endian                   =  little
#    Source file              =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\peripherals\pwmc.c
#    Command line             =
#        -f C:\Users\c40450\AppData\Local\Temp\EWDE3C.tmp
#        (C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\peripherals\pwmc.c
#        -D "SOFTPACK_VERSION=\"2.17\"" -D TRACE_LEVEL=5 -D VARIANT_QSPI0 -D
#        CONFIG_ARCH_ARMV7A -D CONFIG_ARCH_ARM -D CONFIG_SOC_SAMA5D2 -D
#        CONFIG_CHIP_SAMA5D27 -D CONFIG_PACKAGE_289PIN -D
#        CONFIG_BOARD_SAMA5D27_SOM1_EK -D CONFIG_HAVE_AIC5 -D
#        CONFIG_HAVE_FLEXCOM -D CONFIG_HAVE_PIO4 -D CONFIG_HAVE_PIO4_SECURE -D
#        CONFIG_HAVE_NFC -D CONFIG_HAVE_PIT -D CONFIG_HAVE_SMC -D
#        CONFIG_HAVE_SMC_SCRAMBLING -D CONFIG_HAVE_GMAC_QUEUES -D
#        CONFIG_HAVE_MPDDRC -D CONFIG_HAVE_MPDDRC_DATA_PATH -D
#        CONFIG_HAVE_MPDDRC_IO_CALIBRATION -D CONFIG_HAVE_MPDDRC_DDR2 -D
#        CONFIG_HAVE_MPDDRC_LPDDR2 -D CONFIG_HAVE_MPDDRC_DDR3 -D
#        CONFIG_HAVE_MPDDRC_LPDDR3 -D CONFIG_HAVE_ADC_SETTLING_TIME -D
#        CONFIG_HAVE_ADC_DIFF_INPUT -D CONFIG_HAVE_ADC_SEQ_R2 -D
#        CONFIG_HAVE_PMC_FAST_STARTUP -D CONFIG_HAVE_PMC_GENERATED_CLOCKS -D
#        CONFIG_HAVE_PMC_AUDIO_CLOCK -D CONFIG_HAVE_PMC_PLLADIV2 -D
#        CONFIG_HAVE_PMC_H32MXDIV -D CONFIG_HAVE_PMC_UPLL_BIAS -D
#        CONFIG_HAVE_SCKC -D CONFIG_HAVE_PWMC_DMA -D
#        CONFIG_HAVE_PWMC_SPREAD_SPECTRUM -D CONFIG_HAVE_PWMC_EXTERNAL_TRIGGER
#        -D CONFIG_HAVE_PWMC_FAULT_PROT_HIZ -D CONFIG_HAVE_PWMC_STEPPER_MOTOR
#        -D CONFIG_HAVE_PWMC_CMP_UNIT -D CONFIG_HAVE_PWMC_SYNC_MODE -D
#        CONFIG_HAVE_PWMC_OOV -D CONFIG_HAVE_PWMC_FMODE -D CONFIG_HAVE_PWMC_WP
#        -D CONFIG_HAVE_PWMC_DTIME -D CONFIG_HAVE_PWMC_ELINE -D
#        CONFIG_HAVE_SFRBU -D CONFIG_HAVE_L2CC -D CONFIG_HAVE_SAIC -D
#        CONFIG_HAVE_XDMAC -D CONFIG_HAVE_XDMAC_DATA_WIDTH_DWORD -D
#        CONFIG_HAVE_SECUMOD -D CONFIG_HAVE_SFC -D CONFIG_HAVE_PWMC -D
#        CONFIG_HAVE_SECURE_MATRIX -D CONFIG_HAVE_DDR2_W971GG6SB -D
#        CONFIG_HAVE_RSTC_CONFIGURABLE_USER_RESET -D CONFIG_HAVE_TC_FAULT_MODE
#        -D CONFIG_HAVE_TC_DMA_MODE -D CONFIG_HAVE_RTC_CALIBRATION -D
#        CONFIG_HAVE_RTC_MODE_PERSIAN -D CONFIG_HAVE_RTC_MODE_UTC -D
#        CONFIG_HAVE_RTC_TAMPER -D CONFIG_HAVE_SHDWC -D CONFIG_HAVE_LED -D
#        CONFIG_HAVE_MMU -D CONFIG_HAVE_L1CACHE -D CONFIG_HAVE_L2CACHE -D
#        CONFIG_HAVE_UART -D CONFIG_HAVE_SERIALD_UART -D CONFIG_HAVE_USART -D
#        CONFIG_HAVE_USART_FIFO --preprocess
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\build\sama5d27-som1-ek\qspi0\List
#        -lC
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\build\sama5d27-som1-ek\qspi0\List
#        --diag_suppress Pa050 -o
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\build\sama5d27-som1-ek\qspi0\Obj
#        --debug --endian=little --cpu=Cortex-A5 -e --fpu=VFPv4_D16
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\arch\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\utils\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\target\common\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\target\sama5d2\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\drivers\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\lib\
#        --section .text=SOFTPACK --cpu_mode arm -Oh)
#    Locale                   =  C
#    List file                =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\build\sama5d27-som1-ek\qspi0\List\pwmc.lst
#    Object file              =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\build\sama5d27-som1-ek\qspi0\Obj\pwmc.o
#    Runtime model:              
#      __SystemLibrary        =  DLib
#      __dlib_file_descriptor =  0
#      __dlib_version         =  6
#      __iar_require _Printf  =  flags,int_specials,widths
#
###############################################################################

C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\peripherals\pwmc.c
      1          /* ----------------------------------------------------------------------------
      2           *         SAM Software Package License
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2016, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          /** \addtogroup pwm_module Working with PWM
     31           * \section Purpose
     32           * The PWM driver provides the interface to configure and use the PWM
     33           * peripheral.
     34           *
     35           * The PWM macrocell controls square output waveforms of 4 channels.
     36           * Characteristics of output waveforms such as period, duty-cycle can be configured.\n
     37           *
     38           * Before enabling the channels, they must have been configured first.
     39           * The main settings include:
     40           * <ul>
     41           * <li>Configuration of the clock generator.</li>
     42           * <li>Selection of the clock for each channel.</li>
     43           * <li>Configuration of output waveform characteristics, such as period, duty-cycle etc.</li>
     44           * </ul>
     45           *
     46           * After the channels is enabled, the user must use respective update registers
     47           * to change the wave characteristics to prevent unexpected output waveform.
     48           * i.e. PWM_CUPDx register should be used if user want to change duty-cycle
     49           * when the channel is enabled.
     50           *
     51           * \section Usage
     52           * <ul>
     53           * <li>  Configure PWM clock using pwmc_configure_clocks().
     54           * <li>  Enable & disable given PWM channel using pwmc_enable_channel() and pwmc_disable_channel().
     55           * <li>  Enable & disable interrupt of given PWM channel using pwmc_enable_channel_it()
     56           * and pwmc_disable_channel_it().
     57           * <li>  Set feature of the given PWM channel's output signal using pwmc_set_period()
     58           * and pwmc_set_duty_cycle().
     59           * </li>
     60           * </ul>
     61           *
     62           * For more accurate information, please look at the PWM section of the
     63           * Datasheet.
     64           *
     65           * Related files :\n
     66           * \ref pwmc.c\n
     67           * \ref pwmc.h.\n
     68           */
     69          /*@{*/
     70          /*@}*/
     71          
     72          /**
     73           * \file
     74           *
     75           * Implementation of the Pulse Width Modulation Controller (PWM) peripheral.
     76           *
     77           */
     78          
     79          /*----------------------------------------------------------------------------
     80           *        Headers
     81           *----------------------------------------------------------------------------*/
     82          
     83          #include <assert.h>
     84          #include <stdint.h>
     85          #include <string.h>
     86          
     87          #include "callback.h"
     88          #include "chip.h"
     89          #include "dma/dma.h"
     90          #include "mm/cache.h"
     91          #include "peripherals/pwmc.h"
     92          #include "trace.h"
     93          
     94          /*----------------------------------------------------------------------------
     95           *        Local variables
     96           *----------------------------------------------------------------------------*/
     97          
     98          #ifdef CONFIG_HAVE_PWMC_DMA

   \                                 In section .bss, align 4
     99          static struct _dma_channel* pwm_dma_channel = NULL;
   \                     pwm_dma_channel:
   \        0x0                      DS8 4
   \        0x4                      DS8 8
    100          static struct _callback pwmc_cb;
    101          #endif /* CONFIG_HAVE_PWMC_DMA */
    102          
    103          /*----------------------------------------------------------------------------
    104           *        Exported functions
    105           *----------------------------------------------------------------------------*/
    106          

   \                                 In section SOFTPACK, align 4, keep-with-next
    107          void pwmc_configure_clocks(Pwm *pwm, uint32_t mode)
    108          {
    109          	pwm->PWM_CLK = mode;
   \                     pwmc_configure_clocks:
   \        0x0   0xE580'1000        STR      R1,[R0, #+0]
    110          }
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
    111          

   \                                 In section SOFTPACK, align 4, keep-with-next
    112          void pwmc_enable_channel(Pwm *pwm, uint8_t channel)
    113          {
    114          	pwm->PWM_ENA = 0x1ul << channel;
   \                     pwmc_enable_channel:
   \        0x0   0xE3A0'2001        MOV      R2,#+1
   \        0x4   0xE1A0'1112        LSL      R1,R2,R1
   \        0x8   0xE580'1004        STR      R1,[R0, #+4]
    115          }
   \        0xC   0xE12F'FF1E        BX       LR               ;; return
    116          

   \                                 In section SOFTPACK, align 4, keep-with-next
    117          void pwmc_disable_channel(Pwm *pwm, uint8_t channel)
    118          {
    119          	pwm->PWM_DIS = 0x1ul << channel;
   \                     pwmc_disable_channel:
   \        0x0   0xE3A0'2001        MOV      R2,#+1
   \        0x4   0xE1A0'1112        LSL      R1,R2,R1
   \        0x8   0xE580'1008        STR      R1,[R0, #+8]
    120          }
   \        0xC   0xE12F'FF1E        BX       LR               ;; return
    121          

   \                                 In section SOFTPACK, align 4, keep-with-next
    122          void pwmc_enable_channel_it(Pwm *pwm, uint8_t channel)
    123          {
    124          	pwm->PWM_IER1 = 0x1ul << channel;
   \                     pwmc_enable_channel_it:
   \        0x0   0xE3A0'2001        MOV      R2,#+1
   \        0x4   0xE1A0'1112        LSL      R1,R2,R1
   \        0x8   0xE580'1010        STR      R1,[R0, #+16]
    125          }
   \        0xC   0xE12F'FF1E        BX       LR               ;; return
    126          

   \                                 In section SOFTPACK, align 4, keep-with-next
    127          void pwmc_disable_channel_it(Pwm *pwm, uint8_t channel)
    128          {
    129          	pwm->PWM_IDR1 = 0x1ul << channel;
   \                     pwmc_disable_channel_it:
   \        0x0   0xE3A0'2001        MOV      R2,#+1
   \        0x4   0xE1A0'1112        LSL      R1,R2,R1
   \        0x8   0xE580'1014        STR      R1,[R0, #+20]
    130          }
   \        0xC   0xE12F'FF1E        BX       LR               ;; return
    131          

   \                                 In section SOFTPACK, align 4, keep-with-next
    132          uint32_t pwmc_get_it_status1(Pwm *pwm)
    133          {
    134          	return pwm->PWM_ISR1;
   \                     pwmc_get_it_status1:
   \        0x0   0xE590'001C        LDR      R0,[R0, #+28]
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
    135          }
    136          

   \                                 In section SOFTPACK, align 4, keep-with-next
    137          void pwmc_enable_it(Pwm *pwm, uint32_t sources1, uint32_t sources2)
    138          {
    139          	pwm->PWM_IER1 = sources1;
   \                     pwmc_enable_it:
   \        0x0   0xE580'1010        STR      R1,[R0, #+16]
    140          #ifdef CONFIG_HAVE_PWMC_CMP_UNIT
    141          	pwm->PWM_IER2 = sources2;
   \        0x4   0xE580'2034        STR      R2,[R0, #+52]
    142          #endif
    143          }
   \        0x8   0xE12F'FF1E        BX       LR               ;; return
    144          

   \                                 In section SOFTPACK, align 4, keep-with-next
    145          void pwmc_disable_it(Pwm *pwm, uint32_t sources1, uint32_t sources2)
    146          {
    147          	pwm->PWM_IDR1 = sources1;
   \                     pwmc_disable_it:
   \        0x0   0xE580'1014        STR      R1,[R0, #+20]
    148          #ifdef CONFIG_HAVE_PWMC_CMP_UNIT
    149          	pwm->PWM_IDR2 = sources2;
   \        0x4   0xE580'2038        STR      R2,[R0, #+56]
    150          #endif
    151          }
   \        0x8   0xE12F'FF1E        BX       LR               ;; return
    152          
    153          #ifdef CONFIG_HAVE_PWMC_CMP_UNIT

   \                                 In section SOFTPACK, align 4, keep-with-next
    154          uint32_t pwmc_get_it_status2(Pwm *pwm)
    155          {
    156          	return pwm->PWM_ISR2;
   \                     pwmc_get_it_status2:
   \        0x0   0xE590'0040        LDR      R0,[R0, #+64]
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
    157          }
    158          

   \                                 In section SOFTPACK, align 4, keep-with-next
    159          void pwmc_configure_comparison_unit(Pwm *pwm, uint32_t x,
    160          		uint32_t value, uint32_t mode)
    161          {
   \                     pwmc_configure_comparison_unit:
   \        0x0   0xE92D'40F8        PUSH     {R3-R7,LR}
   \        0x4   0xE1A0'5001        MOV      R5,R1
   \        0x8   0xE1A0'4000        MOV      R4,R0
    162          	assert(x < 8);
   \        0xC   0xE355'0008        CMP      R5,#+8
   \       0x10   0xE1A0'6002        MOV      R6,R2
   \       0x14   0xE1A0'7003        MOV      R7,R3
   \       0x18   0x3A00'0004        BCC      ??pwmc_configure_comparison_unit_0
   \       0x1C   0xE3A0'20A2        MOV      R2,#+162
   \       0x20   0x....'....        LDR      R1,??DataTable24_2
   \       0x24   0x....'....        LDR      R0,??DataTable24_3
   \       0x28   0x....'....        BL       __aeabi_assert
   \       0x2C   0x....'....        BL       __iar_EmptyStepPoint
    163          
    164          	/* If channel is disabled, write to CMPxM & CMPxV */
    165          	if ((pwm->PWM_SR & (1 << 0)) == 0) {
   \                     ??pwmc_configure_comparison_unit_0:
   \       0x30   0xE594'100C        LDR      R1,[R4, #+12]
   \       0x34   0xE084'0205        ADD      R0,R4,R5, LSL #+4
   \       0x38   0xE311'0001        TST      R1,#0x1
    166          		pwm->PWM_CMP[x].PWM_CMPM = mode;
   \       0x3C   0x0580'7138        STREQ    R7,[R0, #+312]
    167          		pwm->PWM_CMP[x].PWM_CMPV = value;
   \       0x40   0x0580'6130        STREQ    R6,[R0, #+304]
    168          	} else {
    169          		/* Otherwise use update register */
    170          		pwm->PWM_CMP[x].PWM_CMPMUPD = mode;
   \       0x44   0x1580'713C        STRNE    R7,[R0, #+316]
    171          		pwm->PWM_CMP[x].PWM_CMPVUPD = value;
   \       0x48   0x1580'6134        STRNE    R6,[R0, #+308]
    172          	}
    173          }
   \       0x4C   0xE8BD'80F1        POP      {R0,R4-R7,PC}    ;; return
    174          
    175          #endif /* CONFIG_HAVE_PWMC_CMP_UNIT */
    176          

   \                                 In section SOFTPACK, align 4, keep-with-next
    177          void pwmc_configure_channel(Pwm *pwm, uint8_t channel, uint32_t mode)
    178          {
   \                     pwmc_configure_channel:
   \        0x0   0xE92D'40D0        PUSH     {R4,R6,R7,LR}
   \        0x4   0xE1A0'4001        MOV      R4,R1
   \        0x8   0xE1A0'6000        MOV      R6,R0
    179          	assert(channel < ARRAY_SIZE(pwm->PWM_CH));
   \        0xC   0xE354'0004        CMP      R4,#+4
   \       0x10   0xE1A0'7002        MOV      R7,R2
   \       0x14   0x3A00'0004        BCC      ??pwmc_configure_channel_0
   \       0x18   0x....'....        LDR      R1,??DataTable24_2
   \       0x1C   0xE3A0'20B3        MOV      R2,#+179
   \       0x20   0xE281'0050        ADD      R0,R1,#+80
   \       0x24   0x....'....        BL       __aeabi_assert
   \       0x28   0x....'....        BL       __iar_EmptyStepPoint
    180          
    181          	trace_debug("pwm: set channel %u with mode 0x%08x\n\r", \
    182          			(unsigned)channel, (unsigned)mode);
   \                     ??pwmc_configure_channel_0:
   \       0x2C   0x....'....        LDR      R0,??DataTable24_4
   \       0x30   0xE590'1000        LDR      R1,[R0, #+0]
   \       0x34   0xE351'0004        CMP      R1,#+4
   \       0x38   0x9A00'0003        BLS      ??pwmc_configure_channel_1
   \       0x3C   0xE1A0'2007        MOV      R2,R7
   \       0x40   0xE1A0'1004        MOV      R1,R4
   \       0x44   0x....'....        LDR      R0,??DataTable24_5
   \       0x48   0x....'....        BL       printf
    183          
    184          #ifdef PWM_CMUPD0_CPOLUP
    185          	if ((pwm->PWM_SR & (1 << channel)) == 0)
   \                     ??pwmc_configure_channel_1:
   \       0x4C   0xE596'000C        LDR      R0,[R6, #+12]
   \       0x50   0xE3A0'1001        MOV      R1,#+1
   \       0x54   0xE111'0430        TST      R1,R0, LSR R4
   \       0x58   0x1A00'0002        BNE      ??pwmc_configure_channel_2
    186          		pwm->PWM_CH[channel].PWM_CMR = mode;
   \       0x5C   0xE086'2284        ADD      R2,R6,R4, LSL #+5
   \       0x60   0xE582'7200        STR      R7,[R2, #+512]
   \       0x64   0xE8BD'80D0        POP      {R4,R6,R7,PC}
    187          	else {
    188          		switch (channel) {
   \                     ??pwmc_configure_channel_2:
   \       0x68   0xE354'0000        CMP      R4,#+0
   \       0x6C   0x0A00'0003        BEQ      ??pwmc_configure_channel_3
   \       0x70   0xE354'0002        CMP      R4,#+2
   \       0x74   0x0A00'0005        BEQ      ??pwmc_configure_channel_4
   \       0x78   0x3A00'0002        BCC      ??pwmc_configure_channel_5
   \       0x7C   0xEA00'0005        B        ??pwmc_configure_channel_6
    189          			case 0:
    190          				pwm->PWM_CMUPD0 = mode;
   \                     ??pwmc_configure_channel_3:
   \       0x80   0xE586'7400        STR      R7,[R6, #+1024]
    191          				break;
   \       0x84   0xE8BD'80D0        POP      {R4,R6,R7,PC}
    192          			case 1:
    193          				pwm->PWM_CMUPD1 = mode;
   \                     ??pwmc_configure_channel_5:
   \       0x88   0xE586'7420        STR      R7,[R6, #+1056]
    194          				break;
   \       0x8C   0xE8BD'80D0        POP      {R4,R6,R7,PC}
    195          			case 2:
    196          				pwm->PWM_CMUPD2 = mode;
   \                     ??pwmc_configure_channel_4:
   \       0x90   0xE586'7440        STR      R7,[R6, #+1088]
    197          				break;
   \       0x94   0xE8BD'80D0        POP      {R4,R6,R7,PC}
    198          			case 3:
    199          			default:
    200          				pwm->PWM_CMUPD3 = mode;
   \                     ??pwmc_configure_channel_6:
   \       0x98   0xE586'7460        STR      R7,[R6, #+1120]
    201          				break;
    202          		}
    203          	}
    204          #else
    205          	pwm->PWM_CH[channel].PWM_CMR = mode;
    206          #endif
    207          }
   \       0x9C   0xE8BD'80D0        POP      {R4,R6,R7,PC}    ;; return
    208          

   \                                 In section SOFTPACK, align 4, keep-with-next
    209          void pwmc_set_period(Pwm *pwm, uint8_t channel, uint16_t period)
    210          {
   \                     pwmc_set_period:
   \        0x0   0xE92D'4070        PUSH     {R4-R6,LR}
   \        0x4   0xE1A0'4001        MOV      R4,R1
   \        0x8   0xE1A0'6000        MOV      R6,R0
    211          	assert(channel < ARRAY_SIZE(pwm->PWM_CH));
   \        0xC   0xE354'0004        CMP      R4,#+4
   \       0x10   0xE1A0'5002        MOV      R5,R2
   \       0x14   0x3A00'0004        BCC      ??pwmc_set_period_0
   \       0x18   0x....'....        LDR      R1,??DataTable24_2
   \       0x1C   0xE3A0'20D3        MOV      R2,#+211
   \       0x20   0xE281'0050        ADD      R0,R1,#+80
   \       0x24   0x....'....        BL       __aeabi_assert
   \       0x28   0x....'....        BL       __iar_EmptyStepPoint
    212          
    213          	/* If channel is disabled, write to CPRD */
    214          	if ((pwm->PWM_SR & (1 << channel)) == 0) {
   \                     ??pwmc_set_period_0:
   \       0x2C   0xE596'100C        LDR      R1,[R6, #+12]
   \       0x30   0xE3A0'2001        MOV      R2,#+1
   \       0x34   0xE086'0284        ADD      R0,R6,R4, LSL #+5
   \       0x38   0xE112'0431        TST      R2,R1, LSR R4
    215          		pwm->PWM_CH[channel].PWM_CPRD = period;
   \       0x3C   0x0580'520C        STREQ    R5,[R0, #+524]
    216          	}
    217          	/* Otherwise use update register */
    218          	else {
    219          #ifdef PWM_CMR_CPD
    220          		pwm->PWM_CH[channel].PWM_CMR |= PWM_CMR_CPD;
    221          		pwm->PWM_CH[channel].PWM_CUPD = period;
    222          #else
    223          		pwm->PWM_CH[channel].PWM_CPRDUPD = period;
   \       0x40   0x1580'5210        STRNE    R5,[R0, #+528]
    224          #endif
    225          	}
    226          }
   \       0x44   0xE8BD'8070        POP      {R4-R6,PC}       ;; return
    227          

   \                                 In section SOFTPACK, align 4, keep-with-next
    228          void pwmc_set_duty_cycle(Pwm *pwm, uint8_t channel, uint16_t duty)
    229          {
   \                     pwmc_set_duty_cycle:
   \        0x0   0xE92D'40F8        PUSH     {R3-R7,LR}
   \        0x4   0xE1A0'4001        MOV      R4,R1
   \        0x8   0xE1A0'5000        MOV      R5,R0
    230          	assert(channel < ARRAY_SIZE(pwm->PWM_CH));
   \        0xC   0xE354'0004        CMP      R4,#+4
   \       0x10   0xE1A0'6002        MOV      R6,R2
   \       0x14   0x3A00'0004        BCC      ??pwmc_set_duty_cycle_0
   \       0x18   0x....'....        LDR      R1,??DataTable24_2
   \       0x1C   0xE3A0'20E6        MOV      R2,#+230
   \       0x20   0xE281'0050        ADD      R0,R1,#+80
   \       0x24   0x....'....        BL       __aeabi_assert
   \       0x28   0x....'....        BL       __iar_EmptyStepPoint
    231          	assert(pwm->PWM_CH[channel].PWM_CPRD >= duty);
   \                     ??pwmc_set_duty_cycle_0:
   \       0x2C   0xE085'7284        ADD      R7,R5,R4, LSL #+5
   \       0x30   0xE597'020C        LDR      R0,[R7, #+524]
   \       0x34   0xE150'0006        CMP      R0,R6
   \       0x38   0x2A00'0004        BCS      ??pwmc_set_duty_cycle_1
   \       0x3C   0x....'....        LDR      R1,??DataTable24_2
   \       0x40   0xE3A0'20E7        MOV      R2,#+231
   \       0x44   0xE281'0F42        ADD      R0,R1,#+264
   \       0x48   0x....'....        BL       __aeabi_assert
   \       0x4C   0x....'....        BL       __iar_EmptyStepPoint
    232          
    233          	/* If channel is disabled, write to CDTY */
    234          	if ((pwm->PWM_SR & (1 << channel)) == 0) {
   \                     ??pwmc_set_duty_cycle_1:
   \       0x50   0xE595'000C        LDR      R0,[R5, #+12]
   \       0x54   0xE3A0'1001        MOV      R1,#+1
   \       0x58   0xE111'0430        TST      R1,R0, LSR R4
    235          		pwm->PWM_CH[channel].PWM_CDTY = duty;
   \       0x5C   0x0587'6204        STREQ    R6,[R7, #+516]
    236          	}
    237          	/* Otherwise use update register */
    238          	else {
    239          #ifdef PWM_CMR_CPD
    240          		pwm->PWM_CH[channel].PWM_CMR &= ~PWM_CMR_CPD;
    241          		pwm->PWM_CH[channel].PWM_CUPD = duty;
    242          #else
    243          		pwm->PWM_CH[channel].PWM_CDTYUPD = duty;
   \       0x60   0x1587'6208        STRNE    R6,[R7, #+520]
    244          #endif
    245          	}
    246          }
   \       0x64   0xE8BD'80F1        POP      {R0,R4-R7,PC}    ;; return
    247          
    248          #ifdef CONFIG_HAVE_PWMC_SYNC_MODE

   \                                 In section SOFTPACK, align 4, keep-with-next
    249          void pwmc_configure_sync_channels(Pwm *pwm, uint32_t mode)
    250          {
   \                     pwmc_configure_sync_channels:
   \        0x0   0xE92D'407C        PUSH     {R2-R6,LR}
   \        0x4   0xE1A0'4000        MOV      R4,R0
   \        0x8   0xE1A0'5001        MOV      R5,R1
    251          #ifndef NDEBUG
    252          	uint32_t sync_bits = mode & (PWM_SCM_SYNC0 | PWM_SCM_SYNC1 \
    253          				     | PWM_SCM_SYNC2 | PWM_SCM_SYNC3);
    254          #ifdef CONFIG_HAVE_PWMC_DMA
    255          	trace_debug("pwm: SYNC CHs bitmap 0x%x, Update Mode %u, " \
    256          		    "DMA Request Mode %u, Request Comparison Selection %u\n\r",
    257          		    (unsigned)sync_bits,
    258          		    (unsigned)((mode & PWM_SCM_UPDM_Msk) >> PWM_SCM_UPDM_Pos), \
    259          		    (unsigned)(0 != (mode & PWM_SCM_PTRM)),		\
    260          		    (unsigned)((mode & PWM_SCM_PTRCS_Msk) >> PWM_SCM_PTRCS_Pos));
   \        0xC   0x....'....        LDR      R0,??DataTable24_4
   \       0x10   0xE205'600F        AND      R6,R5,#0xF
   \       0x14   0xE590'1000        LDR      R1,[R0, #+0]
   \       0x18   0xE351'0005        CMP      R1,#+5
   \       0x1C   0x3A00'0007        BCC      ??pwmc_configure_sync_channels_0
   \       0x20   0xE7E2'0AD5        UBFX     R0,R5,#+21,#+3
   \       0x24   0xE7E1'2855        UBFX     R2,R5,#+16,#+2
   \       0x28   0xE58D'0000        STR      R0,[SP, #+0]
   \       0x2C   0xE1A0'0A25        LSR      R0,R5,#+20
   \       0x30   0xE1A0'1006        MOV      R1,R6
   \       0x34   0xE200'3001        AND      R3,R0,#0x1
   \       0x38   0x....'....        LDR      R0,??DataTable24_6
   \       0x3C   0x....'....        BL       printf
    261          #else
    262          	trace_debug("pwm: SYNC CHs bitmap 0x%x, Update Mode %u, " ,
    263          		    (unsigned)sync_bits,
    264          		    (unsigned)((mode & PWM_SCM_UPDM_Msk) >> PWM_SCM_UPDM_Pos));
    265          #endif
    266          
    267          	/* Defining a channel as a synchronous channel while it is an asynchronous
    268          	channel (by writing the bit SYNCx to '1' while it was at '0') is allowed
    269          	only if the channel is disabled at this time (CHIDx = 0 in PWM_SR). In the
    270          	same way, defining a channel as an asynchronous channel while it is a
    271          	synchronous channel (by writing the SYNCx bit to '0' while it was '1') is
    272          	allowed only if the channel is disabled at this time. */
    273          	uint32_t pwm_sr = pwm->PWM_SR;
   \                     ??pwmc_configure_sync_channels_0:
   \       0x40   0xE594'000C        LDR      R0,[R4, #+12]
    274          	assert((pwm_sr & (pwm->PWM_SCM ^ sync_bits)) == 0);
   \       0x44   0xE594'1020        LDR      R1,[R4, #+32]
   \       0x48   0xE026'1001        EOR      R1,R6,R1
   \       0x4C   0xE111'0000        TST      R1,R0
   \       0x50   0x0A00'0004        BEQ      ??pwmc_configure_sync_channels_1
   \       0x54   0x....'....        LDR      R1,??DataTable24_2
   \       0x58   0xE300'2112        MOVW     R2,#+274
   \       0x5C   0xE281'0F7A        ADD      R0,R1,#+488
   \       0x60   0x....'....        BL       __aeabi_assert
   \       0x64   0x....'....        BL       __iar_EmptyStepPoint
    275          	/* Mode3 does not exist */
    276          	assert(((mode & PWM_SCM_UPDM_Msk) >> PWM_SCM_UPDM_Pos) != 3);
   \                     ??pwmc_configure_sync_channels_1:
   \       0x68   0xE7E1'0855        UBFX     R0,R5,#+16,#+2
   \       0x6C   0xE350'0003        CMP      R0,#+3
   \       0x70   0x1A00'0004        BNE      ??pwmc_configure_sync_channels_2
   \       0x74   0x....'....        LDR      R1,??DataTable24_2
   \       0x78   0xE3A0'2F45        MOV      R2,#+276
   \       0x7C   0xE281'0F85        ADD      R0,R1,#+532
   \       0x80   0x....'....        BL       __aeabi_assert
   \       0x84   0x....'....        BL       __iar_EmptyStepPoint
    277          #ifndef CONFIG_HAVE_PWMC_DMA
    278          	/* Mode2 does not exist if PWM does not support DMA */
    279          	assert(((mode & PWM_SCM_UPDM_Msk) >> PWM_SCM_UPDM_Pos) != 2);
    280          #endif
    281          #endif
    282          	pwm->PWM_SCM = mode;
   \                     ??pwmc_configure_sync_channels_2:
   \       0x88   0xE584'5020        STR      R5,[R4, #+32]
    283          }
   \       0x8C   0xE8BD'8073        POP      {R0,R1,R4-R6,PC}  ;; return
    284          

   \                                 In section SOFTPACK, align 4, keep-with-next
    285          void pwmc_set_sync_channels_update_unlock(Pwm *pwm)
    286          {
    287          	pwm->PWM_SCUC = PWM_SCUC_UPDULOCK;
   \                     pwmc_set_sync_channels_update_unlock:
   \        0x0   0xE3A0'1001        MOV      R1,#+1
   \        0x4   0xE580'1028        STR      R1,[R0, #+40]
    288          }
   \        0x8   0xE12F'FF1E        BX       LR               ;; return
    289          

   \                                 In section SOFTPACK, align 4, keep-with-next
    290          void pwmc_set_sync_channels_update_period(Pwm *pwm,
    291          		uint8_t counter, uint8_t period)
    292          {
    293          	pwm->PWM_SCUP = PWM_SCUP_UPRCNT(counter) | PWM_SCUP_UPR(period);
   \                     pwmc_set_sync_channels_update_period:
   \        0x0   0xE3A0'30F0        MOV      R3,#+240
   \        0x4   0xE202'200F        AND      R2,R2,#0xF
   \        0x8   0xE003'1201        AND      R1,R3,R1, LSL #+4
   \        0xC   0xE182'2001        ORR      R2,R2,R1
   \       0x10   0xE580'202C        STR      R2,[R0, #+44]
    294          }
   \       0x14   0xE12F'FF1E        BX       LR               ;; return
    295          

   \                                 In section SOFTPACK, align 4, keep-with-next
    296          void pwmc_set_sync_channels_update_period_update(Pwm *pwm, uint8_t period)
    297          {
    298          	pwm->PWM_SCUPUPD = PWM_SCUPUPD_UPRUPD(period);
   \                     pwmc_set_sync_channels_update_period_update:
   \        0x0   0xE201'100F        AND      R1,R1,#0xF
   \        0x4   0xE580'1030        STR      R1,[R0, #+48]
    299          }
   \        0x8   0xE12F'FF1E        BX       LR               ;; return
    300          #endif /* CONFIG_HAVE_PWMC_SYNC_MODE */
    301          
    302          #ifdef CONFIG_HAVE_PWMC_DMA

   \                                 In section SOFTPACK, align 4, keep-with-next
    303          static int _pwm_dma_callback_wrapper(void* arg, void* arg2)
    304          {
   \                     _pwm_dma_callback_wrapper:
   \        0x0   0xE92D'4010        PUSH     {R4,LR}
   \        0x4   0xE1A0'4000        MOV      R4,R0
    305          	struct _dma_channel* dma_channel = (struct _dma_channel*)arg;
    306          
    307          	if (dma_is_transfer_done(dma_channel)) {
   \        0x8   0x....'....        BL       dma_is_transfer_done
   \        0xC   0xE350'0000        CMP      R0,#+0
   \       0x10   0x0A00'0005        BEQ      ??_pwm_dma_callback_wrapper_0
    308          		dma_free_channel(dma_channel);
   \       0x14   0xE1A0'0004        MOV      R0,R4
   \       0x18   0x....'....        BL       dma_free_channel
    309          		callback_call(&pwmc_cb, NULL);
   \       0x1C   0xE3A0'1000        MOV      R1,#+0
   \       0x20   0x....'....        LDR      R0,??DataTable24_7
   \       0x24   0x....'....        BL       callback_call
    310          	}
    311          
    312          	return 0;
   \       0x28   0xE3A0'0000        MOV      R0,#+0
   \                     ??_pwm_dma_callback_wrapper_0:
   \       0x2C   0xE8BD'8010        POP      {R4,PC}          ;; return
    313          }
    314          

   \                                 In section SOFTPACK, align 4, keep-with-next
    315          void pwmc_set_dma_finished_callback(Pwm *pwm, struct _callback* cb)
    316          {
   \                     pwmc_set_dma_finished_callback:
   \        0x0   0xE92D'4038        PUSH     {R3-R5,LR}
   \        0x4   0xE1A0'4001        MOV      R4,R1
   \        0x8   0x....'....        LDR      R5,??DataTable24_8
    317          	uint32_t id = get_pwm_id_from_addr(pwm);
   \        0xC   0x....'....        BL       get_pwm_id_from_addr
    318          
    319          	if (!pwm_dma_channel) {
   \       0x10   0xE595'1000        LDR      R1,[R5, #+0]
   \       0x14   0xE351'0000        CMP      R1,#+0
   \       0x18   0x1A00'000A        BNE      ??pwmc_set_dma_finished_callback_0
    320          		pwm_dma_channel = dma_allocate_channel(DMA_PERIPH_MEMORY, id);
   \       0x1C   0xE6EF'1070        UXTB     R1,R0
   \       0x20   0xE3A0'00FF        MOV      R0,#+255
   \       0x24   0x....'....        BL       dma_allocate_channel
    321          		assert(pwm_dma_channel);
   \       0x28   0xE350'0000        CMP      R0,#+0
   \       0x2C   0xE585'0000        STR      R0,[R5, #+0]
   \       0x30   0x1A00'0004        BNE      ??pwmc_set_dma_finished_callback_0
   \       0x34   0xE300'2141        MOVW     R2,#+321
   \       0x38   0x....'....        LDR      R1,??DataTable24_2
   \       0x3C   0x....'....        LDR      R0,??DataTable24_9
   \       0x40   0x....'....        BL       __aeabi_assert
   \       0x44   0x....'....        BL       __iar_EmptyStepPoint
    322          	}
    323          	callback_copy(&pwmc_cb, cb);
   \                     ??pwmc_set_dma_finished_callback_0:
   \       0x48   0xE1A0'1004        MOV      R1,R4
   \       0x4C   0xE285'0004        ADD      R0,R5,#+4
   \       0x50   0xE8BD'4034        POP      {R2,R4,R5,LR}
   \       0x54   0x....'....        B        callback_copy    ;; tailcall
    324          }
    325          

   \                                 In section SOFTPACK, align 4, keep-with-next
    326          void pwmc_dma_duty_cycle(Pwm* pwm, uint16_t *duty, uint32_t size)
    327          {
   \                     pwmc_dma_duty_cycle:
   \        0x0   0xE92D'40F8        PUSH     {R3-R7,LR}
    328          	struct _callback _cb;
    329          	struct _dma_cfg dma_cfg;
    330          	struct _dma_transfer_cfg cfg;
    331          
    332          	assert(pwm_dma_channel);
   \        0x4   0x....'....        LDR      R4,??DataTable24_8
   \        0x8   0xE1A0'7000        MOV      R7,R0
   \        0xC   0xE24D'D020        SUB      SP,SP,#+32
   \       0x10   0xE594'0000        LDR      R0,[R4, #+0]
   \       0x14   0xE1A0'5001        MOV      R5,R1
   \       0x18   0xE1A0'6002        MOV      R6,R2
   \       0x1C   0xE350'0000        CMP      R0,#+0
   \       0x20   0x1A00'0004        BNE      ??pwmc_dma_duty_cycle_0
   \       0x24   0xE3A0'2F53        MOV      R2,#+332
   \       0x28   0x....'....        LDR      R1,??DataTable24_2
   \       0x2C   0x....'....        LDR      R0,??DataTable24_9
   \       0x30   0x....'....        BL       __aeabi_assert
   \       0x34   0x....'....        BL       __iar_EmptyStepPoint
    333          	memset(&cfg, 0, sizeof(cfg));
   \                     ??pwmc_dma_duty_cycle_0:
   \       0x38   0xE1A0'000D        MOV      R0,SP
   \       0x3C   0xE3A0'3000        MOV      R3,#+0
   \       0x40   0xE3A0'1000        MOV      R1,#+0
   \       0x44   0xE3A0'2000        MOV      R2,#+0
   \       0x48   0xE880'000E        STM      R0,{R1-R3}
    334          	cfg.saddr = (void*)duty;
    335          	cfg.daddr = (void*)&pwm->PWM_DMAR;
    336          	cfg.len = size;
    337          	dma_cfg.incr_saddr = true;
    338          	dma_cfg.incr_daddr = false;
    339          	dma_cfg.loop = false;
    340          	dma_cfg.data_width = DMA_DATA_WIDTH_HALF_WORD;
    341          	dma_cfg.chunk_size = DMA_CHUNK_SIZE_1;
    342          	dma_reset_channel(pwm_dma_channel);
   \       0x4C   0xE594'0000        LDR      R0,[R4, #+0]
   \       0x50   0xE287'2024        ADD      R2,R7,#+36
   \       0x54   0xE5CD'3015        STRB     R3,[SP, #+21]
   \       0x58   0xE3A0'1001        MOV      R1,#+1
   \       0x5C   0xE58D'5000        STR      R5,[SP, #+0]
   \       0x60   0xE58D'2004        STR      R2,[SP, #+4]
   \       0x64   0xE58D'6008        STR      R6,[SP, #+8]
   \       0x68   0xE5CD'1014        STRB     R1,[SP, #+20]
   \       0x6C   0xE5CD'3016        STRB     R3,[SP, #+22]
   \       0x70   0xE58D'100C        STR      R1,[SP, #+12]
   \       0x74   0xE58D'3010        STR      R3,[SP, #+16]
   \       0x78   0x....'....        BL       dma_reset_channel
    343          	dma_configure_transfer(pwm_dma_channel, &dma_cfg, &cfg, 1);
   \       0x7C   0xE594'0000        LDR      R0,[R4, #+0]
   \       0x80   0xE3A0'3001        MOV      R3,#+1
   \       0x84   0xE1A0'200D        MOV      R2,SP
   \       0x88   0xE28D'100C        ADD      R1,SP,#+12
   \       0x8C   0x....'....        BL       dma_configure_transfer
    344          	callback_set(&_cb, _pwm_dma_callback_wrapper, pwm_dma_channel);
   \       0x90   0xE594'2000        LDR      R2,[R4, #+0]
   \       0x94   0x....'....        ADR      R1,_pwm_dma_callback_wrapper
   \       0x98   0xE28D'0018        ADD      R0,SP,#+24
   \       0x9C   0x....'....        BL       callback_set
    345          	dma_set_callback(pwm_dma_channel, &_cb);
   \       0xA0   0xE594'0000        LDR      R0,[R4, #+0]
   \       0xA4   0xE28D'1018        ADD      R1,SP,#+24
   \       0xA8   0x....'....        BL       dma_set_callback
    346          
    347          	cache_clean_region(duty, size);
   \       0xAC   0xE1A0'1006        MOV      R1,R6
   \       0xB0   0xE1A0'0005        MOV      R0,R5
   \       0xB4   0x....'....        BL       cache_clean_region
    348          	dma_start_transfer(pwm_dma_channel);
   \       0xB8   0xE594'0000        LDR      R0,[R4, #+0]
   \       0xBC   0x....'....        BL       dma_start_transfer
    349          }
   \       0xC0   0xE28D'D024        ADD      SP,SP,#+36
   \       0xC4   0xE8BD'80F0        POP      {R4-R7,PC}       ;; return
    350          
    351          #endif /* CONFIG_HAVE_PWMC_DMA */
    352          
    353          #ifdef CONFIG_HAVE_PWMC_OOV

   \                                 In section SOFTPACK, align 4, keep-with-next
    354          void pwmc_output_override(Pwm *pwm, uint8_t channel,
    355          		uint8_t is_pwmh, uint8_t level, uint8_t sync)
    356          {
   \                     pwmc_output_override:
   \        0x0   0xE92D'417E        PUSH     {R1-R6,R8,LR}
   \        0x4   0xE1A0'5001        MOV      R5,R1
   \        0x8   0xE1A0'4000        MOV      R4,R0
    357          	volatile uint32_t tmp;
    358          	uint32_t mask;
    359          
    360          	assert(channel < ARRAY_SIZE(pwm->PWM_CH));
   \        0xC   0xE355'0004        CMP      R5,#+4
   \       0x10   0xE1A0'8002        MOV      R8,R2
   \       0x14   0xE1A0'6003        MOV      R6,R3
   \       0x18   0x3A00'0004        BCC      ??pwmc_output_override_0
   \       0x1C   0x....'....        LDR      R1,??DataTable24_2
   \       0x20   0xE3A0'2F5A        MOV      R2,#+360
   \       0x24   0xE281'0050        ADD      R0,R1,#+80
   \       0x28   0x....'....        BL       __aeabi_assert
   \       0x2C   0x....'....        BL       __iar_EmptyStepPoint
    361          
    362          	trace_debug("pwm: CH%u PWM%c output overridden to %u\n\r",
    363          			(unsigned)channel, (0 != is_pwmh) ? 'H' : 'L', (unsigned)level);
   \                     ??pwmc_output_override_0:
   \       0x30   0x....'....        LDR      R0,??DataTable24_4
   \       0x34   0xE590'1000        LDR      R1,[R0, #+0]
   \       0x38   0xE351'0004        CMP      R1,#+4
   \       0x3C   0x9A00'0006        BLS      ??pwmc_output_override_1
   \       0x40   0xE1B0'0008        MOVS     R0,R8
   \       0x44   0xE1A0'3006        MOV      R3,R6
   \       0x48   0x13A0'2048        MOVNE    R2,#+72
   \       0x4C   0xE1A0'1005        MOV      R1,R5
   \       0x50   0x03A0'204C        MOVEQ    R2,#+76
   \       0x54   0x....'....        LDR      R0,??DataTable24_10
   \       0x58   0x....'....        BL       printf
    364          
    365          	if (0 == is_pwmh)
   \                     ??pwmc_output_override_1:
   \       0x5C   0xE358'0000        CMP      R8,#+0
    366          		mask = PWM_OSS_OSSH0 << channel;
    367          	else
    368          		mask = PWM_OSS_OSSL0 << channel;
    369          
    370          	tmp = pwm->PWM_OOV;
   \       0x60   0xE594'2044        LDR      R2,[R4, #+68]
   \       0x64   0x03A0'0001        MOVEQ    R0,#+1
   \       0x68   0x13A0'1B40        MOVNE    R1,#+65536
   \       0x6C   0x01A0'0510        LSLEQ    R0,R0,R5
   \       0x70   0xE58D'2000        STR      R2,[SP, #+0]
   \       0x74   0x11A0'0511        LSLNE    R0,R1,R5
    371          	if (0 == level)
   \       0x78   0xE356'0000        CMP      R6,#+0
    372          		tmp &= ~mask;
   \       0x7C   0x059D'C000        LDREQ    R12,[SP, #+0]
    373          	else
    374          		tmp |= mask;
    375          	pwm->PWM_OOV = tmp;
    376          
    377          	/* If channel is disabled, write to OSS */
    378          	if (((pwm->PWM_SR & (1 << channel)) == 0) || (0 != sync))
   \       0x80   0xE3A0'3001        MOV      R3,#+1
   \       0x84   0x01CC'C000        BICEQ    R12,R12,R0
   \       0x88   0x058D'C000        STREQ    R12,[SP, #+0]
   \       0x8C   0x159D'E000        LDRNE    LR,[SP, #+0]
   \       0x90   0x1180'E00E        ORRNE    LR,R0,LR
   \       0x94   0x158D'E000        STRNE    LR,[SP, #+0]
   \       0x98   0xE59D'C000        LDR      R12,[SP, #+0]
   \       0x9C   0xE584'C044        STR      R12,[R4, #+68]
   \       0xA0   0xE594'100C        LDR      R1,[R4, #+12]
   \       0xA4   0xE113'0531        TST      R3,R1, LSR R5
   \       0xA8   0x0A00'0002        BEQ      ??pwmc_output_override_2
   \       0xAC   0xE5DD'1020        LDRB     R1,[SP, #+32]
   \       0xB0   0xE351'0000        CMP      R1,#+0
   \       0xB4   0x0A00'0001        BEQ      ??pwmc_output_override_3
    379          		pwm->PWM_OSS = mask;
   \                     ??pwmc_output_override_2:
   \       0xB8   0xE584'004C        STR      R0,[R4, #+76]
    380          	/* Otherwise use update register */
    381          	else
    382          		pwm->PWM_OSSUPD = mask;
    383          }
   \       0xBC   0x....'....        B        ?Subroutine1
   \                     ??pwmc_output_override_3:
   \       0xC0   0xE584'0054        STR      R0,[R4, #+84]
   \       0xC4                      REQUIRE ?Subroutine1
   \       0xC4                      ;; // Fall through to label ?Subroutine1

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ?Subroutine1:
   \        0x0   0xE28D'D00C        ADD      SP,SP,#+12
   \        0x4   0xE8BD'8170        POP      {R4-R6,R8,PC}    ;; return
    384          

   \                                 In section SOFTPACK, align 4, keep-with-next
    385          void pwmc_disable_output_override(Pwm *pwm, uint8_t channel,
    386          		uint8_t is_pwmh, uint8_t sync)
    387          {
   \                     pwmc_disable_output_override:
   \        0x0   0xE92D'4178        PUSH     {R3-R6,R8,LR}
   \        0x4   0xE1A0'5001        MOV      R5,R1
   \        0x8   0xE1A0'4000        MOV      R4,R0
    388          	uint32_t mask;
    389          
    390          	assert(channel < ARRAY_SIZE(pwm->PWM_CH));
   \        0xC   0xE355'0004        CMP      R5,#+4
   \       0x10   0xE1A0'8002        MOV      R8,R2
   \       0x14   0xE1A0'6003        MOV      R6,R3
   \       0x18   0x3A00'0004        BCC      ??pwmc_disable_output_override_0
   \       0x1C   0x....'....        LDR      R1,??DataTable24_2
   \       0x20   0xE300'2186        MOVW     R2,#+390
   \       0x24   0xE281'0050        ADD      R0,R1,#+80
   \       0x28   0x....'....        BL       __aeabi_assert
   \       0x2C   0x....'....        BL       __iar_EmptyStepPoint
    391          
    392          	trace_debug("pwm: CH%u PWM%c output override disabled\n\r",
    393          			(unsigned)channel, (0 != is_pwmh) ? 'H' : 'L');
   \                     ??pwmc_disable_output_override_0:
   \       0x30   0x....'....        LDR      R0,??DataTable24_4
   \       0x34   0xE590'1000        LDR      R1,[R0, #+0]
   \       0x38   0xE351'0004        CMP      R1,#+4
   \       0x3C   0x9A00'0005        BLS      ??pwmc_disable_output_override_1
   \       0x40   0xE1B0'0008        MOVS     R0,R8
   \       0x44   0xE1A0'1005        MOV      R1,R5
   \       0x48   0x13A0'2048        MOVNE    R2,#+72
   \       0x4C   0x....'....        LDR      R0,??DataTable24_11
   \       0x50   0x03A0'204C        MOVEQ    R2,#+76
   \       0x54   0x....'....        BL       printf
    394          
    395          	if (0 == is_pwmh)
   \                     ??pwmc_disable_output_override_1:
   \       0x58   0xE358'0000        CMP      R8,#+0
    396          		mask = PWM_OSS_OSSH0 << channel;
    397          	else
    398          		mask = PWM_OSS_OSSL0 << channel;
    399          
    400          	/* If channel is disabled, write to OSS */
    401          	if (((pwm->PWM_SR & (1 << channel)) == 0) || (0 != sync))
   \       0x5C   0xE594'200C        LDR      R2,[R4, #+12]
   \       0x60   0x03A0'0001        MOVEQ    R0,#+1
   \       0x64   0x13A0'1B40        MOVNE    R1,#+65536
   \       0x68   0x01A0'0510        LSLEQ    R0,R0,R5
   \       0x6C   0xE3A0'3001        MOV      R3,#+1
   \       0x70   0x11A0'0511        LSLNE    R0,R1,R5
   \       0x74   0xE113'0532        TST      R3,R2, LSR R5
   \       0x78   0x0A00'0001        BEQ      ??pwmc_disable_output_override_2
   \       0x7C   0xE356'0000        CMP      R6,#+0
   \       0x80   0x0A00'0001        BEQ      ??pwmc_disable_output_override_3
    402          		pwm->PWM_OSC = mask;
   \                     ??pwmc_disable_output_override_2:
   \       0x84   0xE584'0050        STR      R0,[R4, #+80]
   \       0x88   0xE8BD'8171        POP      {R0,R4-R6,R8,PC}
    403          	/* Otherwise use update register */
    404          	else
    405          		pwm->PWM_OSCUPD = mask;
   \                     ??pwmc_disable_output_override_3:
   \       0x8C   0xE584'0058        STR      R0,[R4, #+88]
    406          }
   \       0x90   0xE8BD'8171        POP      {R0,R4-R6,R8,PC}  ;; return
    407          
    408          #endif /* CONFIG_HAVE_PWMC_OOV */
    409          
    410          #ifdef CONFIG_HAVE_PWMC_DTIME

   \                                 In section SOFTPACK, align 4, keep-with-next
    411          void pwmc_output_dead_time(Pwm *pwm, uint8_t channel,
    412          		uint16_t time_h, uint16_t time_l)
    413          {
   \                     pwmc_output_dead_time:
   \        0x0   0xE92D'43F8        PUSH     {R3-R9,LR}
   \        0x4   0xE1A0'7001        MOV      R7,R1
   \        0x8   0xE1A0'4000        MOV      R4,R0
    414          	uint32_t dead_time;
    415          
    416          	assert(channel < ARRAY_SIZE(pwm->PWM_CH));
   \        0xC   0xE357'0004        CMP      R7,#+4
   \       0x10   0xE1A0'6002        MOV      R6,R2
   \       0x14   0xE1A0'5003        MOV      R5,R3
   \       0x18   0x3A00'0004        BCC      ??pwmc_output_dead_time_0
   \       0x1C   0x....'....        LDR      R1,??DataTable24_2
   \       0x20   0xE3A0'2F68        MOV      R2,#+416
   \       0x24   0xE281'0050        ADD      R0,R1,#+80
   \       0x28   0x....'....        BL       __aeabi_assert
   \       0x2C   0x....'....        BL       __iar_EmptyStepPoint
    417          
    418          	trace_debug("pwm: CH%u output dead time H: %u, L: %u\n\r",
    419          			(unsigned)channel, (unsigned)time_h, (unsigned)time_l);
   \                     ??pwmc_output_dead_time_0:
   \       0x30   0x....'....        LDR      R0,??DataTable24_4
   \       0x34   0xE590'1000        LDR      R1,[R0, #+0]
   \       0x38   0xE351'0004        CMP      R1,#+4
   \       0x3C   0x9A00'0004        BLS      ??pwmc_output_dead_time_1
   \       0x40   0xE1A0'3005        MOV      R3,R5
   \       0x44   0xE1A0'2006        MOV      R2,R6
   \       0x48   0xE1A0'1007        MOV      R1,R7
   \       0x4C   0x....'....        LDR      R0,??DataTable24_12
   \       0x50   0x....'....        BL       printf
    420          
    421          #ifndef NDEBUG
    422          	uint32_t pwm_cprd = pwm->PWM_CH[channel].PWM_CPRD;
   \                     ??pwmc_output_dead_time_1:
   \       0x54   0xE084'8287        ADD      R8,R4,R7, LSL #+5
   \       0x58   0xE598'020C        LDR      R0,[R8, #+524]
    423          	uint32_t pwm_cdty = pwm->PWM_CH[channel].PWM_CDTY;
   \       0x5C   0xE598'9204        LDR      R9,[R8, #+516]
    424          	assert(pwm_cprd - pwm_cdty >= time_h);
   \       0x60   0xE040'0009        SUB      R0,R0,R9
   \       0x64   0xE150'0006        CMP      R0,R6
   \       0x68   0x2A00'0004        BCS      ??pwmc_output_dead_time_2
   \       0x6C   0xE3A0'2F6A        MOV      R2,#+424
   \       0x70   0x....'....        LDR      R1,??DataTable24_2
   \       0x74   0x....'....        ADR      R0,?_15
   \       0x78   0x....'....        BL       __aeabi_assert
   \       0x7C   0x....'....        BL       __iar_EmptyStepPoint
    425          	assert(pwm_cdty >= time_l);
   \                     ??pwmc_output_dead_time_2:
   \       0x80   0xE159'0005        CMP      R9,R5
   \       0x84   0x2A00'0004        BCS      ??pwmc_output_dead_time_3
   \       0x88   0xE300'21A9        MOVW     R2,#+425
   \       0x8C   0x....'....        LDR      R1,??DataTable24_2
   \       0x90   0x....'....        ADR      R0,?_16
   \       0x94   0x....'....        BL       __aeabi_assert
   \       0x98   0x....'....        BL       __iar_EmptyStepPoint
    426          #endif
    427          
    428          	dead_time = PWM_DT_DTH(time_h) | PWM_DT_DTL(time_l);
    429          
    430          	/* If channel is disabled, write to DT */
    431          	if ((pwm->PWM_SR & (1 << channel)) == 0)
   \                     ??pwmc_output_dead_time_3:
   \       0x9C   0xE594'100C        LDR      R1,[R4, #+12]
   \       0xA0   0xE3A0'2001        MOV      R2,#+1
   \       0xA4   0xE186'0805        ORR      R0,R6,R5, LSL #+16
   \       0xA8   0xE112'0731        TST      R2,R1, LSR R7
    432          		pwm->PWM_CH[channel].PWM_DT = dead_time;
   \       0xAC   0x0588'0218        STREQ    R0,[R8, #+536]
    433          	/* Otherwise use update register */
    434          	else
    435          		pwm->PWM_CH[channel].PWM_DTUPD = dead_time;
   \       0xB0   0x1588'021C        STRNE    R0,[R8, #+540]
    436          }
   \       0xB4   0xE8BD'83F1        POP      {R0,R4-R9,PC}    ;; return
    437          
    438          #endif /* CONFIG_HAVE_PWMC_DTIME */
    439          
    440          #ifdef CONFIG_HAVE_PWMC_FMODE

   \                                 In section SOFTPACK, align 4, keep-with-next
    441          void pwmc_set_fault_mode(Pwm *pwm, uint32_t mode)
    442          {
    443          	pwm->PWM_FMR = mode;
   \                     pwmc_set_fault_mode:
   \        0x0   0xE580'105C        STR      R1,[R0, #+92]
    444          }
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
    445          

   \                                 In section SOFTPACK, align 4, keep-with-next
    446          uint32_t pwmc_get_fault_status(Pwm *pwm)
    447          {
    448          	return pwm->PWM_FSR;
   \                     pwmc_get_fault_status:
   \        0x0   0xE590'0060        LDR      R0,[R0, #+96]
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
    449          }
    450          

   \                                 In section SOFTPACK, align 4, keep-with-next
    451          void pwmc_fault_clear(Pwm *pwm, uint32_t fault)
    452          {
    453          	pwm->PWM_FCR = fault;
   \                     pwmc_fault_clear:
   \        0x0   0xE580'1064        STR      R1,[R0, #+100]
    454          }
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
    455          

   \                                 In section SOFTPACK, align 4, keep-with-next
    456          void pwmc_set_fault_protection(Pwm *pwm, uint32_t value)
    457          {
    458          	pwm->PWM_FPV1 = value;
   \                     pwmc_set_fault_protection:
   \        0x0   0xE580'1068        STR      R1,[R0, #+104]
    459          }
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
    460          

   \                                 In section SOFTPACK, align 4, keep-with-next
    461          void pwmc_enable_fault_protection(Pwm *pwm, uint8_t channel,
    462          		uint8_t fault_inputs)
    463          {
   \                     pwmc_enable_fault_protection:
   \        0x0   0xE92D'407C        PUSH     {R2-R6,LR}
   \        0x4   0xE1A0'6001        MOV      R6,R1
   \        0x8   0xE1A0'4000        MOV      R4,R0
    464          	volatile uint32_t tmp;
    465          	assert(channel < ARRAY_SIZE(pwm->PWM_CH));
   \        0xC   0xE356'0004        CMP      R6,#+4
   \       0x10   0xE1A0'5002        MOV      R5,R2
   \       0x14   0x3A00'0004        BCC      ??pwmc_enable_fault_protection_0
   \       0x18   0x....'....        LDR      R1,??DataTable24_2
   \       0x1C   0xE300'21D1        MOVW     R2,#+465
   \       0x20   0xE281'0050        ADD      R0,R1,#+80
   \       0x24   0x....'....        BL       __aeabi_assert
   \       0x28   0x....'....        BL       __iar_EmptyStepPoint
    466          	tmp = pwm->PWM_FPE;
   \                     ??pwmc_enable_fault_protection_0:
   \       0x2C   0xE594'006C        LDR      R0,[R4, #+108]
    467          	tmp &= ~(PWM_FPE_FPE0_Msk << (8 * channel));
   \       0x30   0xE3A0'C0FF        MOV      R12,#+255
   \       0x34   0xE58D'0000        STR      R0,[SP, #+0]
   \       0x38   0xE1A0'0186        LSL      R0,R6,#+3
   \       0x3C   0xE59D'3000        LDR      R3,[SP, #+0]
   \       0x40   0xE1E0'C01C        MVN      R12,R12, LSL R0
   \       0x44   0xE00C'C003        AND      R12,R12,R3
   \       0x48   0xE58D'C000        STR      R12,[SP, #+0]
    468          	pwm->PWM_FPE = tmp | ((uint32_t)fault_inputs << (8 * channel));
   \       0x4C   0xE59D'6000        LDR      R6,[SP, #+0]
   \       0x50   0xE186'0015        ORR      R0,R6,R5, LSL R0
   \       0x54   0xE584'006C        STR      R0,[R4, #+108]
    469          }
   \       0x58   0xE8BD'8073        POP      {R0,R1,R4-R6,PC}  ;; return
    470          
    471          #endif /* CONFIG_HAVE_PWMC_FMODE */
    472          
    473          #ifdef CONFIG_HAVE_PWMC_FAULT_PROT_HIZ

   \                                 In section SOFTPACK, align 4, keep-with-next
    474          void pwmc_set_fault_protection_to_hiz(Pwm *pwm, uint32_t value)
    475          {
    476          	pwm->PWM_FPV2 = value;
   \                     pwmc_set_fault_protection_to_hiz:
   \        0x0   0xE580'10C0        STR      R1,[R0, #+192]
    477          }
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
    478          
    479          #endif /* CONFIG_HAVE_PWMC_FAULT_PROT_HIZ */
    480          
    481          #ifdef CONFIG_HAVE_PWMC_ELINE

   \                                 In section SOFTPACK, align 4, keep-with-next
    482          void pwmc_configure_event_line_mode(Pwm *pwm, uint32_t value)
    483          {
    484          	pwm->PWM_ELMR[0] = value;
   \                     pwmc_configure_event_line_mode:
   \        0x0   0xE580'107C        STR      R1,[R0, #+124]
    485          }
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
    486          #endif /* CONFIG_HAVE_PWMC_ELINE */
    487          
    488          #ifdef CONFIG_HAVE_PWMC_SPREAD_SPECTRUM

   \                                 In section SOFTPACK, align 4, keep-with-next
    489          void pwmc_configure_spread_spectrum_mode(Pwm *pwm, uint32_t value)
    490          {
    491          	/* If channel 0 is disabled, write to SSPR */
    492          	if (0 == (pwm->PWM_SR & (1 << 0)))
   \                     pwmc_configure_spread_spectrum_mode:
   \        0x0   0xE590'200C        LDR      R2,[R0, #+12]
   \        0x4   0xE312'0001        TST      R2,#0x1
    493          		pwm->PWM_SSPR = value;
   \        0x8   0x0580'10A0        STREQ    R1,[R0, #+160]
    494          	/* Otherwise use update register */
    495          	else
    496          		pwm->PWM_SSPUP = PWM_SSPUP_SPRDUP(value);
   \        0xC   0x13C1'14FF        BICNE    R1,R1,#0xFF000000
   \       0x10   0x1580'10A4        STRNE    R1,[R0, #+164]
    497          }
   \       0x14   0xE12F'FF1E        BX       LR               ;; return
    498          
    499          #endif /* CONFIG_HAVE_PWMC_SPREAD_SPECTRUM */
    500          
    501          #ifdef CONFIG_HAVE_PWMC_STEPPER_MOTOR

   \                                 In section SOFTPACK, align 4, keep-with-next
    502          void pwmc_configure_stepper_motor_mode(Pwm *pwm, uint32_t value)
    503          {
   \                     pwmc_configure_stepper_motor_mode:
   \        0x0   0xE92D'4038        PUSH     {R3-R5,LR}
   \        0x4   0xE1A0'4000        MOV      R4,R0
    504          	trace_debug("pwm: CH0-1 Gray Count %s %s, CH2-3 Gray Count %s %s\n\r", \
    505          			(0 != (value & PWM_SMMR_DOWN0)) ? "Down" : "Up", \
    506          			(0 != (value & PWM_SMMR_GCEN0)) ? "Enable" : "Disable", \
    507          			(0 != (value & PWM_SMMR_DOWN1)) ? "Down" : "Up", \
    508          			(0 != (value & PWM_SMMR_GCEN1)) ? "Enable" : "Disable");
   \        0x8   0x....'....        LDR      R0,??DataTable24_4
   \        0xC   0xE1A0'5001        MOV      R5,R1
   \       0x10   0xE590'1000        LDR      R1,[R0, #+0]
   \       0x14   0xE351'0005        CMP      R1,#+5
   \       0x18   0x3A00'000E        BCC      ??pwmc_configure_stepper_motor_mode_0
   \       0x1C   0xE315'0002        TST      R5,#0x2
   \       0x20   0x....'....        ADRNE    R0,?_19
   \       0x24   0x....'....        ADREQ    R0,?_20
   \       0x28   0xE315'0B80        TST      R5,#0x20000
   \       0x2C   0xE58D'0000        STR      R0,[SP, #+0]
   \       0x30   0x....'....        ADRNE    R3,?_17
   \       0x34   0x....'....        ADREQ    R3,??DataTable24  ;; 0x55, 0x70, 0x00, 0x00
   \       0x38   0xE315'0001        TST      R5,#0x1
   \       0x3C   0x....'....        LDR      R0,??DataTable24_13
   \       0x40   0x....'....        ADRNE    R2,?_19
   \       0x44   0x....'....        ADREQ    R2,?_20
   \       0x48   0xE315'0B40        TST      R5,#0x10000
   \       0x4C   0x....'....        ADRNE    R1,?_17
   \       0x50   0x....'....        ADREQ    R1,??DataTable24  ;; 0x55, 0x70, 0x00, 0x00
   \       0x54   0x....'....        BL       printf
    509          	pwm->PWM_SMMR = value;
   \                     ??pwmc_configure_stepper_motor_mode_0:
   \       0x58   0xE584'50B0        STR      R5,[R4, #+176]
    510          }
   \       0x5C   0xE8BD'8031        POP      {R0,R4,R5,PC}    ;; return
    511          #endif /* CONFIG_HAVE_PWMC_STEPPER_MOTOR */
    512          
    513          #ifdef CONFIG_HAVE_PWMC_WP

   \                                 In section SOFTPACK, align 4, keep-with-next
    514          void pwmc_set_write_protection_control(Pwm *pwm, uint32_t value)
    515          {
    516          	pwm->PWM_WPCR = value;
   \                     pwmc_set_write_protection_control:
   \        0x0   0xE580'10E4        STR      R1,[R0, #+228]
    517          }
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
    518          

   \                                 In section SOFTPACK, align 4, keep-with-next
    519          uint32_t pwmc_get_write_protection_status(Pwm *pwm)
    520          {
    521          	return pwm->PWM_WPSR;
   \                     pwmc_get_write_protection_status:
   \        0x0   0xE590'00E8        LDR      R0,[R0, #+232]
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
    522          }
    523          #endif /* CONFIG_HAVE_PWMC_WP */
    524          
    525          #ifdef CONFIG_HAVE_PWMC_EXTERNAL_TRIGGER

   \                                 In section SOFTPACK, align 4, keep-with-next
    526          void pwmc_configure_external_trigger(Pwm *pwm,
    527          		uint32_t channel, uint32_t value)
    528          {
   \                     pwmc_configure_external_trigger:
   \        0x0   0xE92D'4070        PUSH     {R4-R6,LR}
   \        0x4   0xE1A0'4000        MOV      R4,R0
    529          	trace_debug("pwm: external trigger for channel %u, value %08x\n\r", \
    530          		(unsigned)channel, (unsigned)value);
   \        0x8   0x....'....        LDR      R0,??DataTable24_4
   \        0xC   0xE1A0'5001        MOV      R5,R1
   \       0x10   0xE1A0'6002        MOV      R6,R2
   \       0x14   0xE590'1000        LDR      R1,[R0, #+0]
   \       0x18   0xE351'0005        CMP      R1,#+5
   \       0x1C   0x3A00'0002        BCC      ??pwmc_configure_external_trigger_0
   \       0x20   0xE1A0'1005        MOV      R1,R5
   \       0x24   0x....'....        LDR      R0,??DataTable24_14
   \       0x28   0x....'....        BL       printf
    531          	switch (channel) {
   \                     ??pwmc_configure_external_trigger_0:
   \       0x2C   0xE355'0001        CMP      R5,#+1
   \       0x30   0x0A00'0002        BEQ      ??pwmc_configure_external_trigger_1
   \       0x34   0xE355'0002        CMP      R5,#+2
   \       0x38   0x0A00'0002        BEQ      ??pwmc_configure_external_trigger_2
   \       0x3C   0xEA00'0003        B        ??pwmc_configure_external_trigger_3
    532          	case 1:
    533          		pwm->PWM_ETRG1 = value;
   \                     ??pwmc_configure_external_trigger_1:
   \       0x40   0xE584'642C        STR      R6,[R4, #+1068]
    534          		break;
   \       0x44   0xE8BD'8070        POP      {R4-R6,PC}
    535          	case 2:
    536          		pwm->PWM_ETRG2 = value;
   \                     ??pwmc_configure_external_trigger_2:
   \       0x48   0xE584'644C        STR      R6,[R4, #+1100]
    537          		break;
   \       0x4C   0xE8BD'8070        POP      {R4-R6,PC}
    538          	default:
    539          		assert(0);
   \                     ??pwmc_configure_external_trigger_3:
   \       0x50   0xE300'221B        MOVW     R2,#+539
   \       0x54   0x....'....        B        ?Subroutine0
    540          		break;
    541          	}
    542          }

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ?Subroutine0:
   \        0x0   0x....'....        LDR      R1,??DataTable24_2
   \        0x4   0x....'....        ADR      R0,??DataTable24_1  ;; "0"
   \        0x8   0x....'....        BL       __aeabi_assert
   \        0xC   0x....'....        BL       __iar_EmptyStepPoint
   \       0x10   0xE8BD'8070        POP      {R4-R6,PC}       ;; return
    543          

   \                                 In section SOFTPACK, align 4, keep-with-next
    544          void pwmc_configure_leading_edge_blanking(Pwm *pwm,
    545          		uint32_t channel, uint32_t value)
    546          {
   \                     pwmc_configure_leading_edge_blanking:
   \        0x0   0xE92D'4070        PUSH     {R4-R6,LR}
   \        0x4   0xE1A0'4000        MOV      R4,R0
    547          	trace_debug("pwm: leading-edge blanking channel %u, value %08x\n\r", \
    548          		(unsigned)channel, (unsigned)value);
   \        0x8   0x....'....        LDR      R0,??DataTable24_4
   \        0xC   0xE1A0'5001        MOV      R5,R1
   \       0x10   0xE1A0'6002        MOV      R6,R2
   \       0x14   0xE590'1000        LDR      R1,[R0, #+0]
   \       0x18   0xE351'0005        CMP      R1,#+5
   \       0x1C   0x3A00'0002        BCC      ??pwmc_configure_leading_edge_blanking_0
   \       0x20   0xE1A0'1005        MOV      R1,R5
   \       0x24   0x....'....        LDR      R0,??DataTable24_15
   \       0x28   0x....'....        BL       printf
    549          	switch (channel) {
   \                     ??pwmc_configure_leading_edge_blanking_0:
   \       0x2C   0xE355'0001        CMP      R5,#+1
   \       0x30   0x0A00'0002        BEQ      ??pwmc_configure_leading_edge_blanking_1
   \       0x34   0xE355'0002        CMP      R5,#+2
   \       0x38   0x0A00'0002        BEQ      ??pwmc_configure_leading_edge_blanking_2
   \       0x3C   0xEA00'0003        B        ??pwmc_configure_leading_edge_blanking_3
    550          	case 1:
    551          		pwm->PWM_LEBR1 = value;
   \                     ??pwmc_configure_leading_edge_blanking_1:
   \       0x40   0xE584'6430        STR      R6,[R4, #+1072]
    552          		break;
   \       0x44   0xE8BD'8070        POP      {R4-R6,PC}
    553          	case 2:
    554          		pwm->PWM_LEBR2 = value;
   \                     ??pwmc_configure_leading_edge_blanking_2:
   \       0x48   0xE584'6450        STR      R6,[R4, #+1104]
    555          		break;
   \       0x4C   0xE8BD'8070        POP      {R4-R6,PC}
    556          	default:
    557          		assert(0);
   \                     ??pwmc_configure_leading_edge_blanking_3:
   \       0x50   0xE300'222D        MOVW     R2,#+557
   \       0x54                      REQUIRE ?Subroutine0
   \       0x54                      ;; // Fall through to label ?Subroutine0
    558          		break;
    559          	}
    560          }

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable24:
   \        0x0   0x55 0x70          DC8      0x55, 0x70, 0x00, 0x00

   \              0x00 0x00

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable24_1:
   \        0x0   0x30 0x00          DC8      "0",0x0,0x0

   \              0x00 0x00

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable24_2:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable24_3:
   \        0x0   0x....'....        DC32     ?_13

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable24_4:
   \        0x0   0x....'....        DC32     trace_level

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable24_5:
   \        0x0   0x....'....        DC32     ?_0+0x8C

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable24_6:
   \        0x0   0x....'....        DC32     ?_0+0x130

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable24_7:
   \        0x0   0x....'....        DC32     pwm_dma_channel+0x4

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable24_8:
   \        0x0   0x....'....        DC32     pwm_dma_channel

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable24_9:
   \        0x0   0x....'....        DC32     ?_14

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable24_10:
   \        0x0   0x....'....        DC32     ?_0+0x238

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable24_11:
   \        0x0   0x....'....        DC32     ?_0+0x2B8

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable24_12:
   \        0x0   0x....'....        DC32     ?_0+0x338

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable24_13:
   \        0x0   0x....'....        DC32     ?_12

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable24_14:
   \        0x0   0x....'....        DC32     ?_0+0x3B8

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable24_15:
   \        0x0   0x....'....        DC32     ?_0+0x440

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x43 0x3A          DC8 0x43, 0x3A, 0x5C, 0x77, 0x6F, 0x72, 0x6B, 0x5C

   \              0x5C 0x77    

   \              0x6F 0x72    

   \              0x6B 0x5C
   \        0x8   0x41 0x74          DC8 0x41, 0x74, 0x6D, 0x65, 0x6C, 0x53, 0x6F, 0x66

   \              0x6D 0x65    

   \              0x6C 0x53    

   \              0x6F 0x66
   \       0x10   0x74 0x50          DC8 0x74, 0x50, 0x41, 0x63, 0x6B, 0x5C, 0x61, 0x74

   \              0x41 0x63    

   \              0x6B 0x5C    

   \              0x61 0x74
   \       0x18   0x6D 0x65          DC8 0x6D, 0x65, 0x6C, 0x2D, 0x73, 0x6F, 0x66, 0x74

   \              0x6C 0x2D    

   \              0x73 0x6F    

   \              0x66 0x74
   \       0x20   0x77 0x61          DC8 0x77, 0x61, 0x72, 0x65, 0x2D, 0x70, 0x61, 0x63

   \              0x72 0x65    

   \              0x2D 0x70    

   \              0x61 0x63
   \       0x28   0x6B 0x61          DC8 0x6B, 0x61, 0x67, 0x65, 0x2D, 0x32, 0x2E, 0x31

   \              0x67 0x65    

   \              0x2D 0x32    

   \              0x2E 0x31
   \       0x30   0x37 0x5C          DC8 0x37, 0x5C, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72

   \              0x64 0x72    

   \              0x69 0x76    

   \              0x65 0x72
   \       0x38   0x73 0x5C          DC8 0x73, 0x5C, 0x70, 0x65, 0x72, 0x69, 0x70, 0x68

   \              0x70 0x65    

   \              0x72 0x69    

   \              0x70 0x68
   \       0x40   0x65 0x72          DC8 0x65, 0x72, 0x61, 0x6C, 0x73, 0x5C, 0x70, 0x77

   \              0x61 0x6C    

   \              0x73 0x5C    

   \              0x70 0x77
   \       0x48   0x6D 0x63          DC8 0x6D, 0x63, 0x2E, 0x63, 0

   \              0x2E 0x63    

   \              0x00
   \       0x4D   0x00 0x00          DC8 0, 0, 0

   \              0x00
   \       0x50   0x63 0x68          DC8 0x63, 0x68, 0x61, 0x6E, 0x6E, 0x65, 0x6C, 0x20

   \              0x61 0x6E    

   \              0x6E 0x65    

   \              0x6C 0x20
   \       0x58   0x3C 0x20          DC8 0x3C, 0x20, 0x28, 0x73, 0x69, 0x7A, 0x65, 0x6F

   \              0x28 0x73    

   \              0x69 0x7A    

   \              0x65 0x6F
   \       0x60   0x66 0x20          DC8 0x66, 0x20, 0x28, 0x28, 0x70, 0x77, 0x6D, 0x2D

   \              0x28 0x28    

   \              0x70 0x77    

   \              0x6D 0x2D
   \       0x68   0x3E 0x50          DC8 0x3E, 0x50, 0x57, 0x4D, 0x5F, 0x43, 0x48, 0x29

   \              0x57 0x4D    

   \              0x5F 0x43    

   \              0x48 0x29
   \       0x70   0x29 0x20          DC8 0x29, 0x20, 0x2F, 0x20, 0x73, 0x69, 0x7A, 0x65

   \              0x2F 0x20    

   \              0x73 0x69    

   \              0x7A 0x65
   \       0x78   0x6F 0x66          DC8 0x6F, 0x66, 0x28, 0x2A, 0x28, 0x70, 0x77, 0x6D

   \              0x28 0x2A    

   \              0x28 0x70    

   \              0x77 0x6D
   \       0x80   0x2D 0x3E          DC8 0x2D, 0x3E, 0x50, 0x57, 0x4D, 0x5F, 0x43, 0x48

   \              0x50 0x57    

   \              0x4D 0x5F    

   \              0x43 0x48
   \       0x88   0x29 0x29          DC8 0x29, 0x29, 0x29, 0

   \              0x29 0x00
   \       0x8C   0x2D 0x44          DC8 0x2D, 0x44, 0x2D, 0x20, 0x43, 0x3A, 0x5C, 0x77

   \              0x2D 0x20    

   \              0x43 0x3A    

   \              0x5C 0x77
   \       0x94   0x6F 0x72          DC8 0x6F, 0x72, 0x6B, 0x5C, 0x41, 0x74, 0x6D, 0x65

   \              0x6B 0x5C    

   \              0x41 0x74    

   \              0x6D 0x65
   \       0x9C   0x6C 0x53          DC8 0x6C, 0x53, 0x6F, 0x66, 0x74, 0x50, 0x41, 0x63

   \              0x6F 0x66    

   \              0x74 0x50    

   \              0x41 0x63
   \       0xA4   0x6B 0x5C          DC8 0x6B, 0x5C, 0x61, 0x74, 0x6D, 0x65, 0x6C, 0x2D

   \              0x61 0x74    

   \              0x6D 0x65    

   \              0x6C 0x2D
   \       0xAC   0x73 0x6F          DC8 0x73, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65

   \              0x66 0x74    

   \              0x77 0x61    

   \              0x72 0x65
   \       0xB4   0x2D 0x70          DC8 0x2D, 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65

   \              0x61 0x63    

   \              0x6B 0x61    

   \              0x67 0x65
   \       0xBC   0x2D 0x32          DC8 0x2D, 0x32, 0x2E, 0x31, 0x37, 0x5C, 0x64, 0x72

   \              0x2E 0x31    

   \              0x37 0x5C    

   \              0x64 0x72
   \       0xC4   0x69 0x76          DC8 0x69, 0x76, 0x65, 0x72, 0x73, 0x5C, 0x70, 0x65

   \              0x65 0x72    

   \              0x73 0x5C    

   \              0x70 0x65
   \       0xCC   0x72 0x69          DC8 0x72, 0x69, 0x70, 0x68, 0x65, 0x72, 0x61, 0x6C

   \              0x70 0x68    

   \              0x65 0x72    

   \              0x61 0x6C
   \       0xD4   0x73 0x5C          DC8 0x73, 0x5C, 0x70, 0x77, 0x6D, 0x63, 0x2E, 0x63

   \              0x70 0x77    

   \              0x6D 0x63    

   \              0x2E 0x63
   \       0xDC   0x3A 0x31          DC8 0x3A, 0x31, 0x38, 0x31, 0x20, 0x70, 0x77, 0x6D

   \              0x38 0x31    

   \              0x20 0x70    

   \              0x77 0x6D
   \       0xE4   0x3A 0x20          DC8 0x3A, 0x20, 0x73, 0x65, 0x74, 0x20, 0x63, 0x68

   \              0x73 0x65    

   \              0x74 0x20    

   \              0x63 0x68
   \       0xEC   0x61 0x6E          DC8 0x61, 0x6E, 0x6E, 0x65, 0x6C, 0x20, 0x25, 0x75

   \              0x6E 0x65    

   \              0x6C 0x20    

   \              0x25 0x75
   \       0xF4   0x20 0x77          DC8 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6D, 0x6F

   \              0x69 0x74    

   \              0x68 0x20    

   \              0x6D 0x6F
   \       0xFC   0x64 0x65          DC8 0x64, 0x65, 0x20, 0x30, 0x78, 0x25, 0x30, 0x38

   \              0x20 0x30    

   \              0x78 0x25    

   \              0x30 0x38
   \      0x104   0x78 0x0A          DC8 0x78, 0x0A, 0x0D, 0

   \              0x0D 0x00
   \      0x108   0x70 0x77          DC8 "pwm->PWM_CH[channel].PWM_CPRD >= duty"

   \              0x6D 0x2D    

   \              0x3E 0x50    

   \              0x57 0x4D    

   \              0x5F 0x43    

   \              0x48 0x5B    

   \              0x63 0x68    

   \              0x61 0x6E    

   \              0x6E 0x65    

   \              0x6C 0x5D    

   \              0x2E 0x50    

   \              0x57 0x4D    

   \              0x5F 0x43    

   \              0x50 0x52    

   \              0x44 0x20    

   \              0x3E 0x3D    

   \              0x20 0x64    

   \              0x75 0x74    

   \              0x79 0x00
   \      0x12E   0x00 0x00          DC8 0, 0
   \      0x130   0x2D 0x44          DC8 0x2D, 0x44, 0x2D, 0x20, 0x43, 0x3A, 0x5C, 0x77

   \              0x2D 0x20    

   \              0x43 0x3A    

   \              0x5C 0x77
   \      0x138   0x6F 0x72          DC8 0x6F, 0x72, 0x6B, 0x5C, 0x41, 0x74, 0x6D, 0x65

   \              0x6B 0x5C    

   \              0x41 0x74    

   \              0x6D 0x65
   \      0x140   0x6C 0x53          DC8 0x6C, 0x53, 0x6F, 0x66, 0x74, 0x50, 0x41, 0x63

   \              0x6F 0x66    

   \              0x74 0x50    

   \              0x41 0x63
   \      0x148   0x6B 0x5C          DC8 0x6B, 0x5C, 0x61, 0x74, 0x6D, 0x65, 0x6C, 0x2D

   \              0x61 0x74    

   \              0x6D 0x65    

   \              0x6C 0x2D
   \      0x150   0x73 0x6F          DC8 0x73, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65

   \              0x66 0x74    

   \              0x77 0x61    

   \              0x72 0x65
   \      0x158   0x2D 0x70          DC8 0x2D, 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65

   \              0x61 0x63    

   \              0x6B 0x61    

   \              0x67 0x65
   \      0x160   0x2D 0x32          DC8 0x2D, 0x32, 0x2E, 0x31, 0x37, 0x5C, 0x64, 0x72

   \              0x2E 0x31    

   \              0x37 0x5C    

   \              0x64 0x72
   \      0x168   0x69 0x76          DC8 0x69, 0x76, 0x65, 0x72, 0x73, 0x5C, 0x70, 0x65

   \              0x65 0x72    

   \              0x73 0x5C    

   \              0x70 0x65
   \      0x170   0x72 0x69          DC8 0x72, 0x69, 0x70, 0x68, 0x65, 0x72, 0x61, 0x6C

   \              0x70 0x68    

   \              0x65 0x72    

   \              0x61 0x6C
   \      0x178   0x73 0x5C          DC8 0x73, 0x5C, 0x70, 0x77, 0x6D, 0x63, 0x2E, 0x63

   \              0x70 0x77    

   \              0x6D 0x63    

   \              0x2E 0x63
   \      0x180   0x3A 0x32          DC8 0x3A, 0x32, 0x35, 0x38, 0x20, 0x70, 0x77, 0x6D

   \              0x35 0x38    

   \              0x20 0x70    

   \              0x77 0x6D
   \      0x188   0x3A 0x20          DC8 0x3A, 0x20, 0x53, 0x59, 0x4E, 0x43, 0x20, 0x43

   \              0x53 0x59    

   \              0x4E 0x43    

   \              0x20 0x43
   \      0x190   0x48 0x73          DC8 0x48, 0x73, 0x20, 0x62, 0x69, 0x74, 0x6D, 0x61

   \              0x20 0x62    

   \              0x69 0x74    

   \              0x6D 0x61
   \      0x198   0x70 0x20          DC8 0x70, 0x20, 0x30, 0x78, 0x25, 0x78, 0x2C, 0x20

   \              0x30 0x78    

   \              0x25 0x78    

   \              0x2C 0x20
   \      0x1A0   0x55 0x70          DC8 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x4D

   \              0x64 0x61    

   \              0x74 0x65    

   \              0x20 0x4D
   \      0x1A8   0x6F 0x64          DC8 0x6F, 0x64, 0x65, 0x20, 0x25, 0x75, 0x2C, 0x20

   \              0x65 0x20    

   \              0x25 0x75    

   \              0x2C 0x20
   \      0x1B0   0x44 0x4D          DC8 0x44, 0x4D, 0x41, 0x20, 0x52, 0x65, 0x71, 0x75

   \              0x41 0x20    

   \              0x52 0x65    

   \              0x71 0x75
   \      0x1B8   0x65 0x73          DC8 0x65, 0x73, 0x74, 0x20, 0x4D, 0x6F, 0x64, 0x65

   \              0x74 0x20    

   \              0x4D 0x6F    

   \              0x64 0x65
   \      0x1C0   0x20 0x25          DC8 0x20, 0x25, 0x75, 0x2C, 0x20, 0x52, 0x65, 0x71

   \              0x75 0x2C    

   \              0x20 0x52    

   \              0x65 0x71
   \      0x1C8   0x75 0x65          DC8 0x75, 0x65, 0x73, 0x74, 0x20, 0x43, 0x6F, 0x6D

   \              0x73 0x74    

   \              0x20 0x43    

   \              0x6F 0x6D
   \      0x1D0   0x70 0x61          DC8 0x70, 0x61, 0x72, 0x69, 0x73, 0x6F, 0x6E, 0x20

   \              0x72 0x69    

   \              0x73 0x6F    

   \              0x6E 0x20
   \      0x1D8   0x53 0x65          DC8 0x53, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x69, 0x6F

   \              0x6C 0x65    

   \              0x63 0x74    

   \              0x69 0x6F
   \      0x1E0   0x6E 0x20          DC8 0x6E, 0x20, 0x25, 0x75, 0x0A, 0x0D, 0

   \              0x25 0x75    

   \              0x0A 0x0D    

   \              0x00
   \      0x1E7   0x00               DC8 0
   \      0x1E8   0x28 0x70          DC8 "(pwm_sr & (pwm->PWM_SCM ^ sync_bits)) == 0"

   \              0x77 0x6D    

   \              0x5F 0x73    

   \              0x72 0x20    

   \              0x26 0x20    

   \              0x28 0x70    

   \              0x77 0x6D    

   \              0x2D 0x3E    

   \              0x50 0x57    

   \              0x4D 0x5F    

   \              0x53 0x43    

   \              0x4D 0x20    

   \              0x5E 0x20    

   \              0x73 0x79    

   \              0x6E 0x63    

   \              0x5F 0x62    

   \              0x69 0x74    

   \              0x73 0x29    

   \              0x29 0x20    

   \              0x3D 0x3D    

   \              0x20 0x30    

   \              0x00
   \      0x213   0x00               DC8 0
   \      0x214   0x28 0x28          DC8 "((mode & (0x3u << 16)) >> 16) != 3"

   \              0x6D 0x6F    

   \              0x64 0x65    

   \              0x20 0x26    

   \              0x20 0x28    

   \              0x30 0x78    

   \              0x33 0x75    

   \              0x20 0x3C    

   \              0x3C 0x20    

   \              0x31 0x36    

   \              0x29 0x29    

   \              0x20 0x3E    

   \              0x3E 0x20    

   \              0x31 0x36    

   \              0x29 0x20    

   \              0x21 0x3D    

   \              0x20 0x33    

   \              0x00
   \      0x237   0x00               DC8 0
   \      0x238   0x2D 0x44          DC8 0x2D, 0x44, 0x2D, 0x20, 0x43, 0x3A, 0x5C, 0x77

   \              0x2D 0x20    

   \              0x43 0x3A    

   \              0x5C 0x77
   \      0x240   0x6F 0x72          DC8 0x6F, 0x72, 0x6B, 0x5C, 0x41, 0x74, 0x6D, 0x65

   \              0x6B 0x5C    

   \              0x41 0x74    

   \              0x6D 0x65
   \      0x248   0x6C 0x53          DC8 0x6C, 0x53, 0x6F, 0x66, 0x74, 0x50, 0x41, 0x63

   \              0x6F 0x66    

   \              0x74 0x50    

   \              0x41 0x63
   \      0x250   0x6B 0x5C          DC8 0x6B, 0x5C, 0x61, 0x74, 0x6D, 0x65, 0x6C, 0x2D

   \              0x61 0x74    

   \              0x6D 0x65    

   \              0x6C 0x2D
   \      0x258   0x73 0x6F          DC8 0x73, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65

   \              0x66 0x74    

   \              0x77 0x61    

   \              0x72 0x65
   \      0x260   0x2D 0x70          DC8 0x2D, 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65

   \              0x61 0x63    

   \              0x6B 0x61    

   \              0x67 0x65
   \      0x268   0x2D 0x32          DC8 0x2D, 0x32, 0x2E, 0x31, 0x37, 0x5C, 0x64, 0x72

   \              0x2E 0x31    

   \              0x37 0x5C    

   \              0x64 0x72
   \      0x270   0x69 0x76          DC8 0x69, 0x76, 0x65, 0x72, 0x73, 0x5C, 0x70, 0x65

   \              0x65 0x72    

   \              0x73 0x5C    

   \              0x70 0x65
   \      0x278   0x72 0x69          DC8 0x72, 0x69, 0x70, 0x68, 0x65, 0x72, 0x61, 0x6C

   \              0x70 0x68    

   \              0x65 0x72    

   \              0x61 0x6C
   \      0x280   0x73 0x5C          DC8 0x73, 0x5C, 0x70, 0x77, 0x6D, 0x63, 0x2E, 0x63

   \              0x70 0x77    

   \              0x6D 0x63    

   \              0x2E 0x63
   \      0x288   0x3A 0x33          DC8 0x3A, 0x33, 0x36, 0x33, 0x20, 0x70, 0x77, 0x6D

   \              0x36 0x33    

   \              0x20 0x70    

   \              0x77 0x6D
   \      0x290   0x3A 0x20          DC8 0x3A, 0x20, 0x43, 0x48, 0x25, 0x75, 0x20, 0x50

   \              0x43 0x48    

   \              0x25 0x75    

   \              0x20 0x50
   \      0x298   0x57 0x4D          DC8 0x57, 0x4D, 0x25, 0x63, 0x20, 0x6F, 0x75, 0x74

   \              0x25 0x63    

   \              0x20 0x6F    

   \              0x75 0x74
   \      0x2A0   0x70 0x75          DC8 0x70, 0x75, 0x74, 0x20, 0x6F, 0x76, 0x65, 0x72

   \              0x74 0x20    

   \              0x6F 0x76    

   \              0x65 0x72
   \      0x2A8   0x72 0x69          DC8 0x72, 0x69, 0x64, 0x64, 0x65, 0x6E, 0x20, 0x74

   \              0x64 0x64    

   \              0x65 0x6E    

   \              0x20 0x74
   \      0x2B0   0x6F 0x20          DC8 0x6F, 0x20, 0x25, 0x75, 0x0A, 0x0D, 0

   \              0x25 0x75    

   \              0x0A 0x0D    

   \              0x00
   \      0x2B7   0x00               DC8 0
   \      0x2B8   0x2D 0x44          DC8 0x2D, 0x44, 0x2D, 0x20, 0x43, 0x3A, 0x5C, 0x77

   \              0x2D 0x20    

   \              0x43 0x3A    

   \              0x5C 0x77
   \      0x2C0   0x6F 0x72          DC8 0x6F, 0x72, 0x6B, 0x5C, 0x41, 0x74, 0x6D, 0x65

   \              0x6B 0x5C    

   \              0x41 0x74    

   \              0x6D 0x65
   \      0x2C8   0x6C 0x53          DC8 0x6C, 0x53, 0x6F, 0x66, 0x74, 0x50, 0x41, 0x63

   \              0x6F 0x66    

   \              0x74 0x50    

   \              0x41 0x63
   \      0x2D0   0x6B 0x5C          DC8 0x6B, 0x5C, 0x61, 0x74, 0x6D, 0x65, 0x6C, 0x2D

   \              0x61 0x74    

   \              0x6D 0x65    

   \              0x6C 0x2D
   \      0x2D8   0x73 0x6F          DC8 0x73, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65

   \              0x66 0x74    

   \              0x77 0x61    

   \              0x72 0x65
   \      0x2E0   0x2D 0x70          DC8 0x2D, 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65

   \              0x61 0x63    

   \              0x6B 0x61    

   \              0x67 0x65
   \      0x2E8   0x2D 0x32          DC8 0x2D, 0x32, 0x2E, 0x31, 0x37, 0x5C, 0x64, 0x72

   \              0x2E 0x31    

   \              0x37 0x5C    

   \              0x64 0x72
   \      0x2F0   0x69 0x76          DC8 0x69, 0x76, 0x65, 0x72, 0x73, 0x5C, 0x70, 0x65

   \              0x65 0x72    

   \              0x73 0x5C    

   \              0x70 0x65
   \      0x2F8   0x72 0x69          DC8 0x72, 0x69, 0x70, 0x68, 0x65, 0x72, 0x61, 0x6C

   \              0x70 0x68    

   \              0x65 0x72    

   \              0x61 0x6C
   \      0x300   0x73 0x5C          DC8 0x73, 0x5C, 0x70, 0x77, 0x6D, 0x63, 0x2E, 0x63

   \              0x70 0x77    

   \              0x6D 0x63    

   \              0x2E 0x63
   \      0x308   0x3A 0x33          DC8 0x3A, 0x33, 0x39, 0x33, 0x20, 0x70, 0x77, 0x6D

   \              0x39 0x33    

   \              0x20 0x70    

   \              0x77 0x6D
   \      0x310   0x3A 0x20          DC8 0x3A, 0x20, 0x43, 0x48, 0x25, 0x75, 0x20, 0x50

   \              0x43 0x48    

   \              0x25 0x75    

   \              0x20 0x50
   \      0x318   0x57 0x4D          DC8 0x57, 0x4D, 0x25, 0x63, 0x20, 0x6F, 0x75, 0x74

   \              0x25 0x63    

   \              0x20 0x6F    

   \              0x75 0x74
   \      0x320   0x70 0x75          DC8 0x70, 0x75, 0x74, 0x20, 0x6F, 0x76, 0x65, 0x72

   \              0x74 0x20    

   \              0x6F 0x76    

   \              0x65 0x72
   \      0x328   0x72 0x69          DC8 0x72, 0x69, 0x64, 0x65, 0x20, 0x64, 0x69, 0x73

   \              0x64 0x65    

   \              0x20 0x64    

   \              0x69 0x73
   \      0x330   0x61 0x62          DC8 0x61, 0x62, 0x6C, 0x65, 0x64, 0x0A, 0x0D, 0

   \              0x6C 0x65    

   \              0x64 0x0A    

   \              0x0D 0x00
   \      0x338   0x2D 0x44          DC8 0x2D, 0x44, 0x2D, 0x20, 0x43, 0x3A, 0x5C, 0x77

   \              0x2D 0x20    

   \              0x43 0x3A    

   \              0x5C 0x77
   \      0x340   0x6F 0x72          DC8 0x6F, 0x72, 0x6B, 0x5C, 0x41, 0x74, 0x6D, 0x65

   \              0x6B 0x5C    

   \              0x41 0x74    

   \              0x6D 0x65
   \      0x348   0x6C 0x53          DC8 0x6C, 0x53, 0x6F, 0x66, 0x74, 0x50, 0x41, 0x63

   \              0x6F 0x66    

   \              0x74 0x50    

   \              0x41 0x63
   \      0x350   0x6B 0x5C          DC8 0x6B, 0x5C, 0x61, 0x74, 0x6D, 0x65, 0x6C, 0x2D

   \              0x61 0x74    

   \              0x6D 0x65    

   \              0x6C 0x2D
   \      0x358   0x73 0x6F          DC8 0x73, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65

   \              0x66 0x74    

   \              0x77 0x61    

   \              0x72 0x65
   \      0x360   0x2D 0x70          DC8 0x2D, 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65

   \              0x61 0x63    

   \              0x6B 0x61    

   \              0x67 0x65
   \      0x368   0x2D 0x32          DC8 0x2D, 0x32, 0x2E, 0x31, 0x37, 0x5C, 0x64, 0x72

   \              0x2E 0x31    

   \              0x37 0x5C    

   \              0x64 0x72
   \      0x370   0x69 0x76          DC8 0x69, 0x76, 0x65, 0x72, 0x73, 0x5C, 0x70, 0x65

   \              0x65 0x72    

   \              0x73 0x5C    

   \              0x70 0x65
   \      0x378   0x72 0x69          DC8 0x72, 0x69, 0x70, 0x68, 0x65, 0x72, 0x61, 0x6C

   \              0x70 0x68    

   \              0x65 0x72    

   \              0x61 0x6C
   \      0x380   0x73 0x5C          DC8 0x73, 0x5C, 0x70, 0x77, 0x6D, 0x63, 0x2E, 0x63

   \              0x70 0x77    

   \              0x6D 0x63    

   \              0x2E 0x63
   \      0x388   0x3A 0x34          DC8 0x3A, 0x34, 0x31, 0x39, 0x20, 0x70, 0x77, 0x6D

   \              0x31 0x39    

   \              0x20 0x70    

   \              0x77 0x6D
   \      0x390   0x3A 0x20          DC8 0x3A, 0x20, 0x43, 0x48, 0x25, 0x75, 0x20, 0x6F

   \              0x43 0x48    

   \              0x25 0x75    

   \              0x20 0x6F
   \      0x398   0x75 0x74          DC8 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x64, 0x65

   \              0x70 0x75    

   \              0x74 0x20    

   \              0x64 0x65
   \      0x3A0   0x61 0x64          DC8 0x61, 0x64, 0x20, 0x74, 0x69, 0x6D, 0x65, 0x20

   \              0x20 0x74    

   \              0x69 0x6D    

   \              0x65 0x20
   \      0x3A8   0x48 0x3A          DC8 0x48, 0x3A, 0x20, 0x25, 0x75, 0x2C, 0x20, 0x4C

   \              0x20 0x25    

   \              0x75 0x2C    

   \              0x20 0x4C
   \      0x3B0   0x3A 0x20          DC8 0x3A, 0x20, 0x25, 0x75, 0x0A, 0x0D, 0

   \              0x25 0x75    

   \              0x0A 0x0D    

   \              0x00
   \      0x3B7   0x00               DC8 0
   \      0x3B8   0x2D 0x44          DC8 0x2D, 0x44, 0x2D, 0x20, 0x43, 0x3A, 0x5C, 0x77

   \              0x2D 0x20    

   \              0x43 0x3A    

   \              0x5C 0x77
   \      0x3C0   0x6F 0x72          DC8 0x6F, 0x72, 0x6B, 0x5C, 0x41, 0x74, 0x6D, 0x65

   \              0x6B 0x5C    

   \              0x41 0x74    

   \              0x6D 0x65
   \      0x3C8   0x6C 0x53          DC8 0x6C, 0x53, 0x6F, 0x66, 0x74, 0x50, 0x41, 0x63

   \              0x6F 0x66    

   \              0x74 0x50    

   \              0x41 0x63
   \      0x3D0   0x6B 0x5C          DC8 0x6B, 0x5C, 0x61, 0x74, 0x6D, 0x65, 0x6C, 0x2D

   \              0x61 0x74    

   \              0x6D 0x65    

   \              0x6C 0x2D
   \      0x3D8   0x73 0x6F          DC8 0x73, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65

   \              0x66 0x74    

   \              0x77 0x61    

   \              0x72 0x65
   \      0x3E0   0x2D 0x70          DC8 0x2D, 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65

   \              0x61 0x63    

   \              0x6B 0x61    

   \              0x67 0x65
   \      0x3E8   0x2D 0x32          DC8 0x2D, 0x32, 0x2E, 0x31, 0x37, 0x5C, 0x64, 0x72

   \              0x2E 0x31    

   \              0x37 0x5C    

   \              0x64 0x72
   \      0x3F0   0x69 0x76          DC8 0x69, 0x76, 0x65, 0x72, 0x73, 0x5C, 0x70, 0x65

   \              0x65 0x72    

   \              0x73 0x5C    

   \              0x70 0x65
   \      0x3F8   0x72 0x69          DC8 0x72, 0x69, 0x70, 0x68, 0x65, 0x72, 0x61, 0x6C

   \              0x70 0x68    

   \              0x65 0x72    

   \              0x61 0x6C
   \      0x400   0x73 0x5C          DC8 0x73, 0x5C, 0x70, 0x77, 0x6D, 0x63, 0x2E, 0x63

   \              0x70 0x77    

   \              0x6D 0x63    

   \              0x2E 0x63
   \      0x408   0x3A 0x35          DC8 0x3A, 0x35, 0x32, 0x39, 0x20, 0x70, 0x77, 0x6D

   \              0x32 0x39    

   \              0x20 0x70    

   \              0x77 0x6D
   \      0x410   0x3A 0x20          DC8 0x3A, 0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6E

   \              0x65 0x78    

   \              0x74 0x65    

   \              0x72 0x6E
   \      0x418   0x61 0x6C          DC8 0x61, 0x6C, 0x20, 0x74, 0x72, 0x69, 0x67, 0x67

   \              0x20 0x74    

   \              0x72 0x69    

   \              0x67 0x67
   \      0x420   0x65 0x72          DC8 0x65, 0x72, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x63

   \              0x20 0x66    

   \              0x6F 0x72    

   \              0x20 0x63
   \      0x428   0x68 0x61          DC8 0x68, 0x61, 0x6E, 0x6E, 0x65, 0x6C, 0x20, 0x25

   \              0x6E 0x6E    

   \              0x65 0x6C    

   \              0x20 0x25
   \      0x430   0x75 0x2C          DC8 0x75, 0x2C, 0x20, 0x76, 0x61, 0x6C, 0x75, 0x65

   \              0x20 0x76    

   \              0x61 0x6C    

   \              0x75 0x65
   \      0x438   0x20 0x25          DC8 0x20, 0x25, 0x30, 0x38, 0x78, 0x0A, 0x0D, 0

   \              0x30 0x38    

   \              0x78 0x0A    

   \              0x0D 0x00
   \      0x440   0x2D 0x44          DC8 0x2D, 0x44, 0x2D, 0x20, 0x43, 0x3A, 0x5C, 0x77

   \              0x2D 0x20    

   \              0x43 0x3A    

   \              0x5C 0x77
   \      0x448   0x6F 0x72          DC8 0x6F, 0x72, 0x6B, 0x5C, 0x41, 0x74, 0x6D, 0x65

   \              0x6B 0x5C    

   \              0x41 0x74    

   \              0x6D 0x65
   \      0x450   0x6C 0x53          DC8 0x6C, 0x53, 0x6F, 0x66, 0x74, 0x50, 0x41, 0x63

   \              0x6F 0x66    

   \              0x74 0x50    

   \              0x41 0x63
   \      0x458   0x6B 0x5C          DC8 0x6B, 0x5C, 0x61, 0x74, 0x6D, 0x65, 0x6C, 0x2D

   \              0x61 0x74    

   \              0x6D 0x65    

   \              0x6C 0x2D
   \      0x460   0x73 0x6F          DC8 0x73, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65

   \              0x66 0x74    

   \              0x77 0x61    

   \              0x72 0x65
   \      0x468   0x2D 0x70          DC8 0x2D, 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65

   \              0x61 0x63    

   \              0x6B 0x61    

   \              0x67 0x65
   \      0x470   0x2D 0x32          DC8 0x2D, 0x32, 0x2E, 0x31, 0x37, 0x5C, 0x64, 0x72

   \              0x2E 0x31    

   \              0x37 0x5C    

   \              0x64 0x72
   \      0x478   0x69 0x76          DC8 0x69, 0x76, 0x65, 0x72, 0x73, 0x5C, 0x70, 0x65

   \              0x65 0x72    

   \              0x73 0x5C    

   \              0x70 0x65
   \      0x480   0x72 0x69          DC8 0x72, 0x69, 0x70, 0x68, 0x65, 0x72, 0x61, 0x6C

   \              0x70 0x68    

   \              0x65 0x72    

   \              0x61 0x6C
   \      0x488   0x73 0x5C          DC8 0x73, 0x5C, 0x70, 0x77, 0x6D, 0x63, 0x2E, 0x63

   \              0x70 0x77    

   \              0x6D 0x63    

   \              0x2E 0x63
   \      0x490   0x3A 0x35          DC8 0x3A, 0x35, 0x34, 0x37, 0x20, 0x70, 0x77, 0x6D

   \              0x34 0x37    

   \              0x20 0x70    

   \              0x77 0x6D
   \      0x498   0x3A 0x20          DC8 0x3A, 0x20, 0x6C, 0x65, 0x61, 0x64, 0x69, 0x6E

   \              0x6C 0x65    

   \              0x61 0x64    

   \              0x69 0x6E
   \      0x4A0   0x67 0x2D          DC8 0x67, 0x2D, 0x65, 0x64, 0x67, 0x65, 0x20, 0x62

   \              0x65 0x64    

   \              0x67 0x65    

   \              0x20 0x62
   \      0x4A8   0x6C 0x61          DC8 0x6C, 0x61, 0x6E, 0x6B, 0x69, 0x6E, 0x67, 0x20

   \              0x6E 0x6B    

   \              0x69 0x6E    

   \              0x67 0x20
   \      0x4B0   0x63 0x68          DC8 0x63, 0x68, 0x61, 0x6E, 0x6E, 0x65, 0x6C, 0x20

   \              0x61 0x6E    

   \              0x6E 0x65    

   \              0x6C 0x20
   \      0x4B8   0x25 0x75          DC8 0x25, 0x75, 0x2C, 0x20, 0x76, 0x61, 0x6C, 0x75

   \              0x2C 0x20    

   \              0x76 0x61    

   \              0x6C 0x75
   \      0x4C0   0x65 0x20          DC8 0x65, 0x20, 0x25, 0x30, 0x38, 0x78, 0x0A, 0x0D

   \              0x25 0x30    

   \              0x38 0x78    

   \              0x0A 0x0D
   \      0x4C8   0x00               DC8 0
   \      0x4C9   0x00 0x00          DC8 0, 0, 0

   \              0x00

   \                                 In section .rodata, align 4
   \                     ?_12:
   \        0x0   0x2D 0x44          DC8 0x2D, 0x44, 0x2D, 0x20, 0x43, 0x3A, 0x5C, 0x77

   \              0x2D 0x20    

   \              0x43 0x3A    

   \              0x5C 0x77
   \        0x8   0x6F 0x72          DC8 0x6F, 0x72, 0x6B, 0x5C, 0x41, 0x74, 0x6D, 0x65

   \              0x6B 0x5C    

   \              0x41 0x74    

   \              0x6D 0x65
   \       0x10   0x6C 0x53          DC8 0x6C, 0x53, 0x6F, 0x66, 0x74, 0x50, 0x41, 0x63

   \              0x6F 0x66    

   \              0x74 0x50    

   \              0x41 0x63
   \       0x18   0x6B 0x5C          DC8 0x6B, 0x5C, 0x61, 0x74, 0x6D, 0x65, 0x6C, 0x2D

   \              0x61 0x74    

   \              0x6D 0x65    

   \              0x6C 0x2D
   \       0x20   0x73 0x6F          DC8 0x73, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65

   \              0x66 0x74    

   \              0x77 0x61    

   \              0x72 0x65
   \       0x28   0x2D 0x70          DC8 0x2D, 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65

   \              0x61 0x63    

   \              0x6B 0x61    

   \              0x67 0x65
   \       0x30   0x2D 0x32          DC8 0x2D, 0x32, 0x2E, 0x31, 0x37, 0x5C, 0x64, 0x72

   \              0x2E 0x31    

   \              0x37 0x5C    

   \              0x64 0x72
   \       0x38   0x69 0x76          DC8 0x69, 0x76, 0x65, 0x72, 0x73, 0x5C, 0x70, 0x65

   \              0x65 0x72    

   \              0x73 0x5C    

   \              0x70 0x65
   \       0x40   0x72 0x69          DC8 0x72, 0x69, 0x70, 0x68, 0x65, 0x72, 0x61, 0x6C

   \              0x70 0x68    

   \              0x65 0x72    

   \              0x61 0x6C
   \       0x48   0x73 0x5C          DC8 0x73, 0x5C, 0x70, 0x77, 0x6D, 0x63, 0x2E, 0x63

   \              0x70 0x77    

   \              0x6D 0x63    

   \              0x2E 0x63
   \       0x50   0x3A 0x35          DC8 0x3A, 0x35, 0x30, 0x34, 0x20, 0x70, 0x77, 0x6D

   \              0x30 0x34    

   \              0x20 0x70    

   \              0x77 0x6D
   \       0x58   0x3A 0x20          DC8 0x3A, 0x20, 0x43, 0x48, 0x30, 0x2D, 0x31, 0x20

   \              0x43 0x48    

   \              0x30 0x2D    

   \              0x31 0x20
   \       0x60   0x47 0x72          DC8 0x47, 0x72, 0x61, 0x79, 0x20, 0x43, 0x6F, 0x75

   \              0x61 0x79    

   \              0x20 0x43    

   \              0x6F 0x75
   \       0x68   0x6E 0x74          DC8 0x6E, 0x74, 0x20, 0x25, 0x73, 0x20, 0x25, 0x73

   \              0x20 0x25    

   \              0x73 0x20    

   \              0x25 0x73
   \       0x70   0x2C 0x20          DC8 0x2C, 0x20, 0x43, 0x48, 0x32, 0x2D, 0x33, 0x20

   \              0x43 0x48    

   \              0x32 0x2D    

   \              0x33 0x20
   \       0x78   0x47 0x72          DC8 0x47, 0x72, 0x61, 0x79, 0x20, 0x43, 0x6F, 0x75

   \              0x61 0x79    

   \              0x20 0x43    

   \              0x6F 0x75
   \       0x80   0x6E 0x74          DC8 0x6E, 0x74, 0x20, 0x25, 0x73, 0x20, 0x25, 0x73

   \              0x20 0x25    

   \              0x73 0x20    

   \              0x25 0x73
   \       0x88   0x0A 0x0D          DC8 0x0A, 0x0D, 0

   \              0x00
   \       0x8B   0x00               DC8 0

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ?_15:
   \        0x0   0x70 0x77          DC8 "pwm_cprd - pwm_cdty >= time_h"

   \              0x6D 0x5F    

   \              0x63 0x70    

   \              0x72 0x64    

   \              0x20 0x2D    

   \              0x20 0x70    

   \              0x77 0x6D    

   \              0x5F 0x63    

   \              0x64 0x74    

   \              0x79 0x20    

   \              0x3E 0x3D    

   \              0x20 0x74    

   \              0x69 0x6D    

   \              0x65 0x5F    

   \              0x68 0x00
   \       0x1E   0x00 0x00          DC8 0, 0

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ?_16:
   \        0x0   0x70 0x77          DC8 "pwm_cdty >= time_l"

   \              0x6D 0x5F    

   \              0x63 0x64    

   \              0x74 0x79    

   \              0x20 0x3E    

   \              0x3D 0x20    

   \              0x74 0x69    

   \              0x6D 0x65    

   \              0x5F 0x6C    

   \              0x00
   \       0x13   0x00               DC8 0

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ?_17:
   \        0x0   0x44 0x6F          DC8 "Down"

   \              0x77 0x6E    

   \              0x00
   \        0x5   0x00 0x00          DC8 0, 0, 0

   \              0x00

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ?_19:
   \        0x0   0x45 0x6E          DC8 "Enable"

   \              0x61 0x62    

   \              0x6C 0x65    

   \              0x00
   \        0x7   0x00               DC8 0

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ?_20:
   \        0x0   0x44 0x69          DC8 "Disable"

   \              0x73 0x61    

   \              0x62 0x6C    

   \              0x65 0x00

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_13:
   \        0x0   0x78 0x20          DC8 "x < 8"

   \              0x3C 0x20    

   \              0x38 0x00
   \        0x6   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_14:
   \        0x0   0x70 0x77          DC8 "pwm_dma_channel"

   \              0x6D 0x5F    

   \              0x64 0x6D    

   \              0x61 0x5F    

   \              0x63 0x68    

   \              0x61 0x6E    

   \              0x6E 0x65    

   \              0x6C 0x00

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_18:
   \        0x0   0x55 0x70          DC8 "Up"

   \              0x00
   \        0x3   0x00               DC8 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     ?_21:
   \        0x0   0x30 0x00          DC8 "0"
    561          #endif /* CONFIG_HAVE_PWMC_EXTERNAL_TRIGGER */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   _pwm_dma_callback_wrapper
         8   -> callback_call
         8   -> dma_free_channel
         8   -> dma_is_transfer_done
      16   pwmc_configure_channel
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
        16   -> printf
       0   pwmc_configure_clocks
      24   pwmc_configure_comparison_unit
        24   -> __aeabi_assert
        24   -> __iar_EmptyStepPoint
       0   pwmc_configure_event_line_mode
      16   pwmc_configure_external_trigger
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
        16   -> printf
      16   pwmc_configure_leading_edge_blanking
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
        16   -> printf
       0   pwmc_configure_spread_spectrum_mode
      16   pwmc_configure_stepper_motor_mode
        16   -> printf
      24   pwmc_configure_sync_channels
        24   -> __aeabi_assert
        24   -> __iar_EmptyStepPoint
        24   -> printf
       0   pwmc_disable_channel
       0   pwmc_disable_channel_it
       0   pwmc_disable_it
      24   pwmc_disable_output_override
        24   -> __aeabi_assert
        24   -> __iar_EmptyStepPoint
        24   -> printf
      56   pwmc_dma_duty_cycle
        56   -> __aeabi_assert
        56   -> __iar_EmptyStepPoint
        56   -> cache_clean_region
        56   -> callback_set
        56   -> dma_configure_transfer
        56   -> dma_reset_channel
        56   -> dma_set_callback
        56   -> dma_start_transfer
       0   pwmc_enable_channel
       0   pwmc_enable_channel_it
      24   pwmc_enable_fault_protection
        24   -> __aeabi_assert
        24   -> __iar_EmptyStepPoint
       0   pwmc_enable_it
       0   pwmc_fault_clear
       0   pwmc_get_fault_status
       0   pwmc_get_it_status1
       0   pwmc_get_it_status2
       0   pwmc_get_write_protection_status
      32   pwmc_output_dead_time
        32   -> __aeabi_assert
        32   -> __iar_EmptyStepPoint
        32   -> printf
      32   pwmc_output_override
        32   -> __aeabi_assert
        32   -> __iar_EmptyStepPoint
        32   -> printf
      16   pwmc_set_dma_finished_callback
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
         0   -> callback_copy
        16   -> dma_allocate_channel
        16   -> get_pwm_id_from_addr
      24   pwmc_set_duty_cycle
        24   -> __aeabi_assert
        24   -> __iar_EmptyStepPoint
       0   pwmc_set_fault_mode
       0   pwmc_set_fault_protection
       0   pwmc_set_fault_protection_to_hiz
      16   pwmc_set_period
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
       0   pwmc_set_sync_channels_update_period
       0   pwmc_set_sync_channels_update_period_update
       0   pwmc_set_sync_channels_update_unlock
       0   pwmc_set_write_protection_control


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable24
       4  ??DataTable24_1
       4  ??DataTable24_10
       4  ??DataTable24_11
       4  ??DataTable24_12
       4  ??DataTable24_13
       4  ??DataTable24_14
       4  ??DataTable24_15
       4  ??DataTable24_2
       4  ??DataTable24_3
       4  ??DataTable24_4
       4  ??DataTable24_5
       4  ??DataTable24_6
       4  ??DataTable24_7
       4  ??DataTable24_8
       4  ??DataTable24_9
      20  ?Subroutine0
       8  ?Subroutine1
   1'228  ?_0
     140  ?_12
       8  ?_13
      16  ?_14
      32  ?_15
      20  ?_16
       8  ?_17
       4  ?_18
       8  ?_19
       8  ?_20
       2  ?_21
      48  _pwm_dma_callback_wrapper
      12  pwm_dma_channel
          pwmc_cb
     160  pwmc_configure_channel
       8  pwmc_configure_clocks
      80  pwmc_configure_comparison_unit
       8  pwmc_configure_event_line_mode
      88  pwmc_configure_external_trigger
      84  pwmc_configure_leading_edge_blanking
      24  pwmc_configure_spread_spectrum_mode
      96  pwmc_configure_stepper_motor_mode
     144  pwmc_configure_sync_channels
      16  pwmc_disable_channel
      16  pwmc_disable_channel_it
      12  pwmc_disable_it
     148  pwmc_disable_output_override
     200  pwmc_dma_duty_cycle
      16  pwmc_enable_channel
      16  pwmc_enable_channel_it
      92  pwmc_enable_fault_protection
      12  pwmc_enable_it
       8  pwmc_fault_clear
       8  pwmc_get_fault_status
       8  pwmc_get_it_status1
       8  pwmc_get_it_status2
       8  pwmc_get_write_protection_status
     184  pwmc_output_dead_time
     196  pwmc_output_override
      88  pwmc_set_dma_finished_callback
     104  pwmc_set_duty_cycle
       8  pwmc_set_fault_mode
       8  pwmc_set_fault_protection
       8  pwmc_set_fault_protection_to_hiz
      72  pwmc_set_period
      24  pwmc_set_sync_channels_update_period
      12  pwmc_set_sync_channels_update_period_update
      12  pwmc_set_sync_channels_update_unlock
       8  pwmc_set_write_protection_control

 
    12 bytes in section .bss
 1'398 bytes in section .rodata
 2'200 bytes in section SOFTPACK
 
 2'200 bytes of CODE  memory
 1'398 bytes of CONST memory
    12 bytes of DATA  memory

Errors: none
Warnings: none
