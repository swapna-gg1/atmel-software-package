###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.1.245/W32 for ARM         24/Nov/2020  14:08:58
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\arch\arm\l1cache_cp15.c
#    Command line      =
#        -f C:\Users\c40450\AppData\Local\Temp\EWCA25.tmp
#        (C:\work\AtmelSoftPAck\atmel-software-package-2.17\arch\arm\l1cache_cp15.c
#        -D "SOFTPACK_VERSION=\"2.17\"" -D TRACE_LEVEL=5 -D VARIANT_DDRAM -D
#        CONFIG_ARCH_ARMV7A -D CONFIG_ARCH_ARM -D CONFIG_SOC_SAMA5D2 -D
#        CONFIG_CHIP_SAMA5D27 -D CONFIG_PACKAGE_289PIN -D
#        CONFIG_BOARD_SAMA5D27_SOM1_EK -D CONFIG_HAVE_AIC5 -D
#        CONFIG_HAVE_FLEXCOM -D CONFIG_HAVE_PIO4 -D CONFIG_HAVE_PIO4_SECURE -D
#        CONFIG_HAVE_NFC -D CONFIG_HAVE_PIT -D CONFIG_HAVE_SMC -D
#        CONFIG_HAVE_SMC_SCRAMBLING -D CONFIG_HAVE_GMAC_QUEUES -D
#        CONFIG_HAVE_MPDDRC -D CONFIG_HAVE_MPDDRC_DATA_PATH -D
#        CONFIG_HAVE_MPDDRC_IO_CALIBRATION -D CONFIG_HAVE_MPDDRC_DDR2 -D
#        CONFIG_HAVE_MPDDRC_LPDDR2 -D CONFIG_HAVE_MPDDRC_DDR3 -D
#        CONFIG_HAVE_MPDDRC_LPDDR3 -D CONFIG_HAVE_ADC_SETTLING_TIME -D
#        CONFIG_HAVE_ADC_DIFF_INPUT -D CONFIG_HAVE_ADC_SEQ_R2 -D
#        CONFIG_HAVE_PMC_FAST_STARTUP -D CONFIG_HAVE_PMC_GENERATED_CLOCKS -D
#        CONFIG_HAVE_PMC_AUDIO_CLOCK -D CONFIG_HAVE_PMC_PLLADIV2 -D
#        CONFIG_HAVE_PMC_H32MXDIV -D CONFIG_HAVE_PMC_UPLL_BIAS -D
#        CONFIG_HAVE_SCKC -D CONFIG_HAVE_PWMC_DMA -D
#        CONFIG_HAVE_PWMC_SPREAD_SPECTRUM -D CONFIG_HAVE_PWMC_EXTERNAL_TRIGGER
#        -D CONFIG_HAVE_PWMC_FAULT_PROT_HIZ -D CONFIG_HAVE_PWMC_STEPPER_MOTOR
#        -D CONFIG_HAVE_PWMC_CMP_UNIT -D CONFIG_HAVE_PWMC_SYNC_MODE -D
#        CONFIG_HAVE_PWMC_OOV -D CONFIG_HAVE_PWMC_FMODE -D CONFIG_HAVE_PWMC_WP
#        -D CONFIG_HAVE_PWMC_DTIME -D CONFIG_HAVE_PWMC_ELINE -D
#        CONFIG_HAVE_SFRBU -D CONFIG_HAVE_L2CC -D CONFIG_HAVE_SAIC -D
#        CONFIG_HAVE_XDMAC -D CONFIG_HAVE_XDMAC_DATA_WIDTH_DWORD -D
#        CONFIG_HAVE_SECUMOD -D CONFIG_HAVE_SFC -D CONFIG_HAVE_PWMC -D
#        CONFIG_HAVE_SECURE_MATRIX -D CONFIG_HAVE_DDR2_W971GG6SB -D
#        CONFIG_HAVE_RSTC_CONFIGURABLE_USER_RESET -D CONFIG_HAVE_TC_FAULT_MODE
#        -D CONFIG_HAVE_TC_DMA_MODE -D CONFIG_HAVE_RTC_CALIBRATION -D
#        CONFIG_HAVE_RTC_MODE_PERSIAN -D CONFIG_HAVE_RTC_MODE_UTC -D
#        CONFIG_HAVE_RTC_TAMPER -D CONFIG_HAVE_SHDWC -D CONFIG_HAVE_LED -D
#        CONFIG_HAVE_MMU -D CONFIG_HAVE_L1CACHE -D CONFIG_HAVE_L2CACHE -D
#        CONFIG_HAVE_UART -D CONFIG_HAVE_SERIALD_UART -D CONFIG_HAVE_USART -D
#        CONFIG_HAVE_USART_FIFO --preprocess
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\build\sama5d27-som1-ek\ddram\List
#        -lC
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\build\sama5d27-som1-ek\ddram\List
#        --diag_suppress Pa050 -o
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\build\sama5d27-som1-ek\ddram\Obj
#        --debug --endian=little --cpu=Cortex-A5 -e --fpu=VFPv4_D16
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\arch\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\utils\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\target\common\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\target\sama5d2\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\drivers\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\lib\
#        --section .text=SOFTPACK --cpu_mode arm -Oh)
#    Locale            =  C
#    List file         =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\build\sama5d27-som1-ek\ddram\List\l1cache_cp15.lst
#    Object file       =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\build\sama5d27-som1-ek\ddram\Obj\l1cache_cp15.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\work\AtmelSoftPAck\atmel-software-package-2.17\arch\arm\l1cache_cp15.c
      1          /* ----------------------------------------------------------------------------
      2           *         SAM Software Package License
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2015-2016, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          /*
     31           * L1 Cache functions implementation for ARMv5-TE and ARMv7-A
     32           */
     33          
     34          /*----------------------------------------------------------------------------
     35           *        Headers
     36           *----------------------------------------------------------------------------*/
     37          
     38          #include "chip.h"
     39          #include "barriers.h"
     40          
     41          #include "arm/cp15.h"
     42          
     43          #include "mm/l1cache.h"
     44          
     45          #include <assert.h>
     46          
     47          /*----------------------------------------------------------------------------
     48           *        Global functions
     49           *----------------------------------------------------------------------------*/
     50          

   \                                 In section SOFTPACK, align 4, keep-with-next
     51          void icache_invalidate(void)
     52          {
     53          	cp15_icache_invalidate();
   \                     icache_invalidate:
   \        0x0   0xE3A0'0000        MOV      R0,#+0
   \        0x4   0xEE07'0F15        mcr p15, 0, R0, c7, c5, 0
     54          	isb();
   \        0x8   0xF57F'F06F        isb
     55          }
   \        0xC   0xE12F'FF1E        BX       LR               ;; return
     56          

   \                                 In section SOFTPACK, align 4, keep-with-next
     57          bool icache_is_enabled(void)
     58          {
     59          	return (cp15_read_sctlr() & CP15_SCTLR_I) != 0;
   \                     icache_is_enabled:
   \        0x0   0xEE11'0F10        mrc p15, 0, R0, c1, c0, 0
   \        0x4   0xE1A0'0620        LSR      R0,R0,#+12
   \        0x8   0xE200'0001        AND      R0,R0,#0x1
   \        0xC   0xE12F'FF1E        BX       LR               ;; return
     60          }
     61          

   \                                 In section SOFTPACK, align 4, keep-with-next
     62          void icache_enable(void)
     63          {
     64          	uint32_t sctlr = cp15_read_sctlr();
   \                     icache_enable:
   \        0x0   0xEE11'0F10        mrc p15, 0, R0, c1, c0, 0
     65          	if ((sctlr & CP15_SCTLR_I) == 0) {
   \        0x4   0xE310'0D40        TST      R0,#0x1000
   \        0x8   0x1A00'0004        BNE      ??icache_enable_0
     66          		icache_invalidate();
   \        0xC   0xE3A0'1000        MOV      R1,#+0
     67          		cp15_write_sctlr(sctlr | CP15_SCTLR_I);
   \       0x10   0xE380'0D40        ORR      R0,R0,#0x1000
   \       0x14   0xEE07'1F15        mcr p15, 0, R1, c7, c5, 0
   \       0x18   0xF57F'F06F        isb
   \       0x1C   0xEE01'0F10        mcr p15, 0, R0, c1, c0, 0
     68          	}
     69          }
   \                     ??icache_enable_0:
   \       0x20   0xE12F'FF1E        BX       LR               ;; return
     70          

   \                                 In section SOFTPACK, align 4, keep-with-next
     71          void icache_disable(void)
     72          {
     73          	uint32_t sctlr = cp15_read_sctlr();
   \                     icache_disable:
   \        0x0   0xEE11'0F10        mrc p15, 0, R0, c1, c0, 0
     74          	if (sctlr & CP15_SCTLR_I) {
   \        0x4   0xE310'0D40        TST      R0,#0x1000
   \        0x8   0x0A00'0004        BEQ      ??icache_disable_0
     75          		cp15_write_sctlr(sctlr & ~CP15_SCTLR_I);
   \        0xC   0xE3C0'0D40        BIC      R0,R0,#0x1000
   \       0x10   0xEE01'0F10        mcr p15, 0, R0, c1, c0, 0
     76          		icache_invalidate();
   \       0x14   0xE3A0'0000        MOV      R0,#+0
   \       0x18   0xEE07'0F15        mcr p15, 0, R0, c7, c5, 0
   \       0x1C   0xF57F'F06F        isb
     77          	}
     78          }
   \                     ??icache_disable_0:
   \       0x20   0xE12F'FF1E        BX       LR               ;; return
     79          

   \                                 In section SOFTPACK, align 4, keep-with-next
     80          bool dcache_is_enabled(void)
     81          {
     82          	return (cp15_read_sctlr() & (CP15_SCTLR_C | CP15_SCTLR_M)) ==
     83          		(CP15_SCTLR_C | CP15_SCTLR_M);
   \                     dcache_is_enabled:
   \        0x0   0xEE11'0F10        mrc p15, 0, R0, c1, c0, 0
   \        0x4   0xE200'0005        AND      R0,R0,#0x5
   \        0x8   0xE350'0005        CMP      R0,#+5
   \        0xC   0x03A0'0001        MOVEQ    R0,#+1
   \       0x10   0x13A0'0000        MOVNE    R0,#+0
   \       0x14   0xE12F'FF1E        BX       LR               ;; return
     84          }
     85          

   \                                 In section SOFTPACK, align 4, keep-with-next
     86          void dcache_enable(void)
     87          {
   \                     dcache_enable:
   \        0x0   0xE92D'4010        PUSH     {R4,LR}
     88          	uint32_t sctlr = cp15_read_sctlr();
   \        0x4   0xEE11'4F10        mrc p15, 0, R4, c1, c0, 0
     89          	if ((sctlr & CP15_SCTLR_C) == 0) {
   \        0x8   0xE314'0004        TST      R4,#0x4
   \        0xC   0x1A00'0009        BNE      ??dcache_enable_0
     90          		assert(sctlr & CP15_SCTLR_M);
   \       0x10   0xE314'0001        TST      R4,#0x1
   \       0x14   0x1A00'0004        BNE      ??dcache_enable_1
   \       0x18   0xE3A0'205A        MOV      R2,#+90
   \       0x1C   0x....'....        LDR      R1,??DataTable6
   \       0x20   0x....'....        ADR      R0,?_1
   \       0x24   0x....'....        BL       __aeabi_assert
   \       0x28   0x....'....        BL       __iar_EmptyStepPoint
     91          		dcache_invalidate();
   \                     ??dcache_enable_1:
   \       0x2C   0x....'....        BL       dcache_invalidate
     92          		cp15_write_sctlr(sctlr | CP15_SCTLR_C);
   \       0x30   0xE384'0004        ORR      R0,R4,#0x4
   \       0x34   0xEE01'0F10        mcr p15, 0, R0, c1, c0, 0
     93          	}
     94          }
   \                     ??dcache_enable_0:
   \       0x38   0xE8BD'8010        POP      {R4,PC}          ;; return
     95          

   \                                 In section SOFTPACK, align 4, keep-with-next
     96          void dcache_disable(void)
     97          {
   \                     dcache_disable:
   \        0x0   0xE92D'4010        PUSH     {R4,LR}
     98          	uint32_t sctlr = cp15_read_sctlr();
   \        0x4   0xEE11'4F10        mrc p15, 0, R4, c1, c0, 0
     99          	if (sctlr & CP15_SCTLR_C) {
   \        0x8   0xE314'0004        TST      R4,#0x4
   \        0xC   0x0A00'0004        BEQ      ??dcache_disable_0
    100          		dcache_clean();
   \       0x10   0x....'....        BL       dcache_clean
    101          		cp15_write_sctlr(sctlr & ~CP15_SCTLR_C);
   \       0x14   0xE3C4'0004        BIC      R0,R4,#0x4
   \       0x18   0xEE01'0F10        mcr p15, 0, R0, c1, c0, 0
    102          		dcache_invalidate();
   \       0x1C   0xE8BD'4010        POP      {R4,LR}
   \       0x20   0x....'....        B        dcache_invalidate  ;; tailcall
    103          	}
    104          }
   \                     ??dcache_disable_0:
   \       0x24   0xE8BD'8010        POP      {R4,PC}          ;; return
    105          

   \                                 In section SOFTPACK, align 4, keep-with-next
    106          void dcache_invalidate(void)
    107          {
    108          	uint32_t set, way;
    109          
    110          	for (way = 0; way < L1_CACHE_WAYS; way++)
   \                     dcache_invalidate:
   \        0x0   0xE3A0'0000        MOV      R0,#+0
    111          		for (set = 0; set < L1_CACHE_SETS; set++)
   \                     ??dcache_invalidate_0:
   \        0x4   0xE3A0'1000        MOV      R1,#+0
   \        0x8   0xE1A0'2F00        LSL      R2,R0,#+30
    112          			cp15_dcache_invalidate_setway(L1_CACHE_SETWAY(set, way));
   \                     ??dcache_invalidate_1:
   \        0xC   0xE182'3281        ORR      R3,R2,R1, LSL #+5
   \       0x10   0xE281'1001        ADD      R1,R1,#+1
   \       0x14   0xE351'0F40        CMP      R1,#+256
   \       0x18   0xEE07'3F56        mcr p15, 0, R3, c7, c6, 2
   \       0x1C   0x3AFF'FFFA        BCC      ??dcache_invalidate_1
   \       0x20   0xE280'0001        ADD      R0,R0,#+1
   \       0x24   0xE350'0004        CMP      R0,#+4
   \       0x28   0x3AFF'FFF5        BCC      ??dcache_invalidate_0
    113          
    114          	dsb();
   \       0x2C   0xF57F'F04F        dsb
    115          }
   \       0x30   0xE12F'FF1E        BX       LR               ;; return
    116          

   \                                 In section SOFTPACK, align 4, keep-with-next
    117          void dcache_clean(void)
    118          {
    119          	uint32_t set, way;
    120          
    121          	for (way = 0; way < L1_CACHE_WAYS; way++)
   \                     dcache_clean:
   \        0x0   0xE3A0'0000        MOV      R0,#+0
    122          		for (set = 0; set < L1_CACHE_SETS; set++)
   \                     ??dcache_clean_0:
   \        0x4   0xE3A0'1000        MOV      R1,#+0
   \        0x8   0xE1A0'2F00        LSL      R2,R0,#+30
    123          			cp15_dcache_clean_setway(L1_CACHE_SETWAY(set, way));
   \                     ??dcache_clean_1:
   \        0xC   0xE182'3281        ORR      R3,R2,R1, LSL #+5
   \       0x10   0xE281'1001        ADD      R1,R1,#+1
   \       0x14   0xE351'0F40        CMP      R1,#+256
   \       0x18   0xEE07'3F5A        mcr p15, 0, R3, c7, c10, 2
   \       0x1C   0x3AFF'FFFA        BCC      ??dcache_clean_1
   \       0x20   0xE280'0001        ADD      R0,R0,#+1
   \       0x24   0xE350'0004        CMP      R0,#+4
   \       0x28   0x3AFF'FFF5        BCC      ??dcache_clean_0
    124          
    125          	dsb();
   \       0x2C   0xF57F'F04F        dsb
    126          }
   \       0x30   0xE12F'FF1E        BX       LR               ;; return
    127          

   \                                 In section SOFTPACK, align 4, keep-with-next
    128          void dcache_clean_invalidate(void)
    129          {
    130          	uint32_t set, way;
    131          
    132          	for (way = 0; way < L1_CACHE_WAYS; way++)
   \                     dcache_clean_invalidate:
   \        0x0   0xE3A0'0000        MOV      R0,#+0
    133          		for (set = 0; set < L1_CACHE_SETS; set++)
   \                     ??dcache_clean_invalidate_0:
   \        0x4   0xE3A0'1000        MOV      R1,#+0
   \        0x8   0xE1A0'2F00        LSL      R2,R0,#+30
    134          			cp15_dcache_clean_invalidate_setway(L1_CACHE_SETWAY(set, way));
   \                     ??dcache_clean_invalidate_1:
   \        0xC   0xE182'3281        ORR      R3,R2,R1, LSL #+5
   \       0x10   0xE281'1001        ADD      R1,R1,#+1
   \       0x14   0xE351'0F40        CMP      R1,#+256
   \       0x18   0xEE07'3F5E        mcr p15, 0, R3, c7, c14, 2
   \       0x1C   0x3AFF'FFFA        BCC      ??dcache_clean_invalidate_1
   \       0x20   0xE280'0001        ADD      R0,R0,#+1
   \       0x24   0xE350'0004        CMP      R0,#+4
   \       0x28   0x3AFF'FFF5        BCC      ??dcache_clean_invalidate_0
    135          
    136          	dsb();
   \       0x2C   0xF57F'F04F        dsb
    137          }
   \       0x30   0xE12F'FF1E        BX       LR               ;; return
    138          

   \                                 In section SOFTPACK, align 4, keep-with-next
    139          void dcache_invalidate_region(uint32_t start, uint32_t end)
    140          {
   \                     dcache_invalidate_region:
   \        0x0   0xE92D'4038        PUSH     {R3-R5,LR}
   \        0x4   0xE1A0'4000        MOV      R4,R0
   \        0x8   0xE1A0'5001        MOV      R5,R1
    141          	uint32_t mva;
    142          
    143          	assert(start < end);
   \        0xC   0xE154'0005        CMP      R4,R5
   \       0x10   0x3A00'0004        BCC      ??dcache_invalidate_region_0
   \       0x14   0xE3A0'208F        MOV      R2,#+143
   \       0x18   0x....'....        LDR      R1,??DataTable6
   \       0x1C   0x....'....        ADR      R0,?_2
   \       0x20   0x....'....        BL       __aeabi_assert
   \       0x24   0x....'....        BL       __iar_EmptyStepPoint
    144          
    145          	for (mva = start & ~(L1_CACHE_BYTES - 1); mva < end; mva += L1_CACHE_BYTES)
   \                     ??dcache_invalidate_region_0:
   \       0x28   0xE3C4'001F        BIC      R0,R4,#0x1F
   \       0x2C   0xE150'0005        CMP      R0,R5
   \       0x30   0x2A00'0003        BCS      ??dcache_invalidate_region_1
    146          		cp15_dcache_invalidate_mva(mva);
   \                     ??dcache_invalidate_region_2:
   \       0x34   0xEE07'0F36        mcr p15, 0, R0, c7, c6, 1
   \       0x38   0xE280'0020        ADD      R0,R0,#+32
   \       0x3C   0xE150'0005        CMP      R0,R5
   \       0x40   0x3AFF'FFFB        BCC      ??dcache_invalidate_region_2
    147          
    148          	dsb();
   \                     ??dcache_invalidate_region_1:
   \       0x44   0xF57F'F04F        dsb
    149          }
   \       0x48   0xE8BD'8031        POP      {R0,R4,R5,PC}    ;; return
    150          

   \                                 In section SOFTPACK, align 4, keep-with-next
    151          void dcache_clean_region(uint32_t start, uint32_t end)
    152          {
   \                     dcache_clean_region:
   \        0x0   0xE92D'4038        PUSH     {R3-R5,LR}
   \        0x4   0xE1A0'4000        MOV      R4,R0
   \        0x8   0xE1A0'5001        MOV      R5,R1
    153          	uint32_t mva;
    154          
    155          	assert(start < end);
   \        0xC   0xE154'0005        CMP      R4,R5
   \       0x10   0x3A00'0004        BCC      ??dcache_clean_region_0
   \       0x14   0xE3A0'209B        MOV      R2,#+155
   \       0x18   0x....'....        LDR      R1,??DataTable6
   \       0x1C   0x....'....        ADR      R0,?_2
   \       0x20   0x....'....        BL       __aeabi_assert
   \       0x24   0x....'....        BL       __iar_EmptyStepPoint
    156          
    157          	for (mva = start & ~(L1_CACHE_BYTES - 1); mva < end; mva += L1_CACHE_BYTES)
   \                     ??dcache_clean_region_0:
   \       0x28   0xE3C4'001F        BIC      R0,R4,#0x1F
   \       0x2C   0xE150'0005        CMP      R0,R5
   \       0x30   0x2A00'0003        BCS      ??dcache_clean_region_1
    158          		cp15_dcache_clean_mva(mva);
   \                     ??dcache_clean_region_2:
   \       0x34   0xEE07'0F3A        mcr p15, 0, R0, c7, c10, 1
   \       0x38   0xE280'0020        ADD      R0,R0,#+32
   \       0x3C   0xE150'0005        CMP      R0,R5
   \       0x40   0x3AFF'FFFB        BCC      ??dcache_clean_region_2
    159          
    160          	dsb();
   \                     ??dcache_clean_region_1:
   \       0x44   0xF57F'F04F        dsb
    161          }
   \       0x48   0xE8BD'8031        POP      {R0,R4,R5,PC}    ;; return
    162          

   \                                 In section SOFTPACK, align 4, keep-with-next
    163          void dcache_clean_invalidate_region(uint32_t start, uint32_t end)
    164          {
   \                     dcache_clean_invalidate_region:
   \        0x0   0xE92D'4038        PUSH     {R3-R5,LR}
   \        0x4   0xE1A0'4000        MOV      R4,R0
   \        0x8   0xE1A0'5001        MOV      R5,R1
    165          	uint32_t mva;
    166          
    167          	assert(start < end);
   \        0xC   0xE154'0005        CMP      R4,R5
   \       0x10   0x3A00'0004        BCC      ??dcache_clean_invalidate_region_0
   \       0x14   0xE3A0'20A7        MOV      R2,#+167
   \       0x18   0x....'....        LDR      R1,??DataTable6
   \       0x1C   0x....'....        ADR      R0,?_2
   \       0x20   0x....'....        BL       __aeabi_assert
   \       0x24   0x....'....        BL       __iar_EmptyStepPoint
    168          
    169          	for (mva = start & ~(L1_CACHE_BYTES - 1); mva < end; mva += L1_CACHE_BYTES)
   \                     ??dcache_clean_invalidate_region_0:
   \       0x28   0xE3C4'001F        BIC      R0,R4,#0x1F
   \       0x2C   0xE150'0005        CMP      R0,R5
   \       0x30   0x2A00'0003        BCS      ??dcache_clean_invalidate_region_1
    170          		cp15_dcache_clean_invalidate_mva(mva);
   \                     ??dcache_clean_invalidate_region_2:
   \       0x34   0xEE07'0F3E        mcr p15, 0, R0, c7, c14, 1
   \       0x38   0xE280'0020        ADD      R0,R0,#+32
   \       0x3C   0xE150'0005        CMP      R0,R5
   \       0x40   0x3AFF'FFFB        BCC      ??dcache_clean_invalidate_region_2
    171          
    172          	dsb();
   \                     ??dcache_clean_invalidate_region_1:
   \       0x44   0xF57F'F04F        dsb
    173          }
   \       0x48   0xE8BD'8031        POP      {R0,R4,R5,PC}    ;; return
    174          

   \                                 In section SOFTPACK, align 4, keep-with-next
    175          void dcache_set_exclusive(void)
    176          {
    177          	uint32_t actlr = cp15_read_actlr();
   \                     dcache_set_exclusive:
   \        0x0   0xEE11'0F30        mrc p15, 0, R0, c1, c0, 1
    178          	actlr |= CP15_ACTLR_EXCL;
    179          	cp15_write_actlr(actlr);
   \        0x4   0xE380'0080        ORR      R0,R0,#0x80
   \        0x8   0xEE01'0F30        mcr p15, 0, R0, c1, c0, 1
    180          }
   \        0xC   0xE12F'FF1E        BX       LR               ;; return
    181          

   \                                 In section SOFTPACK, align 4, keep-with-next
    182          void dcache_set_non_exclusive(void)
    183          {
    184          	uint32_t actlr = cp15_read_actlr();
   \                     dcache_set_non_exclusive:
   \        0x0   0xEE11'0F30        mrc p15, 0, R0, c1, c0, 1
    185          	actlr &= ~CP15_ACTLR_EXCL;
    186          	cp15_write_actlr(actlr);
   \        0x4   0xE3C0'0080        BIC      R0,R0,#0x80
   \        0x8   0xEE01'0F30        mcr p15, 0, R0, c1, c0, 1
    187          }
   \        0xC   0xE12F'FF1E        BX       LR               ;; return

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable6:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x43 0x3A          DC8 0x43, 0x3A, 0x5C, 0x77, 0x6F, 0x72, 0x6B, 0x5C

   \              0x5C 0x77    

   \              0x6F 0x72    

   \              0x6B 0x5C
   \        0x8   0x41 0x74          DC8 0x41, 0x74, 0x6D, 0x65, 0x6C, 0x53, 0x6F, 0x66

   \              0x6D 0x65    

   \              0x6C 0x53    

   \              0x6F 0x66
   \       0x10   0x74 0x50          DC8 0x74, 0x50, 0x41, 0x63, 0x6B, 0x5C, 0x61, 0x74

   \              0x41 0x63    

   \              0x6B 0x5C    

   \              0x61 0x74
   \       0x18   0x6D 0x65          DC8 0x6D, 0x65, 0x6C, 0x2D, 0x73, 0x6F, 0x66, 0x74

   \              0x6C 0x2D    

   \              0x73 0x6F    

   \              0x66 0x74
   \       0x20   0x77 0x61          DC8 0x77, 0x61, 0x72, 0x65, 0x2D, 0x70, 0x61, 0x63

   \              0x72 0x65    

   \              0x2D 0x70    

   \              0x61 0x63
   \       0x28   0x6B 0x61          DC8 0x6B, 0x61, 0x67, 0x65, 0x2D, 0x32, 0x2E, 0x31

   \              0x67 0x65    

   \              0x2D 0x32    

   \              0x2E 0x31
   \       0x30   0x37 0x5C          DC8 0x37, 0x5C, 0x61, 0x72, 0x63, 0x68, 0x5C, 0x61

   \              0x61 0x72    

   \              0x63 0x68    

   \              0x5C 0x61
   \       0x38   0x72 0x6D          DC8 0x72, 0x6D, 0x5C, 0x6C, 0x31, 0x63, 0x61, 0x63

   \              0x5C 0x6C    

   \              0x31 0x63    

   \              0x61 0x63
   \       0x40   0x68 0x65          DC8 0x68, 0x65, 0x5F, 0x63, 0x70, 0x31, 0x35, 0x2E

   \              0x5F 0x63    

   \              0x70 0x31    

   \              0x35 0x2E
   \       0x48   0x63 0x00          DC8 0x63, 0
   \       0x4A   0x00 0x00          DC8 0, 0

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ?_1:
   \        0x0   0x73 0x63          DC8 "sctlr & (1u << 0)"

   \              0x74 0x6C    

   \              0x72 0x20    

   \              0x26 0x20    

   \              0x28 0x31    

   \              0x75 0x20    

   \              0x3C 0x3C    

   \              0x20 0x30    

   \              0x29 0x00
   \       0x12   0x00 0x00          DC8 0, 0

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ?_2:
   \        0x0   0x73 0x74          DC8 "start < end"

   \              0x61 0x72    

   \              0x74 0x20    

   \              0x3C 0x20    

   \              0x65 0x6E    

   \              0x64 0x00

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   dcache_clean
       0   dcache_clean_invalidate
      16   dcache_clean_invalidate_region
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
      16   dcache_clean_region
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
       8   dcache_disable
         8   -> dcache_clean
         0   -> dcache_invalidate
       8   dcache_enable
         8   -> __aeabi_assert
         8   -> __iar_EmptyStepPoint
         8   -> dcache_invalidate
       0   dcache_invalidate
      16   dcache_invalidate_region
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
       0   dcache_is_enabled
       0   dcache_set_exclusive
       0   dcache_set_non_exclusive
       0   icache_disable
       0   icache_enable
       0   icache_invalidate
       0   icache_is_enabled


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
      76  ?_0
      20  ?_1
      12  ?_2
      52  dcache_clean
      52  dcache_clean_invalidate
      76  dcache_clean_invalidate_region
      76  dcache_clean_region
      40  dcache_disable
      60  dcache_enable
      52  dcache_invalidate
      76  dcache_invalidate_region
      24  dcache_is_enabled
      16  dcache_set_exclusive
      16  dcache_set_non_exclusive
      36  icache_disable
      36  icache_enable
      16  icache_invalidate
      16  icache_is_enabled

 
  76 bytes in section .rodata
 680 bytes in section SOFTPACK
 
 680 bytes of CODE  memory
  76 bytes of CONST memory

Errors: none
Warnings: none
