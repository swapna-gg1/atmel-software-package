###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.1.245/W32 for ARM         24/Nov/2020  13:57:10
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode                    
#    Endian                   =  little
#    Source file              =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\peripherals\wdt.c
#    Command line             =
#        -f C:\Users\c40450\AppData\Local\Temp\EWFC69.tmp
#        (C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\peripherals\wdt.c
#        -D "SOFTPACK_VERSION=\"2.17\"" -D TRACE_LEVEL=5 -D VARIANT_DDRAM -D
#        CONFIG_ARCH_ARMV7A -D CONFIG_ARCH_ARM -D CONFIG_SOC_SAMA5D4 -D
#        CONFIG_CHIP_SAMA5D44 -D CONFIG_BOARD_SAMA5D4_EK -D CONFIG_HAVE_AIC5 -D
#        CONFIG_HAVE_PIO3 -D CONFIG_HAVE_NFC -D CONFIG_HAVE_PIT -D
#        CONFIG_HAVE_SMC -D CONFIG_HAVE_SMC_SCRAMBLING -D CONFIG_HAVE_MPDDRC -D
#        CONFIG_HAVE_MPDDRC_DATA_PATH -D CONFIG_HAVE_MPDDRC_IO_CALIBRATION -D
#        CONFIG_HAVE_MPDDRC_DDR2 -D CONFIG_HAVE_MPDDRC_LPDDR2 -D
#        CONFIG_HAVE_ADC_LOW_RES -D CONFIG_HAVE_PMC_PLLADIV2 -D
#        CONFIG_HAVE_PMC_H32MXDIV -D CONFIG_HAVE_PMC_UPLL_BIAS -D
#        CONFIG_HAVE_SCKC -D CONFIG_HAVE_PWMC_SPREAD_SPECTRUM -D
#        CONFIG_HAVE_PWMC_FAULT_PROT_HIZ -D CONFIG_HAVE_PWMC_STEPPER_MOTOR -D
#        CONFIG_HAVE_PWMC_CMP_UNIT -D CONFIG_HAVE_PWMC_SYNC_MODE -D
#        CONFIG_HAVE_PWMC_OOV -D CONFIG_HAVE_PWMC_FMODE -D CONFIG_HAVE_PWMC_WP
#        -D CONFIG_HAVE_PWMC_DTIME -D CONFIG_HAVE_PWMC_ELINE -D
#        CONFIG_HAVE_L2CC -D CONFIG_HAVE_SAIC -D CONFIG_HAVE_XDMAC -D
#        CONFIG_HAVE_XDMAC_DATA_WIDTH_DWORD -D CONFIG_HAVE_SFC -D
#        CONFIG_HAVE_PWMC -D CONFIG_HAVE_SECURE_MATRIX -D
#        CONFIG_HAVE_DDR2_MT47H128M8 -D
#        CONFIG_HAVE_RSTC_CONFIGURABLE_USER_RESET -D
#        CONFIG_HAVE_RSTC_INDEPENDENT_RESET -D CONFIG_HAVE_TC_FAULT_MODE -D
#        CONFIG_HAVE_RTC_CALIBRATION -D CONFIG_HAVE_RTC_MODE_PERSIAN -D
#        CONFIG_HAVE_RTC_TAMPER -D CONFIG_HAVE_SHDWC -D CONFIG_HAVE_LED -D
#        CONFIG_HAVE_MMU -D CONFIG_HAVE_L1CACHE -D CONFIG_HAVE_L2CACHE -D
#        CONFIG_HAVE_DBGU -D CONFIG_HAVE_UART -D CONFIG_HAVE_USART -D
#        CONFIG_HAVE_USART_SPI_MODE -D CONFIG_HAVE_SERIALD_USART --preprocess
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\build\sama5d4-ek\ddram\List
#        -lC
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\build\sama5d4-ek\ddram\List
#        --diag_suppress Pa050 -o
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\build\sama5d4-ek\ddram\Obj
#        --debug --endian=little --cpu=Cortex-A5 -e --fpu=VFPv4_D16
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\arch\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\utils\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\target\common\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\target\sama5d4\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\drivers\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\lib\
#        --section .text=SOFTPACK --cpu_mode arm -Oh)
#    Locale                   =  C
#    List file                =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\build\sama5d4-ek\ddram\List\wdt.lst
#    Object file              =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\build\sama5d4-ek\ddram\Obj\wdt.o
#    Runtime model:              
#      __SystemLibrary        =  DLib
#      __dlib_file_descriptor =  0
#      __dlib_version         =  6
#
###############################################################################

C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\peripherals\wdt.c
      1          /* ----------------------------------------------------------------------------
      2           *        SAM Software Package License
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2015, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          /**
     31           * \file
     32           *
     33           * Implementation of Watchdog Timer (WDT) controller.
     34           *
     35           */
     36          
     37          /** \addtogroup wdt_module Working with WDT
     38           * \section Purpose
     39           * The WDT driver provides the interface to configure and use the WDT
     40           * peripheral.
     41           *
     42           * The WDT can be used to prevent system lock-up if the software becomes
     43           * trapped in a deadlock. It can generate a general reset or a processor
     44           * reset only. It is clocked by slow clock divided by 128.
     45           *
     46           * The WDT is running at reset with 16 seconds watchdog period (slow clock at 32.768 kHz)
     47           * and external reset generation enabled. The user must either disable it or
     48           * reprogram it to meet the application requires.
     49           *
     50           * \section Usage
     51           * To use the WDT, the user could follow these few steps:
     52           * <ul>
     53           * <li>Enable watchdog with given mode using \ref wdt_enable().
     54           * <li>Restart the watchdog using \ref wdt_restart() within the watchdog period.
     55           * </ul>
     56           *
     57           * For more accurate information, please look at the WDT section of the
     58           * Datasheet.
     59           *
     60           * \note
     61           * The Watchdog Mode Register (WDT_MR) can be written only once.\n
     62           *
     63           * Related files :\n
     64           * \ref wdt.c\n
     65           * \ref wdt.h.\n
     66           */
     67          /*@{*/
     68          /*@}*/
     69          
     70          /*---------------------------------------------------------------------------
     71           *        Headers
     72           *---------------------------------------------------------------------------*/
     73          
     74          #include "chip.h"
     75          #include "peripherals/pmc.h"
     76          #include "peripherals/wdt.h"
     77          #include "trace.h"
     78          #include "timer.h"
     79          #include <stdio.h>
     80          
     81          /*----------------------------------------------------------------------------
     82           *        Local functions
     83           *----------------------------------------------------------------------------*/
     84          

   \                                 In section SOFTPACK, align 4, keep-with-next
     85          static uint32_t _wdt_compute_period(uint32_t timeout)
     86          {
   \                     _wdt_compute_period:
   \        0x0   0xE92D'4010        PUSH     {R4,LR}
   \        0x4   0xE1A0'4000        MOV      R4,R0
     87          	/* Calculate the reload value to achive this (appoximate) timeout.
     88          	*
     89          	* Examples with WDT_FREQUENCY = 32768 / 128 = 256:
     90          	*  timeout = 4     -> reload = 1
     91          	*  timeout = 16000 -> reload = 4096
     92          	*/
     93          	uint32_t reload = (timeout * (pmc_get_slow_clock() >> 7) + 500) / 1000;
   \        0x8   0x....'....        BL       pmc_get_slow_clock
   \        0xC   0xE1A0'03A0        LSR      R0,R0,#+7
   \       0x10   0x....'....        LDR      R12,??DataTable5  ;; 0x83126e98
   \       0x14   0xE001'0490        MUL      R1,R0,R4
   \       0x18   0xE281'2F7D        ADD      R2,R1,#+500
   \       0x1C   0xE083'CC92        UMULL    R12,R3,R2,R12
   \       0x20   0xE1B0'04A3        LSRS     R0,R3,#+9
     94          	if (reload < 1) {
   \       0x24   0x1A00'0001        BNE      ??_wdt_compute_period_0
     95          		reload = 1;
   \       0x28   0xE3A0'0001        MOV      R0,#+1
   \       0x2C   0xE8BD'8010        POP      {R4,PC}
     96          	}
     97          	else if (reload > 4095) {
   \                     ??_wdt_compute_period_0:
   \       0x30   0xE300'1FFF        MOVW     R1,#+4095
   \       0x34   0xE150'0001        CMP      R0,R1
     98          		reload = 4095;
   \       0x38   0x81A0'0001        MOVHI    R0,R1
     99          	}
    100          	return reload;
   \       0x3C   0xE8BD'8010        POP      {R4,PC}          ;; return
    101          }
    102          
    103          /*----------------------------------------------------------------------------
    104           *        Exported functions
    105           *----------------------------------------------------------------------------*/
    106          

   \                                 In section SOFTPACK, align 4, keep-with-next
    107          void wdt_enable(bool en_int,
    108          				bool en_rst,
    109          				bool en_dbghlt,
    110          				bool en_idlehlt,
    111          				uint32_t delta,
    112          				uint32_t counter)
    113          {
   \                     wdt_enable:
   \        0x0   0xE92D'43F8        PUSH     {R3-R9,LR}
   \        0x4   0xE1A0'6000        MOV      R6,R0
    114          	uint32_t mode = 0;
    115          
    116          #ifdef CONFIG_HAVE_DWDT
    117          	uint32_t wc;
    118          
    119          	mode &= ~(WDT_MR_WDDIS);
    120          	WDT->WDT_MR = mode;
    121          	wc = _wdt_compute_period(counter);
    122          	WDT->WDT_WLR = WDT_WLR_PERIOD(wc) | WDT_WLR_RPTH(_wdt_compute_period(delta));
    123          	WDT->WDT_ILR = WDT_ILR_LVLTH(wc);
    124          	if (en_int)
    125          		WDT->WDT_IER = WDT_IER_PERINT | WDT_IER_RPTHINT | WDT_IER_LVLINT;
    126          	else
    127          		WDT->WDT_IER = 0;
    128          
    129          	if (en_rst)
    130          		mode |= WDT_MR_PERIODRST;
    131          	if (en_dbghlt)
    132          		mode |= WDT_MR_WDDBGHLT;
    133          	if (en_idlehlt)
    134          		mode |= WDT_MR_WDIDLEHLT;
    135          	WDT->WDT_MR = mode;
    136          
    137          #else
    138          	mode &= ~(WDT_MR_WDDIS | WDT_MR_WDD_Msk | WDT_MR_WDV_Msk);
    139          	mode &= ~(WDT_MR_WDD_Msk | WDT_MR_WDV_Msk);
   \        0x8   0xE3A0'5000        MOV      R5,#+0
    140          	WDT->WDT_MR = mode;
   \        0xC   0x....'....        LDR      R4,??DataTable5_1  ;; 0xfc068644
   \       0x10   0xE1A0'7001        MOV      R7,R1
   \       0x14   0xE1A0'8002        MOV      R8,R2
   \       0x18   0xE1A0'9003        MOV      R9,R3
   \       0x1C   0xE584'5000        STR      R5,[R4, #+0]
    141          	usleep(100);
   \       0x20   0xE3A0'0064        MOV      R0,#+100
   \       0x24   0x....'....        BL       usleep
    142          	if (en_int)
   \       0x28   0xE356'0000        CMP      R6,#+0
    143          		mode |= WDT_MR_WDFIEN;
   \       0x2C   0x13A0'5D40        MOVNE    R5,#+4096
    144          	if (en_rst)
   \       0x30   0xE357'0000        CMP      R7,#+0
    145          		mode |= WDT_MR_WDRSTEN;
   \       0x34   0x1385'5D80        ORRNE    R5,R5,#0x2000
    146          	if (en_dbghlt)
   \       0x38   0xE358'0000        CMP      R8,#+0
    147          		mode |= WDT_MR_WDDBGHLT;
   \       0x3C   0x1385'5540        ORRNE    R5,R5,#0x10000000
    148          	if (en_idlehlt)
    149          		mode |= WDT_MR_WDIDLEHLT;
   \       0x40   0xE59D'0020        LDR      R0,[SP, #+32]
   \       0x44   0xE359'0000        CMP      R9,#+0
   \       0x48   0xE59D'6024        LDR      R6,[SP, #+36]
   \       0x4C   0x1385'5580        ORRNE    R5,R5,#0x20000000
    150          	WDT->WDT_MR = mode |
    151          				  WDT_MR_WDD(_wdt_compute_period(delta)) |
    152          				  WDT_MR_WDV(_wdt_compute_period(counter));
   \       0x50   0x....'....        BL       _wdt_compute_period
   \       0x54   0xE3A0'26F0        MOV      R2,#+251658240
   \       0x58   0xE382'28FF        ORR      R2,R2,#0xFF0000
   \       0x5C   0xE002'0800        AND      R0,R2,R0, LSL #+16
   \       0x60   0xE180'5005        ORR      R5,R0,R5
   \       0x64   0xE1A0'0006        MOV      R0,R6
   \       0x68   0x....'....        BL       _wdt_compute_period
   \       0x6C   0xE1A0'1A00        LSL      R1,R0,#+20
   \       0x70   0xE185'1A21        ORR      R1,R5,R1, LSR #+20
   \       0x74   0xE584'1000        STR      R1,[R4, #+0]
    153          #endif
    154          }
   \       0x78   0xE8BD'83F1        POP      {R0,R4-R9,PC}    ;; return
    155          

   \                                 In section SOFTPACK, align 4, keep-with-next
    156          void wdt_disable(void)
    157          {
    158          	WDT->WDT_MR = WDT_MR_WDDIS;
   \                     wdt_disable:
   \        0x0   0xE3A0'0C80        MOV      R0,#+32768
   \        0x4   0x....'....        LDR      R1,??DataTable5_1  ;; 0xfc068644
   \        0x8   0x....'....        B        ?Subroutine0
    159          }

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ?Subroutine0:
   \        0x0   0xE581'0000        STR      R0,[R1, #+0]
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
    160          

   \                                 In section SOFTPACK, align 4, keep-with-next
    161          void wdt_restart()
    162          {
    163          	WDT->WDT_CR = WDT_CR_KEY_PASSWD | WDT_CR_WDRSTT;
   \                     wdt_restart:
   \        0x0   0xE3A0'0001        MOV      R0,#+1
   \        0x4   0x....'....        LDR      R1,??DataTable5_2  ;; 0xfc068640
   \        0x8   0xE380'04A5        ORR      R0,R0,#0xA5000000
   \        0xC                      REQUIRE ?Subroutine0
   \        0xC                      ;; // Fall through to label ?Subroutine0
    164          }
    165          

   \                                 In section SOFTPACK, align 4, keep-with-next
    166          uint32_t wdt_get_status(void)
    167          {
    168          #ifdef CONFIG_HAVE_DWDT
    169          	return WDT->WDT_ISR;
    170          #else
    171          	return WDT->WDT_SR & (WDT_SR_WDUNF | WDT_SR_WDERR);
   \                     wdt_get_status:
   \        0x0   0x....'....        LDR      R0,??DataTable5_3  ;; 0xfc068648
   \        0x4   0xE590'1000        LDR      R1,[R0, #+0]
   \        0x8   0xE201'0003        AND      R0,R1,#0x3
   \        0xC   0xE12F'FF1E        BX       LR               ;; return
    172          #endif
    173          }
    174          

   \                                 In section SOFTPACK, align 4, keep-with-next
    175          uint32_t wdt_get_counter_value(void)
    176          {
    177          #ifdef CONFIG_HAVE_DWDT
    178          	return (WDT->WDT_VR & WDT_VR_COUNTER_Msk) >> WDT_VR_COUNTER_Pos;
    179          #else
    180          	return (WDT->WDT_MR & WDT_MR_WDV_Msk) >> WDT_MR_WDV_Pos;
   \                     wdt_get_counter_value:
   \        0x0   0x....'....        LDR      R0,??DataTable5_1  ;; 0xfc068644
   \        0x4   0xE590'1000        LDR      R1,[R0, #+0]
   \        0x8   0xE1A0'2A01        LSL      R2,R1,#+20
   \        0xC   0xE1A0'0A22        LSR      R0,R2,#+20
   \       0x10   0xE12F'FF1E        BX       LR               ;; return
    181          #endif
    182          }

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5:
   \        0x0   0x8312'6E98        DC32     0x83126e98

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_1:
   \        0x0   0xFC06'8644        DC32     0xfc068644

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_2:
   \        0x0   0xFC06'8640        DC32     0xfc068640

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable5_3:
   \        0x0   0xFC06'8648        DC32     0xfc068648

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   _wdt_compute_period
         8   -> pmc_get_slow_clock
       0   wdt_disable
      32   wdt_enable
        32   -> _wdt_compute_period
        32   -> usleep
       0   wdt_get_counter_value
       0   wdt_get_status
       0   wdt_restart


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       8  ?Subroutine0
      64  _wdt_compute_period
      12  wdt_disable
     124  wdt_enable
      20  wdt_get_counter_value
      16  wdt_get_status
      12  wdt_restart

 
 272 bytes in section SOFTPACK
 
 272 bytes of CODE memory

Errors: none
Warnings: none
