###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.1.245/W32 for ARM         24/Nov/2020  14:00:48
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\led\led.c
#    Command line      =
#        -f C:\Users\c40450\AppData\Local\Temp\EW4FC2.tmp
#        (C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\led\led.c
#        -D "SOFTPACK_VERSION=\"2.17\"" -D TRACE_LEVEL=5 -D VARIANT_SRAM -D
#        CONFIG_ARCH_ARMV7A -D CONFIG_ARCH_ARM -D CONFIG_SOC_SAMA5D4 -D
#        CONFIG_CHIP_SAMA5D44 -D CONFIG_BOARD_SAMA5D4_EK -D CONFIG_HAVE_AIC5 -D
#        CONFIG_HAVE_PIO3 -D CONFIG_HAVE_NFC -D CONFIG_HAVE_PIT -D
#        CONFIG_HAVE_SMC -D CONFIG_HAVE_SMC_SCRAMBLING -D CONFIG_HAVE_MPDDRC -D
#        CONFIG_HAVE_MPDDRC_DATA_PATH -D CONFIG_HAVE_MPDDRC_IO_CALIBRATION -D
#        CONFIG_HAVE_MPDDRC_DDR2 -D CONFIG_HAVE_MPDDRC_LPDDR2 -D
#        CONFIG_HAVE_ADC_LOW_RES -D CONFIG_HAVE_PMC_PLLADIV2 -D
#        CONFIG_HAVE_PMC_H32MXDIV -D CONFIG_HAVE_PMC_UPLL_BIAS -D
#        CONFIG_HAVE_SCKC -D CONFIG_HAVE_PWMC_SPREAD_SPECTRUM -D
#        CONFIG_HAVE_PWMC_FAULT_PROT_HIZ -D CONFIG_HAVE_PWMC_STEPPER_MOTOR -D
#        CONFIG_HAVE_PWMC_CMP_UNIT -D CONFIG_HAVE_PWMC_SYNC_MODE -D
#        CONFIG_HAVE_PWMC_OOV -D CONFIG_HAVE_PWMC_FMODE -D CONFIG_HAVE_PWMC_WP
#        -D CONFIG_HAVE_PWMC_DTIME -D CONFIG_HAVE_PWMC_ELINE -D
#        CONFIG_HAVE_L2CC -D CONFIG_HAVE_SAIC -D CONFIG_HAVE_XDMAC -D
#        CONFIG_HAVE_XDMAC_DATA_WIDTH_DWORD -D CONFIG_HAVE_SFC -D
#        CONFIG_HAVE_PWMC -D CONFIG_HAVE_SECURE_MATRIX -D
#        CONFIG_HAVE_DDR2_MT47H128M8 -D
#        CONFIG_HAVE_RSTC_CONFIGURABLE_USER_RESET -D
#        CONFIG_HAVE_RSTC_INDEPENDENT_RESET -D CONFIG_HAVE_TC_FAULT_MODE -D
#        CONFIG_HAVE_RTC_CALIBRATION -D CONFIG_HAVE_RTC_MODE_PERSIAN -D
#        CONFIG_HAVE_RTC_TAMPER -D CONFIG_HAVE_SHDWC -D CONFIG_HAVE_LED -D
#        CONFIG_HAVE_MMU -D CONFIG_HAVE_L1CACHE -D CONFIG_HAVE_L2CACHE -D
#        CONFIG_HAVE_DBGU -D CONFIG_HAVE_UART -D CONFIG_HAVE_USART -D
#        CONFIG_HAVE_USART_SPI_MODE -D CONFIG_HAVE_SERIALD_USART --preprocess
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\build\sama5d4-ek\sram\List
#        -lC
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\build\sama5d4-ek\sram\List
#        --diag_suppress Pa050 -o
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\build\sama5d4-ek\sram\Obj
#        --debug --endian=little --cpu=Cortex-A5 -e --fpu=VFPv4_D16
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\arch\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\utils\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\target\common\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\target\sama5d4\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\drivers\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\lib\
#        --section .text=SOFTPACK --cpu_mode arm -Oh)
#    Locale            =  C
#    List file         =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\build\sama5d4-ek\sram\List\led.lst
#    Object file       =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\build\sama5d4-ek\sram\Obj\led.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\led\led.c
      1          /* ----------------------------------------------------------------------------
      2           *         SAM Software Package License
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2015, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          /**
     31           * \file
     32           */
     33          
     34          /*------------------------------------------------------------------------------
     35           *         Headers
     36           *------------------------------------------------------------------------------*/
     37          
     38          #include "compiler.h"
     39          
     40          #include "led/led.h"
     41          
     42          #include "gpio/pio.h"
     43          
     44          /*------------------------------------------------------------------------------
     45           *         Local Variables
     46           *------------------------------------------------------------------------------*/
     47          
     48          /* Pins list asociated to LEDs */

   \                                 In section .bss, align 4
     49          static struct _pin *pins_leds;
   \                     pins_leds:
   \        0x0                      DS8 4
   \        0x4                      DS8 4
     50          
     51          /* Number of LEDs */
     52          static uint32_t led_count = 0;
     53          
     54          /*------------------------------------------------------------------------------
     55           *         Global Functions
     56           *------------------------------------------------------------------------------*/
     57          

   \                                 In section SOFTPACK, align 4, keep-with-next
     58          extern void led_configure(struct _pin *leds, uint32_t count)
     59          {
     60          	// Configure LED
     61          	led_count = count;
     62          	pins_leds = leds;
     63          	pio_configure(pins_leds, led_count);
   \                     led_configure:
   \        0x0   0x....'....        LDR      R2,??DataTable3
   \        0x4   0xE582'1004        STR      R1,[R2, #+4]
   \        0x8   0xE582'0000        STR      R0,[R2, #+0]
   \        0xC   0x....'....        B        pio_configure    ;; tailcall
     64          }
     65          

   \                                 In section SOFTPACK, align 4, keep-with-next
     66          extern uint32_t led_set(uint32_t led)
     67          {
   \                     led_set:
   \        0x0   0xE92D'5000        PUSH     {R12,LR}
     68          	/* Check if LED exists */
     69          	if (led >= led_count)
   \        0x4   0x....'....        LDR      R1,??DataTable3
   \        0x8   0xE591'2004        LDR      R2,[R1, #+4]
   \        0xC   0xE150'0002        CMP      R0,R2
   \       0x10   0x3A00'0000        BCC      ??led_set_0
     70          		return 0;
   \       0x14   0x....'....        B        ?Subroutine1
     71          
     72          	/* Turn LED on */
     73          	if (pins_leds[led].type == PIO_OUTPUT_0)
   \                     ??led_set_0:
   \       0x18   0xE591'1000        LDR      R1,[R1, #+0]
   \       0x1C   0xE081'0200        ADD      R0,R1,R0, LSL #+4
   \       0x20   0xE5D0'2008        LDRB     R2,[R0, #+8]
   \       0x24   0xE352'0008        CMP      R2,#+8
   \       0x28   0x1A00'0001        BNE      ??led_set_1
     74          		pio_set(&pins_leds[led]);
   \       0x2C   0x....'....        BL       pio_set
   \       0x30   0xEA00'0000        B        ??led_set_2
     75          	else
     76          		pio_clear(&pins_leds[led]);
   \                     ??led_set_1:
   \       0x34   0x....'....        BL       pio_clear
     77          
     78          	return 1;
   \                     ??led_set_2:
   \       0x38   0x....'....        B        ?Subroutine0
     79          }

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ?Subroutine1:
   \        0x0   0xE3A0'0000        MOV      R0,#+0
   \        0x4   0xE8BD'8002        POP      {R1,PC}

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ?Subroutine0:
   \        0x0   0xE3A0'0001        MOV      R0,#+1
   \        0x4   0xE8BD'8002        POP      {R1,PC}          ;; return
     80          

   \                                 In section SOFTPACK, align 4, keep-with-next
     81          extern uint32_t led_clear (uint32_t led)
     82          {
   \                     led_clear:
   \        0x0   0xE92D'5000        PUSH     {R12,LR}
     83          	/* Check if LED exists */
     84          	if (led >= led_count)
   \        0x4   0x....'....        LDR      R1,??DataTable3
   \        0x8   0xE591'2004        LDR      R2,[R1, #+4]
   \        0xC   0xE150'0002        CMP      R0,R2
   \       0x10   0x3A00'0000        BCC      ??led_clear_0
     85          		return 0;
   \       0x14   0x....'....        B        ?Subroutine1
     86          
     87          	/* Turn LED off */
     88          	if (pins_leds[led].type == PIO_OUTPUT_0)
   \                     ??led_clear_0:
   \       0x18   0xE591'1000        LDR      R1,[R1, #+0]
   \       0x1C   0xE081'0200        ADD      R0,R1,R0, LSL #+4
   \       0x20   0xE5D0'2008        LDRB     R2,[R0, #+8]
   \       0x24   0xE352'0008        CMP      R2,#+8
   \       0x28   0x1A00'0001        BNE      ??led_clear_1
     89          		pio_clear(&pins_leds[led]);
   \       0x2C   0x....'....        BL       pio_clear
   \       0x30   0xEA00'0000        B        ??led_clear_2
     90          	else
     91          		pio_set(&pins_leds[led]);
   \                     ??led_clear_1:
   \       0x34   0x....'....        BL       pio_set
     92          
     93          	return 1;
   \                     ??led_clear_2:
   \       0x38   0x....'....        B        ?Subroutine0
     94          }
     95          

   \                                 In section SOFTPACK, align 4, keep-with-next
     96          extern uint32_t led_toggle(uint32_t led)
     97          {
   \                     led_toggle:
   \        0x0   0xE92D'4038        PUSH     {R3-R5,LR}
     98          	/* Check if LED exists */
     99          	if (led >= led_count)
   \        0x4   0x....'....        LDR      R5,??DataTable3
   \        0x8   0xE1A0'4000        MOV      R4,R0
   \        0xC   0xE595'0004        LDR      R0,[R5, #+4]
   \       0x10   0xE154'0000        CMP      R4,R0
   \       0x14   0x3A00'0001        BCC      ??led_toggle_0
    100          		return 0;
   \       0x18   0xE3A0'0000        MOV      R0,#+0
   \       0x1C   0xE8BD'8032        POP      {R1,R4,R5,PC}
    101          
    102          	/* Toggle LED */
    103          	if (pio_get_output_data_status(&pins_leds[led]))
   \                     ??led_toggle_0:
   \       0x20   0xE595'1000        LDR      R1,[R5, #+0]
   \       0x24   0xE081'0204        ADD      R0,R1,R4, LSL #+4
   \       0x28   0x....'....        BL       pio_get_output_data_status
   \       0x2C   0xE350'0000        CMP      R0,#+0
   \       0x30   0x0A00'0003        BEQ      ??led_toggle_1
    104          		pio_clear(&pins_leds[led]);
   \       0x34   0xE595'0000        LDR      R0,[R5, #+0]
   \       0x38   0xE080'0204        ADD      R0,R0,R4, LSL #+4
   \       0x3C   0x....'....        BL       pio_clear
   \       0x40   0xEA00'0002        B        ??led_toggle_2
    105          	else
    106          		pio_set(&pins_leds[led]);
   \                     ??led_toggle_1:
   \       0x44   0xE595'1000        LDR      R1,[R5, #+0]
   \       0x48   0xE081'0204        ADD      R0,R1,R4, LSL #+4
   \       0x4C   0x....'....        BL       pio_set
    107          
    108          	return 1;
   \                     ??led_toggle_2:
   \       0x50   0xE3A0'0001        MOV      R0,#+1
   \       0x54   0xE8BD'8032        POP      {R1,R4,R5,PC}    ;; return
    109          }

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable3:
   \        0x0   0x....'....        DC32     pins_leds

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   led_clear
         8   -> pio_clear
         8   -> pio_set
       0   led_configure
         0   -> pio_configure
       8   led_set
         8   -> pio_clear
         8   -> pio_set
      16   led_toggle
        16   -> pio_clear
        16   -> pio_get_output_data_status
        16   -> pio_set


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       8  ?Subroutine0
       8  ?Subroutine1
      60  led_clear
      16  led_configure
      60  led_set
      88  led_toggle
       8  pins_leds
          led_count

 
   8 bytes in section .bss
 244 bytes in section SOFTPACK
 
 244 bytes of CODE memory
   8 bytes of DATA memory

Errors: none
Warnings: none
