###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.1.245/W32 for ARM         03/Nov/2020  20:09:05
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode                    
#    Endian                   =  little
#    Source file              =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\power\act8945a.c
#    Command line             =
#        -f C:\Users\c40450\AppData\Local\Temp\EW280D.tmp
#        (C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\power\act8945a.c
#        -D "SOFTPACK_VERSION=\"2.17\"" -D TRACE_LEVEL=5 -D VARIANT_QSPI0 -D
#        CONFIG_ARCH_ARMV7A -D CONFIG_ARCH_ARM -D CONFIG_SOC_SAMA5D2 -D
#        CONFIG_CHIP_SAMA5D27 -D CONFIG_PACKAGE_289PIN -D
#        CONFIG_BOARD_SAMA5D2_XPLAINED -D CONFIG_HAVE_AIC5 -D
#        CONFIG_HAVE_FLEXCOM -D CONFIG_HAVE_PIO4 -D CONFIG_HAVE_PIO4_SECURE -D
#        CONFIG_HAVE_NFC -D CONFIG_HAVE_PIT -D CONFIG_HAVE_SMC -D
#        CONFIG_HAVE_SMC_SCRAMBLING -D CONFIG_HAVE_GMAC_QUEUES -D
#        CONFIG_HAVE_MPDDRC -D CONFIG_HAVE_MPDDRC_DATA_PATH -D
#        CONFIG_HAVE_MPDDRC_IO_CALIBRATION -D CONFIG_HAVE_MPDDRC_DDR2 -D
#        CONFIG_HAVE_MPDDRC_LPDDR2 -D CONFIG_HAVE_MPDDRC_DDR3 -D
#        CONFIG_HAVE_MPDDRC_LPDDR3 -D CONFIG_HAVE_ADC_SETTLING_TIME -D
#        CONFIG_HAVE_ADC_DIFF_INPUT -D CONFIG_HAVE_ADC_SEQ_R2 -D
#        CONFIG_HAVE_PMC_FAST_STARTUP -D CONFIG_HAVE_PMC_GENERATED_CLOCKS -D
#        CONFIG_HAVE_PMC_AUDIO_CLOCK -D CONFIG_HAVE_PMC_PLLADIV2 -D
#        CONFIG_HAVE_PMC_H32MXDIV -D CONFIG_HAVE_PMC_UPLL_BIAS -D
#        CONFIG_HAVE_SCKC -D CONFIG_HAVE_PWMC_DMA -D
#        CONFIG_HAVE_PWMC_SPREAD_SPECTRUM -D CONFIG_HAVE_PWMC_EXTERNAL_TRIGGER
#        -D CONFIG_HAVE_PWMC_FAULT_PROT_HIZ -D CONFIG_HAVE_PWMC_STEPPER_MOTOR
#        -D CONFIG_HAVE_PWMC_CMP_UNIT -D CONFIG_HAVE_PWMC_SYNC_MODE -D
#        CONFIG_HAVE_PWMC_OOV -D CONFIG_HAVE_PWMC_FMODE -D CONFIG_HAVE_PWMC_WP
#        -D CONFIG_HAVE_PWMC_DTIME -D CONFIG_HAVE_PWMC_ELINE -D
#        CONFIG_HAVE_SFRBU -D CONFIG_HAVE_L2CC -D CONFIG_HAVE_SAIC -D
#        CONFIG_HAVE_XDMAC -D CONFIG_HAVE_XDMAC_DATA_WIDTH_DWORD -D
#        CONFIG_HAVE_SECUMOD -D CONFIG_HAVE_SFC -D CONFIG_HAVE_PWMC -D
#        CONFIG_HAVE_SECURE_MATRIX -D CONFIG_HAVE_DDR3_MT41K128M16 -D
#        CONFIG_HAVE_RSTC_CONFIGURABLE_USER_RESET -D CONFIG_HAVE_TC_FAULT_MODE
#        -D CONFIG_HAVE_TC_DMA_MODE -D CONFIG_HAVE_RTC_CALIBRATION -D
#        CONFIG_HAVE_RTC_MODE_PERSIAN -D CONFIG_HAVE_RTC_MODE_UTC -D
#        CONFIG_HAVE_RTC_TAMPER -D CONFIG_HAVE_SHDWC -D CONFIG_HAVE_TWI -D
#        CONFIG_HAVE_I2C_BUS -D CONFIG_HAVE_TWI_FIFO -D
#        CONFIG_HAVE_PMIC_ACT8945A -D CONFIG_HAVE_LED -D CONFIG_HAVE_MMU -D
#        CONFIG_HAVE_L1CACHE -D CONFIG_HAVE_L2CACHE -D CONFIG_HAVE_UART -D
#        CONFIG_HAVE_SERIALD_UART -D CONFIG_HAVE_USART -D
#        CONFIG_HAVE_USART_FIFO --preprocess
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\build\sama5d2-xplained\qspi0\List
#        -lC
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\build\sama5d2-xplained\qspi0\List
#        --diag_suppress Pa050 -o
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\build\sama5d2-xplained\qspi0\Obj
#        --debug --endian=little --cpu=Cortex-A5 -e --fpu=VFPv4_D16
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\arch\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\utils\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\target\common\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\target\sama5d2\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\drivers\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\lib\
#        --section .text=SOFTPACK --cpu_mode arm -Oh)
#    Locale                   =  C
#    List file                =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\build\sama5d2-xplained\qspi0\List\act8945a.lst
#    Object file              =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\build\sama5d2-xplained\qspi0\Obj\act8945a.o
#    Runtime model:              
#      __SystemLibrary        =  DLib
#      __dlib_file_descriptor =  0
#      __dlib_version         =  6
#      __iar_require _Printf  =  flags,widths
#
###############################################################################

C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\power\act8945a.c
      1          /* ----------------------------------------------------------------------------
      2           *         SAM Software Package License
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2015, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          /*----------------------------------------------------------------------------
     31           *        Headers
     32           *----------------------------------------------------------------------------*/
     33          
     34          #include <assert.h>
     35          #include <stdio.h>
     36          #include <stdint.h>
     37          #include <string.h>
     38          
     39          #include "chip.h"
     40          #include "gpio/pio.h"
     41          #include "i2c/twid.h"
     42          #include "peripherals/bus.h"
     43          #include "peripherals/flexcom.h"
     44          #include "peripherals/pmc.h"
     45          #include "power/act8945a.h"
     46          #include "trace.h"
     47          
     48          /*----------------------------------------------------------------------------
     49           *        Types
     50           *----------------------------------------------------------------------------*/
     51          
     52          #define STATE_VSEL 1 // HW config DDR3L
     53          
     54          // SYS @0x00
     55          union _sys0 {
     56          	struct {
     57          		uint8_t
     58          			syslev:     4,  // defines SYSLEV voltage threshold
     59          			nsysstat:   1,  // 1 if vsys < syslev voltage threshold
     60          			nsyslevmsk: 1,  // 1->unmask int
     61          			nsysmode:   1,  // response of SYSLEV voltage detector, 1->int 0>shutdown
     62          			trst:       1;  // Reset time out 0->260 1->65ms
     63          	} bits;
     64          	uint8_t u8;
     65          };
     66          
     67          // SYS @0x01
     68          union _sys1 {
     69          	struct {
     70          		uint8_t
     71          			scratch: 4, // user area to store system status information
     72          			ruf4:    1,
     73          			mstroff: 1, // Set bit to 1 to turn off all regulators
     74          			ruf67:   2;
     75          	} bits;
     76          	uint8_t u8;
     77          };
     78          
     79          // REG1 @0x20, REG2 @0x30, REG3 @0x40
     80          union _vset1 {
     81          	struct {
     82          		uint8_t
     83          			vset1:  6,
     84          			ruf_67: 2;
     85          	} bits;
     86          	uint8_t u8;
     87          };
     88          
     89          // REG1 @0x21, REG2 @0x31, REG3 @0x41
     90          union _vset2 {
     91          	struct {
     92          		uint8_t
     93          			vset2:  6,
     94          			ruf_67: 2;
     95          	} bits;
     96          	uint8_t u8;
     97          };
     98          
     99          // REG1 @0x22, REG2 @0x32, REG3 @0x42
    100          union _ctrl1 {
    101          	struct {
    102          		uint8_t
    103          			ok:      1,
    104          			nfltmsk: 1,
    105          			delay:   3,
    106          			mode:    1,
    107          			phase:   1,
    108          			on:      1;
    109          	} bits;
    110          	uint8_t u8;
    111          };
    112          
    113          // REG4 @0x51, REG5 @0x55, REG6 @0x61, REG7 @0x65
    114          union _ctrl2 {
    115          	struct {
    116          		uint8_t
    117          			ok:      1,
    118          			nfltmsk: 1,
    119          			delay:   3,
    120          			lowiq:   1,
    121          			dis:     1,
    122          			on:      1;
    123          	} bits;
    124          	uint8_t u8;
    125          };
    126          
    127          union _apch_70 {
    128          	struct {
    129          		uint8_t
    130          			ruf_0:  1,
    131          			ruf_1:  1,
    132          			ruf_2:  1,
    133          			ruf_3:  1,
    134          			ruf_45: 2,
    135          			ruf_67: 2;
    136          	} bits;
    137          	uint8_t u8;
    138          };
    139          
    140          union _apch_71 {
    141          	struct {
    142          		uint8_t
    143          			ovpset:  2,
    144          			pretimo: 2,
    145          			tottimo: 2,
    146          			ruf6:    1,
    147          			suschg:  1;
    148          	} bits;
    149          	uint8_t u8;
    150          };
    151          
    152          union _apch_78 {
    153          	struct {
    154          		uint8_t
    155          			chgdat:   1,
    156          			indat:    1,
    157          			tempdat:  1,
    158          			timrdat:  1,
    159          			chgstat:  1,
    160          			instat:   1,
    161          			tempstat: 1,
    162          			timrstat: 1;
    163          	} bits;
    164          	uint8_t u8;
    165          };
    166          
    167          union _apch_79 {
    168          	struct {
    169          		uint8_t
    170          			chgeocout: 1,
    171          			indis:     1,
    172          			tempout:   1,
    173          			timrpre:   1,
    174          			chgeocin:  1,
    175          			incon:     1,
    176          			tempin:    1,
    177          			timrtot:   1;
    178          	} bits;
    179          	uint8_t u8;
    180          };
    181          
    182          union _apch_7a {
    183          	struct {
    184          		uint8_t
    185          			ruf0:     1,
    186          			acinstat: 1,
    187          			ruf32:    2,
    188          			cstate:   2,
    189          			ruf76:    2;
    190          	} bits;
    191          	uint8_t u8;
    192          };
    193          
    194          /*----------------------------------------------------------------------------
    195           *        Constants
    196           *----------------------------------------------------------------------------*/
    197          
    198          #define NUM_REGULATORS 7
    199          
    200          #define IADDR_SYS0   0x00
    201          #define IADDR_SYS1   0x01
    202          #define IADDR_REG1      0x20
    203          #define IADDR_REG2      0x30
    204          #define IADDR_REG3      0x40
    205          #define IADDR_REG4      0x50
    206          #define IADDR_REG5      0x54
    207          #define IADDR_REG6      0x60
    208          #define IADDR_REG7      0x64
    209          #define IADDR_APCH_70   0x70
    210          #define IADDR_APCH_71   0x71
    211          #define IADDR_APCH_78   0x78
    212          #define IADDR_APCH_79   0x79
    213          #define IADDR_APCH_7A   0x7a
    214          

   \                                 In section .rodata, align 4, keep-with-next
    215          static const uint8_t _iaddr_reg[] = {
   \                     _iaddr_reg:
   \        0x0   0x20 0x30          DC8 32, 48, 64, 80, 84, 96, 100, 0

   \              0x40 0x50    

   \              0x54 0x60    

   \              0x64 0x00
    216          	IADDR_REG1, IADDR_REG2, IADDR_REG3, IADDR_REG4,
    217          	IADDR_REG5, IADDR_REG6, IADDR_REG7,
    218          };
    219          
    220          static const char* _charging_states[4] = {
    221          	"Suspend/Disable/Fault",
    222          	"End of charge",
    223          	"Fast charge/Top-off",
    224          	"Precondition",
    225          };
    226          
    227          struct _reg
    228          {
    229          	const char* name;
    230          	uint8_t iaddr;
    231          };
    232          

   \                                 In section .rodata, align 4
    233          static const struct _reg _regs[] = {
   \                     _regs:
   \        0x0   0x....'....        DC32 ?_4
   \        0x4   0x00 0x00          DC8 0, 0, 0, 0

   \              0x00 0x00
   \        0x8   0x....'....        DC32 ?_5
   \        0xC   0x01 0x00          DC8 1, 0, 0, 0

   \              0x00 0x00
   \       0x10   0x....'....        DC32 ?_6
   \       0x14   0x20 0x00          DC8 32, 0, 0, 0

   \              0x00 0x00
   \       0x18   0x....'....        DC32 ?_7
   \       0x1C   0x21 0x00          DC8 33, 0, 0, 0

   \              0x00 0x00
   \       0x20   0x....'....        DC32 ?_8
   \       0x24   0x22 0x00          DC8 34, 0, 0, 0

   \              0x00 0x00
   \       0x28   0x....'....        DC32 ?_9
   \       0x2C   0x30 0x00          DC8 48, 0, 0, 0

   \              0x00 0x00
   \       0x30   0x....'....        DC32 ?_10
   \       0x34   0x31 0x00          DC8 49, 0, 0, 0

   \              0x00 0x00
   \       0x38   0x....'....        DC32 ?_11
   \       0x3C   0x32 0x00          DC8 50, 0, 0, 0

   \              0x00 0x00
   \       0x40   0x....'....        DC32 ?_12
   \       0x44   0x40 0x00          DC8 64, 0, 0, 0

   \              0x00 0x00
   \       0x48   0x....'....        DC32 ?_13
   \       0x4C   0x41 0x00          DC8 65, 0, 0, 0

   \              0x00 0x00
   \       0x50   0x....'....        DC32 ?_14
   \       0x54   0x42 0x00          DC8 66, 0, 0, 0

   \              0x00 0x00
   \       0x58   0x....'....        DC32 ?_15
   \       0x5C   0x50 0x00          DC8 80, 0, 0, 0

   \              0x00 0x00
   \       0x60   0x....'....        DC32 ?_16
   \       0x64   0x51 0x00          DC8 81, 0, 0, 0

   \              0x00 0x00
   \       0x68   0x....'....        DC32 ?_17
   \       0x6C   0x54 0x00          DC8 84, 0, 0, 0

   \              0x00 0x00
   \       0x70   0x....'....        DC32 ?_18
   \       0x74   0x55 0x00          DC8 85, 0, 0, 0

   \              0x00 0x00
   \       0x78   0x....'....        DC32 ?_19
   \       0x7C   0x60 0x00          DC8 96, 0, 0, 0

   \              0x00 0x00
   \       0x80   0x....'....        DC32 ?_20
   \       0x84   0x61 0x00          DC8 97, 0, 0, 0

   \              0x00 0x00
   \       0x88   0x....'....        DC32 ?_21
   \       0x8C   0x64 0x00          DC8 100, 0, 0, 0

   \              0x00 0x00
   \       0x90   0x....'....        DC32 ?_22
   \       0x94   0x65 0x00          DC8 101, 0, 0, 0

   \              0x00 0x00
   \       0x98   0x....'....        DC32 ?_23
   \       0x9C   0x70 0x00          DC8 112, 0, 0, 0

   \              0x00 0x00
   \       0xA0   0x....'....        DC32 ?_24
   \       0xA4   0x71 0x00          DC8 113, 0, 0, 0

   \              0x00 0x00
   \       0xA8   0x....'....        DC32 ?_25
   \       0xAC   0x78 0x00          DC8 120, 0, 0, 0

   \              0x00 0x00
   \       0xB0   0x....'....        DC32 ?_26
   \       0xB4   0x79 0x00          DC8 121, 0, 0, 0

   \              0x00 0x00
   \       0xB8   0x....'....        DC32 ?_27
   \       0xBC   0x7A 0x00          DC8 122, 0, 0, 0

   \              0x00 0x00
   \       0xC0   0x0D 0x0A          DC8 "\015\012-- ACT8945A - Registers Dump --\015\012"

   \              0x2D 0x2D    

   \              0x20 0x41    

   \              0x43 0x54    

   \              0x38 0x39    

   \              0x34 0x35    

   \              0x41 0x20    

   \              0x2D 0x20    

   \              0x52 0x65    

   \              0x67 0x69    

   \              0x73 0x74    

   \              0x65 0x72    

   \              0x73 0x20    

   \              0x44 0x75    

   \              0x6D 0x70    

   \              0x20 0x2D    

   \              0x2D 0x0D    

   \              0x0A 0x00

   \                                 In section .data, align 4
   \                     _charging_states:
   \        0x0   0x....'....        DC32 ?_0, ?_1, ?_2, ?_3

   \              0x....'....  

   \              0x....'....  

   \              0x....'....
   \       0x10   0x....'....        DC32 ?_28, ?_29, ?_30, ?_31

   \              0x....'....  

   \              0x....'....  

   \              0x....'....
    234          	{ "SYS0   ", IADDR_SYS0 },
    235          	{ "SYS1   ", IADDR_SYS1 },
    236          	{ "REG1_20", IADDR_REG1 },
    237          	{ "REG1_21", IADDR_REG1 + 1 },
    238          	{ "REG1_22", IADDR_REG1 + 2 },
    239          	{ "REG2_30", IADDR_REG2 },
    240          	{ "REG2_31", IADDR_REG2 + 1 },
    241          	{ "REG2_32", IADDR_REG2 + 2 },
    242          	{ "REG3_40", IADDR_REG3 },
    243          	{ "REG3_41", IADDR_REG3 + 1 },
    244          	{ "REG3_42", IADDR_REG3 + 2 },
    245          	{ "REG4_50", IADDR_REG4 },
    246          	{ "REG4_51", IADDR_REG4 + 1 },
    247          	{ "REG5_54", IADDR_REG5 },
    248          	{ "REG5_55", IADDR_REG5 + 1 },
    249          	{ "REG6_60", IADDR_REG6 },
    250          	{ "REG6_61", IADDR_REG6 + 1 },
    251          	{ "REG7_64", IADDR_REG7 },
    252          	{ "REG7_65", IADDR_REG7 + 1 },
    253          	{ "APCH_70", IADDR_APCH_70 },
    254          	{ "APCH_71", IADDR_APCH_71 },
    255          	{ "APCH_78", IADDR_APCH_78 },
    256          	{ "APCH_79", IADDR_APCH_79 },
    257          	{ "APCH_7A", IADDR_APCH_7A },
    258          };
    259          
    260          static const char *_ovp_setting[4] = {
    261          	"6.6V", "7.0V", "7.5V", "8.0V",
    262          } ;
    263          
    264          /*------------------------------------------------------------------------------
    265           *         Local functions
    266           *----------------------------------------------------------------------------*/
    267          

   \                                 In section SOFTPACK, align 4, keep-with-next
    268          static bool _act8945a_read_reg(struct _act8945a* act8945a, uint8_t iaddr, uint8_t* value)
    269          {
   \                     _act8945a_read_reg:
   \        0x0   0xE92D'41F2        PUSH     {R1,R4-R8,LR}
    270          	int err;
    271          	struct _buffer buf[2] = {
    272          		{
    273          			.data = &iaddr,
    274          			.size = 1,
    275          			.attr = BUS_I2C_BUF_ATTR_START | BUS_BUF_ATTR_TX | BUS_I2C_BUF_ATTR_STOP,
    276          		},
    277          		{
    278          			.data = value,
    279          			.size = 1,
    280          			.attr = BUS_I2C_BUF_ATTR_START | BUS_BUF_ATTR_RX | BUS_I2C_BUF_ATTR_STOP,
    281          		},
    282          	};
   \        0x4   0x....'....        LDR      R1,??DataTable48
   \        0x8   0xE891'50E8        LDM      R1,{R3,R5-R7,R12,LR}
   \        0xC   0xE24D'D01C        SUB      SP,SP,#+28
   \       0x10   0xE1A0'4000        MOV      R4,R0
   \       0x14   0xE28D'0004        ADD      R0,SP,#+4
   \       0x18   0xE28D'801C        ADD      R8,SP,#+28
   \       0x1C   0xE880'50E8        STM      R0,{R3,R5-R7,R12,LR}
   \       0x20   0xE58D'8004        STR      R8,[SP, #+4]
   \       0x24   0xE58D'2010        STR      R2,[SP, #+16]
    283          
    284          	bus_start_transaction(act8945a->bus);
   \       0x28   0xE5D4'0000        LDRB     R0,[R4, #+0]
   \       0x2C   0x....'....        BL       bus_start_transaction
    285          	err = bus_transfer(act8945a->bus, act8945a->addr, buf, 2, NULL);
   \       0x30   0xE3A0'0000        MOV      R0,#+0
   \       0x34   0xE3A0'3002        MOV      R3,#+2
   \       0x38   0xE58D'0000        STR      R0,[SP, #+0]
   \       0x3C   0xE5D4'1001        LDRB     R1,[R4, #+1]
   \       0x40   0xE5D4'0000        LDRB     R0,[R4, #+0]
   \       0x44   0xE28D'2004        ADD      R2,SP,#+4
   \       0x48   0x....'....        BL       bus_transfer
   \       0x4C   0xE1A0'5000        MOV      R5,R0
    286          	bus_stop_transaction(act8945a->bus);
   \       0x50   0xE5D4'0000        LDRB     R0,[R4, #+0]
   \       0x54   0x....'....        BL       bus_stop_transaction
    287          
    288          	if (err < 0)
   \       0x58   0xE1E0'0005        MVN      R0,R5
    289          		return false;
   \       0x5C   0xE28D'D020        ADD      SP,SP,#+32
   \       0x60   0xE1A0'0FA0        LSR      R0,R0,#+31
   \       0x64   0xE8BD'81F0        POP      {R4-R8,PC}       ;; return
    290          	return true;
    291          }

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_111:
   \        0x0   0x0000'0000        DC32 0x0, 1, 12'290, 0x0, 1, 12'289

   \              0x0000'0001  

   \              0x0000'3002  

   \              0x0000'0000  

   \              0x0000'0001  

   \              0x0000'3001
    292          

   \                                 In section SOFTPACK, align 4, keep-with-next
    293          static bool _act8945a_write_reg(struct _act8945a* act8945a, uint8_t iaddr, uint8_t value)
    294          {
   \                     _act8945a_write_reg:
   \        0x0   0xE92D'4078        PUSH     {R3-R6,LR}
    295          	int err;
    296          	uint8_t _data[2] = { iaddr , value };
    297          	struct _buffer buf[1] = {
    298          		{
    299          			.data = _data,
    300          			.size = 2,
    301          			.attr = BUS_I2C_BUF_ATTR_START | BUS_BUF_ATTR_TX | BUS_I2C_BUF_ATTR_STOP,
    302          		}
    303          	};
   \        0x4   0x....'....        LDR      R3,??DataTable48_1
   \        0x8   0xE893'5020        LDM      R3,{R5,R12,LR}
   \        0xC   0xE24D'D014        SUB      SP,SP,#+20
   \       0x10   0xE1A0'4000        MOV      R4,R0
   \       0x14   0xE5CD'2005        STRB     R2,[SP, #+5]
   \       0x18   0xE28D'2008        ADD      R2,SP,#+8
   \       0x1C   0xE28D'6004        ADD      R6,SP,#+4
   \       0x20   0xE882'5020        STM      R2,{R5,R12,LR}
   \       0x24   0xE5CD'1004        STRB     R1,[SP, #+4]
   \       0x28   0xE58D'6008        STR      R6,[SP, #+8]
    304          
    305          	bus_start_transaction(act8945a->bus);
   \       0x2C   0xE5D4'0000        LDRB     R0,[R4, #+0]
   \       0x30   0x....'....        BL       bus_start_transaction
    306          	err = bus_transfer(act8945a->bus, act8945a->addr, buf, 1, NULL);
   \       0x34   0xE3A0'1000        MOV      R1,#+0
   \       0x38   0xE3A0'3001        MOV      R3,#+1
   \       0x3C   0xE58D'1000        STR      R1,[SP, #+0]
   \       0x40   0xE5D4'1001        LDRB     R1,[R4, #+1]
   \       0x44   0xE5D4'0000        LDRB     R0,[R4, #+0]
   \       0x48   0xE28D'2008        ADD      R2,SP,#+8
   \       0x4C   0x....'....        BL       bus_transfer
   \       0x50   0xE1A0'5000        MOV      R5,R0
    307          	bus_stop_transaction(act8945a->bus);
   \       0x54   0xE5D4'0000        LDRB     R0,[R4, #+0]
   \       0x58   0x....'....        BL       bus_stop_transaction
    308          
    309          	if (err < 0)
   \       0x5C   0xE1E0'0005        MVN      R0,R5
    310          		return false;
   \       0x60   0xE28D'D018        ADD      SP,SP,#+24
   \       0x64   0xE1A0'0FA0        LSR      R0,R0,#+31
   \       0x68   0xE8BD'8070        POP      {R4-R6,PC}       ;; return
    311          	return true;
    312          }

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_112:
   \        0x0   0x0000'0000        DC32 0x0, 2, 12'290

   \              0x0000'0002  

   \              0x0000'3002
    313          

   \                                 In section SOFTPACK, align 4, keep-with-next
    314          static bool _act8945a_update_cached_registers(struct _act8945a *act8945a)
    315          {
   \                     _act8945a_update_cached_registers:
   \        0x0   0xE92D'4010        PUSH     {R4,LR}
   \        0x4   0xE1A0'4000        MOV      R4,R0
    316          	return _act8945a_read_reg(act8945a, IADDR_SYS0, &act8945a->sys0) &&
    317          		_act8945a_read_reg(act8945a, IADDR_APCH_78, &act8945a->apch78) &&
    318          		_act8945a_read_reg(act8945a, IADDR_APCH_79, &act8945a->apch79) &&
    319          		_act8945a_read_reg(act8945a, IADDR_APCH_7A, &act8945a->apch7a);
   \        0x8   0xE3A0'1000        MOV      R1,#+0
   \        0xC   0xE284'2034        ADD      R2,R4,#+52
   \       0x10   0x....'....        BL       _act8945a_read_reg
   \       0x14   0xE350'0000        CMP      R0,#+0
   \       0x18   0x0A00'0011        BEQ      ??_act8945a_update_cached_registers_0
   \       0x1C   0xE284'2035        ADD      R2,R4,#+53
   \       0x20   0xE3A0'1078        MOV      R1,#+120
   \       0x24   0xE1A0'0004        MOV      R0,R4
   \       0x28   0x....'....        BL       _act8945a_read_reg
   \       0x2C   0xE350'0000        CMP      R0,#+0
   \       0x30   0x0A00'000B        BEQ      ??_act8945a_update_cached_registers_0
   \       0x34   0xE284'2036        ADD      R2,R4,#+54
   \       0x38   0xE3A0'1079        MOV      R1,#+121
   \       0x3C   0xE1A0'0004        MOV      R0,R4
   \       0x40   0x....'....        BL       _act8945a_read_reg
   \       0x44   0xE350'0000        CMP      R0,#+0
   \       0x48   0x0A00'0005        BEQ      ??_act8945a_update_cached_registers_0
   \       0x4C   0xE284'2037        ADD      R2,R4,#+55
   \       0x50   0xE3A0'107A        MOV      R1,#+122
   \       0x54   0xE1A0'0004        MOV      R0,R4
   \       0x58   0x....'....        BL       _act8945a_read_reg
   \       0x5C   0xE350'0000        CMP      R0,#+0
   \       0x60   0x13A0'0001        MOVNE    R0,#+1
   \                     ??_act8945a_update_cached_registers_0:
   \       0x64   0xE8BD'8010        POP      {R4,PC}          ;; return
    320          }
    321          

   \                                 In section SOFTPACK, align 4, keep-with-next
    322          static void _act8945a_irq_handler(uint32_t group, uint32_t status, void* user_arg)
    323          {
   \                     _act8945a_irq_handler:
   \        0x0   0xE92D'41F0        PUSH     {R4-R8,LR}
   \        0x4   0xE1A0'4002        MOV      R4,R2
    324          	struct _act8945a *act8945a = (struct _act8945a*)user_arg;
    325          
    326          	if (status & act8945a->desc.pin_irq.mask) {
   \        0x8   0xE594'0018        LDR      R0,[R4, #+24]
   \        0xC   0xE110'0001        TST      R0,R1
   \       0x10   0x0A00'002B        BEQ      ??_act8945a_irq_handler_0
    327          		union _sys0 sys0;
    328          		union _apch_78 apch78;
    329          		union _apch_79 apch79;
    330          		union _apch_7a apch7a;
    331          
    332          		// save previous values
    333          		sys0.u8 = act8945a->sys0;
   \       0x14   0xE5D4'8034        LDRB     R8,[R4, #+52]
    334          		apch78.u8 = act8945a->apch78;
   \       0x18   0xE5D4'7035        LDRB     R7,[R4, #+53]
    335          		apch79.u8 = act8945a->apch79;
   \       0x1C   0xE5D4'5036        LDRB     R5,[R4, #+54]
    336          		apch7a.u8 = act8945a->apch7a;
   \       0x20   0xE5D4'6037        LDRB     R6,[R4, #+55]
    337          
    338          		// update values
    339          		_act8945a_update_cached_registers(act8945a);
   \       0x24   0xE1A0'0004        MOV      R0,R4
   \       0x28   0x....'....        BL       _act8945a_update_cached_registers
    340          
    341          		// show changes
    342          		if (sys0.u8 != act8945a->sys0) {
   \       0x2C   0xE5D4'1034        LDRB     R1,[R4, #+52]
   \       0x30   0xE158'0001        CMP      R8,R1
   \       0x34   0x0A00'0005        BEQ      ??_act8945a_irq_handler_1
    343          			trace_debug("PMIC IRQ: SYST0 changed\r\n");
   \       0x38   0x....'....        LDR      R0,??DataTable48_6
   \       0x3C   0xE590'2000        LDR      R2,[R0, #+0]
   \       0x40   0xE352'0005        CMP      R2,#+5
   \       0x44   0x3A00'0001        BCC      ??_act8945a_irq_handler_1
   \       0x48   0x....'....        LDR      R0,??DataTable48_7
   \       0x4C   0x....'....        BL       printf
    344          		}
    345          		if (apch78.u8 != act8945a->apch78) {
   \                     ??_act8945a_irq_handler_1:
   \       0x50   0xE5D4'1035        LDRB     R1,[R4, #+53]
   \       0x54   0xE157'0001        CMP      R7,R1
   \       0x58   0x0A00'0007        BEQ      ??_act8945a_irq_handler_2
    346          			if (apch78.bits.chgdat == 0x01)
   \       0x5C   0xE317'0001        TST      R7,#0x1
   \       0x60   0x0A00'0005        BEQ      ??_act8945a_irq_handler_2
    347          				trace_debug("PMIC IRQ: charger state machine, END-OF-CHARGE state\r\n");
   \       0x64   0x....'....        LDR      R0,??DataTable48_6
   \       0x68   0xE590'1000        LDR      R1,[R0, #+0]
   \       0x6C   0xE351'0005        CMP      R1,#+5
   \       0x70   0x3A00'0001        BCC      ??_act8945a_irq_handler_2
   \       0x74   0x....'....        LDR      R0,??DataTable48_8
   \       0x78   0x....'....        BL       printf
    348          		}
    349          		if (apch79.u8 != act8945a->apch79) {
   \                     ??_act8945a_irq_handler_2:
   \       0x7C   0xE5D4'0036        LDRB     R0,[R4, #+54]
   \       0x80   0xE155'0000        CMP      R5,R0
   \       0x84   0x0A00'0001        BEQ      ??_act8945a_irq_handler_3
    350          			printf("PMIC IRQ: APCH79 changed\r\n");
   \       0x88   0x....'....        LDR      R0,??DataTable48_9
   \       0x8C   0x....'....        BL       printf
    351          		}
    352          		if (apch7a.u8 != act8945a->apch7a) {
   \                     ??_act8945a_irq_handler_3:
   \       0x90   0xE5D4'1037        LDRB     R1,[R4, #+55]
   \       0x94   0xE156'0001        CMP      R6,R1
   \       0x98   0x0A00'0009        BEQ      ??_act8945a_irq_handler_0
    353          			trace_debug("PMIC IRQ: %s\r\n", _charging_states[apch7a.bits.cstate]);
   \       0x9C   0x....'....        LDR      R0,??DataTable48_6
   \       0xA0   0xE590'2000        LDR      R2,[R0, #+0]
   \       0xA4   0xE352'0005        CMP      R2,#+5
   \       0xA8   0x3A00'0005        BCC      ??_act8945a_irq_handler_0
   \       0xAC   0xE7E1'0256        UBFX     R0,R6,#+4,#+2
   \       0xB0   0x....'....        LDR      R1,??DataTable49
   \       0xB4   0xE791'1100        LDR      R1,[R1, +R0, LSL #+2]
   \       0xB8   0xE8BD'41F0        POP      {R4-R8,LR}
   \       0xBC   0x....'....        LDR      R0,??DataTable49_19
   \       0xC0   0x....'....        B        printf           ;; tailcall
    354          		}
    355          	}
    356          }
   \                     ??_act8945a_irq_handler_0:
   \       0xC4   0xE8BD'81F0        POP      {R4-R8,PC}       ;; return
    357          

   \                                 In section SOFTPACK, align 4, keep-with-next
    358          static void _act8945a_lbo_handler(uint32_t group, uint32_t status, void* user_arg)
    359          {
   \                     _act8945a_lbo_handler:
   \        0x0   0xE92D'4010        PUSH     {R4,LR}
   \        0x4   0xE1A0'4002        MOV      R4,R2
    360          	struct _act8945a *act8945a = (struct _act8945a*)user_arg;
    361          
    362          	if (status & act8945a->desc.pin_lbo.mask) {
   \        0x8   0xE594'0028        LDR      R0,[R4, #+40]
   \        0xC   0xE110'0001        TST      R0,R1
   \       0x10   0x0A00'000D        BEQ      ??_act8945a_lbo_handler_0
    363          		trace_debug("PMIC LBO: Low Battery Output\r\n");
   \       0x14   0x....'....        LDR      R1,??DataTable48_6
   \       0x18   0xE591'2000        LDR      R2,[R1, #+0]
   \       0x1C   0xE352'0005        CMP      R2,#+5
   \       0x20   0x3A00'0001        BCC      ??_act8945a_lbo_handler_1
   \       0x24   0x....'....        LDR      R0,??DataTable49_20
   \       0x28   0x....'....        BL       printf
    364          		if(	act8945a->lbo_count++ >= 10)
   \                     ??_act8945a_lbo_handler_1:
   \       0x2C   0xE5D4'0038        LDRB     R0,[R4, #+56]
   \       0x30   0xE350'000A        CMP      R0,#+10
   \       0x34   0xE280'1001        ADD      R1,R0,#+1
   \       0x38   0xE5C4'1038        STRB     R1,[R4, #+56]
   \       0x3C   0xBA00'0002        BLT      ??_act8945a_lbo_handler_0
    365          			pio_disable_it(&act8945a->desc.pin_lbo);
   \       0x40   0xE284'0024        ADD      R0,R4,#+36
   \       0x44   0xE8BD'4010        POP      {R4,LR}
   \       0x48   0x....'....        B        pio_disable_it   ;; tailcall
    366          	}
    367          }
   \                     ??_act8945a_lbo_handler_0:
   \       0x4C   0xE8BD'8010        POP      {R4,PC}          ;; return
    368          
    369          // Enable interrupt on nIRQ pin to MPU
    370          static void _act8945a_enable_interrupt_handlers(struct _act8945a *act8945a)
    371          {
    372          	/* Configure PMIC line interrupts. */
    373          	pio_add_handler_to_group(act8945a->desc.pin_irq.group,
    374          				 act8945a->desc.pin_irq.mask,
    375          				 &_act8945a_irq_handler,
    376          				 act8945a);
    377          	pio_enable_it(&act8945a->desc.pin_irq);
    378          
    379          	/* Configure LBO line interrupts. */
    380          	act8945a->lbo_count = 0;
    381          	pio_add_handler_to_group(act8945a->desc.pin_lbo.group,
    382          				 act8945a->desc.pin_lbo.mask,
    383          				 &_act8945a_lbo_handler,
    384          				 act8945a);
    385          	pio_enable_it(&act8945a->desc.pin_lbo);
    386          }
    387          
    388          static uint16_t _act8945a_convert_voltage_setting(uint8_t setting)
    389          {
    390          	uint8_t mul20, mul53;
    391          
    392          	mul20 = (setting & 0x07) >> 0;
    393          	mul53 = (setting & 0x38) >> 3;
    394          
    395          	if (setting <= 0x17)
    396          		return (uint16_t)(1000 * (0.6 + (0.2 * mul53) + (0.025 * mul20)));
    397          	else if (setting <= 0x2F)
    398          		return (uint16_t)(1000 * (1.2 + (0.4 * (mul53 - 3)) + (0.050 * mul20)));
    399          	else
    400          		return (uint16_t)(1000 * (2.4 + (0.8 * (mul53 - 6)) + (0.1 * mul20)));
    401          }
    402          
    403          /*------------------------------------------------------------------------------
    404           *         Exported functions
    405           *----------------------------------------------------------------------------*/
    406          

   \                                 In section SOFTPACK, align 4, keep-with-next
    407          bool act8945a_configure(struct _act8945a *act8945a)
    408          {
   \                     act8945a_configure:
   \        0x0   0xE92D'401C        PUSH     {R2-R4,LR}
   \        0x4   0xE1A0'4000        MOV      R4,R0
    409          	uint8_t data = 0;
   \        0x8   0xE3A0'0000        MOV      R0,#+0
   \        0xC   0xE5CD'0001        STRB     R0,[SP, #+1]
    410          
    411          	pio_configure(&act8945a->desc.pin_chglev, 1);
   \       0x10   0xE3A0'1001        MOV      R1,#+1
   \       0x14   0xE284'0004        ADD      R0,R4,#+4
   \       0x18   0x....'....        BL       pio_configure
    412          	pio_configure(&act8945a->desc.pin_irq, 1);
   \       0x1C   0xE3A0'1001        MOV      R1,#+1
   \       0x20   0xE284'0014        ADD      R0,R4,#+20
   \       0x24   0x....'....        BL       pio_configure
    413          	pio_configure(&act8945a->desc.pin_lbo, 1);
   \       0x28   0xE3A0'1001        MOV      R1,#+1
   \       0x2C   0xE284'0024        ADD      R0,R4,#+36
   \       0x30   0x....'....        BL       pio_configure
    414          
    415          	if (!_act8945a_read_reg(act8945a, IADDR_SYS0, &data))
   \       0x34   0xE28D'2001        ADD      R2,SP,#+1
   \       0x38   0xE3A0'1000        MOV      R1,#+0
   \       0x3C   0xE1A0'0004        MOV      R0,R4
   \       0x40   0x....'....        BL       _act8945a_read_reg
   \       0x44   0xE350'0000        CMP      R0,#+0
   \       0x48   0x0A00'0042        BEQ      ??act8945a_configure_0
    416          		return false;
    417          
    418          	/* Set Charge Level */
    419          	act8945a_set_charge_level(act8945a, ACT8945A_CHARGE_LEVEL_450MA);
   \       0x4C   0xE284'0004        ADD      R0,R4,#+4
   \       0x50   0x....'....        BL       pio_set
   \       0x54   0x....'....        LDR      R0,??DataTable48_6
   \       0x58   0xE590'1000        LDR      R1,[R0, #+0]
   \       0x5C   0xE351'0005        CMP      R1,#+5
   \       0x60   0x3A00'0001        BCC      ??act8945a_configure_1
   \       0x64   0x....'....        LDR      R0,??DataTable49_1
   \       0x68   0x....'....        BL       printf
    420          
    421          	/* Set level interrupt */
    422          	act8945a_disable_all_apch_interrupts(act8945a);
   \                     ??act8945a_configure_1:
   \       0x6C   0xE1A0'0004        MOV      R0,R4
   \       0x70   0x....'....        BL       act8945a_disable_all_apch_interrupts
    423          	act8945a_configure_apch_interrupt(act8945a, CHARGE_STATE_INTO_EOC_STATE, true);
   \       0x74   0xE3A0'2001        MOV      R2,#+1
   \       0x78   0xE3A0'1004        MOV      R1,#+4
   \       0x7C   0xE1A0'0004        MOV      R0,R4
   \       0x80   0x....'....        BL       act8945a_configure_apch_interrupt
    424          	act8945a_configure_apch_interrupt(act8945a, CHARGE_STATE_OUT_EOC_STATE, true);
   \       0x84   0xE3A0'2001        MOV      R2,#+1
   \       0x88   0xE3A0'1000        MOV      R1,#+0
   \       0x8C   0xE1A0'0004        MOV      R0,R4
   \       0x90   0x....'....        BL       act8945a_configure_apch_interrupt
    425          	act8945a_configure_apch_interrupt(act8945a, PRECHARGE_TIME_OUT, true);
   \       0x94   0xE3A0'2001        MOV      R2,#+1
   \       0x98   0xE3A0'1003        MOV      R1,#+3
   \       0x9C   0xE1A0'0004        MOV      R0,R4
   \       0xA0   0x....'....        BL       act8945a_configure_apch_interrupt
    426          	act8945a_configure_apch_interrupt(act8945a, TOTAL_CHARGE_TIME_OUT, true);
   \       0xA4   0xE3A0'2001        MOV      R2,#+1
   \       0xA8   0xE3A0'1007        MOV      R1,#+7
   \       0xAC   0xE1A0'0004        MOV      R0,R4
   \       0xB0   0x....'....        BL       act8945a_configure_apch_interrupt
    427          	act8945a_enable_system_voltage_level_interrupt(act8945a, true);
   \       0xB4   0xE1A0'200D        MOV      R2,SP
   \       0xB8   0xE3A0'1000        MOV      R1,#+0
   \       0xBC   0xE1A0'0004        MOV      R0,R4
   \       0xC0   0x....'....        BL       _act8945a_read_reg
   \       0xC4   0xE350'0000        CMP      R0,#+0
   \       0xC8   0x0A00'0005        BEQ      ??act8945a_configure_2
   \       0xCC   0xE5DD'1000        LDRB     R1,[SP, #+0]
   \       0xD0   0xE1A0'0004        MOV      R0,R4
   \       0xD4   0xE381'2060        ORR      R2,R1,#0x60
   \       0xD8   0xE3A0'1000        MOV      R1,#+0
   \       0xDC   0xE5CD'2000        STRB     R2,[SP, #+0]
   \       0xE0   0x....'....        BL       _act8945a_write_reg
    428          
    429          	/* Update cached register values */
    430          	if (!_act8945a_update_cached_registers(act8945a))
   \                     ??act8945a_configure_2:
   \       0xE4   0xE1A0'0004        MOV      R0,R4
   \       0xE8   0x....'....        BL       _act8945a_update_cached_registers
   \       0xEC   0xE350'0000        CMP      R0,#+0
   \       0xF0   0x0A00'0018        BEQ      ??act8945a_configure_0
    431          		return false;
    432          
    433          	act8945a_enable_regulator_fault_interrupt(act8945a, 1, true);
   \       0xF4   0xE3A0'2001        MOV      R2,#+1
   \       0xF8   0xE3A0'1001        MOV      R1,#+1
   \       0xFC   0xE1A0'0004        MOV      R0,R4
   \      0x100   0x....'....        BL       act8945a_enable_regulator_fault_interrupt
    434          	act8945a_enable_regulator_fault_interrupt(act8945a, 5, true);
   \      0x104   0xE3A0'2001        MOV      R2,#+1
   \      0x108   0xE3A0'1005        MOV      R1,#+5
   \      0x10C   0xE1A0'0004        MOV      R0,R4
   \      0x110   0x....'....        BL       act8945a_enable_regulator_fault_interrupt
    435          
    436          	/* Enable interrupts */
    437          	_act8945a_enable_interrupt_handlers(act8945a);
   \      0x114   0xE5D4'0014        LDRB     R0,[R4, #+20]
   \      0x118   0xE594'1018        LDR      R1,[R4, #+24]
   \      0x11C   0xE1A0'3004        MOV      R3,R4
   \      0x120   0x....'....        LDR      R2,??DataTable50
   \      0x124   0x....'....        BL       pio_add_handler_to_group
   \      0x128   0xE284'0014        ADD      R0,R4,#+20
   \      0x12C   0x....'....        BL       pio_enable_it
   \      0x130   0xE3A0'0000        MOV      R0,#+0
   \      0x134   0xE594'1028        LDR      R1,[R4, #+40]
   \      0x138   0xE5C4'0038        STRB     R0,[R4, #+56]
   \      0x13C   0xE5D4'0024        LDRB     R0,[R4, #+36]
   \      0x140   0xE1A0'3004        MOV      R3,R4
   \      0x144   0x....'....        ADR      R2,_act8945a_lbo_handler
   \      0x148   0x....'....        BL       pio_add_handler_to_group
   \      0x14C   0xE284'0024        ADD      R0,R4,#+36
   \      0x150   0x....'....        BL       pio_enable_it
    438          
    439          	return true;
   \      0x154   0xE3A0'0001        MOV      R0,#+1
   \                     ??act8945a_configure_0:
   \      0x158   0xE8BD'8016        POP      {R1,R2,R4,PC}    ;; return
    440          }
    441          
    442          // Charge Current Selection Input
    443          // In USB-Mode: CHGLEV = 1 -> I charge 450mA
    444          //              CHGLEV = 0 -> I charge 100mA

   \                                 In section SOFTPACK, align 4, keep-with-next
    445          void act8945a_set_charge_level(struct _act8945a *act8945a,
    446          		enum _act8945a_charge_level level)
    447          {
   \                     act8945a_set_charge_level:
   \        0x0   0xE92D'5000        PUSH     {R12,LR}
    448          	switch (level) {
   \        0x4   0xE1B0'2001        MOVS     R2,R1
   \        0x8   0x0A00'0002        BEQ      ??act8945a_set_charge_level_0
   \        0xC   0xE351'0001        CMP      R1,#+1
   \       0x10   0x0A00'0008        BEQ      ??act8945a_set_charge_level_1
   \       0x14   0xEA00'0010        B        ??act8945a_set_charge_level_2
    449          	case ACT8945A_CHARGE_LEVEL_100MA:
    450          		pio_clear(&act8945a->desc.pin_chglev);
   \                     ??act8945a_set_charge_level_0:
   \       0x18   0xE280'0004        ADD      R0,R0,#+4
   \       0x1C   0x....'....        BL       pio_clear
    451          		trace_debug("Charge Level: 100mA\r\n");
   \       0x20   0x....'....        LDR      R0,??DataTable48_6
   \       0x24   0xE590'1000        LDR      R1,[R0, #+0]
   \       0x28   0xE351'0005        CMP      R1,#+5
   \       0x2C   0x3A00'0011        BCC      ??act8945a_set_charge_level_3
   \       0x30   0x....'....        LDR      R0,??DataTable49_2
   \       0x34   0xEA00'0006        B        ??act8945a_set_charge_level_4
    452          		break;
    453          	case ACT8945A_CHARGE_LEVEL_450MA:
    454          		pio_set(&act8945a->desc.pin_chglev);
   \                     ??act8945a_set_charge_level_1:
   \       0x38   0xE280'0004        ADD      R0,R0,#+4
   \       0x3C   0x....'....        BL       pio_set
    455          		trace_debug("Charge Level: 450mA\r\n");
   \       0x40   0x....'....        LDR      R0,??DataTable48_6
   \       0x44   0xE590'1000        LDR      R1,[R0, #+0]
   \       0x48   0xE351'0005        CMP      R1,#+5
   \       0x4C   0x3A00'0009        BCC      ??act8945a_set_charge_level_3
   \       0x50   0x....'....        LDR      R0,??DataTable49_1
   \                     ??act8945a_set_charge_level_4:
   \       0x54   0xE8BD'4002        POP      {R1,LR}
   \       0x58   0x....'....        B        printf           ;; tailcall
    456          		break;
    457          	default:
    458          		trace_warning("Invalid charge level requested: %d\r\n",
    459          				(int)level);
   \                     ??act8945a_set_charge_level_2:
   \       0x5C   0x....'....        LDR      R0,??DataTable48_6
   \       0x60   0xE590'2000        LDR      R2,[R0, #+0]
   \       0x64   0xE352'0003        CMP      R2,#+3
   \       0x68   0x3A00'0002        BCC      ??act8945a_set_charge_level_3
   \       0x6C   0xE8BD'4004        POP      {R2,LR}
   \       0x70   0x....'....        LDR      R0,??DataTable51
   \       0x74   0x....'....        B        printf           ;; tailcall
    460          		break;
    461          	}
    462          }
   \                     ??act8945a_set_charge_level_3:
   \       0x78   0xE8BD'8001        POP      {R0,PC}          ;; return
    463          
    464          // Set or Clear an APCH interrupt
    465          // Set bit to 1 enable interrupt,
    466          // Clear bit to 0 to disable interrupt

   \                                 In section SOFTPACK, align 4, keep-with-next
    467          bool act8945a_configure_apch_interrupt(struct _act8945a *act8945a,
    468          		enum _act8945a_interrupt interrupt, bool enable)
    469          {
   \                     act8945a_configure_apch_interrupt:
   \        0x0   0xE92D'407C        PUSH     {R2-R6,LR}
   \        0x4   0xE1A0'6001        MOV      R6,R1
   \        0x8   0xE1A0'5002        MOV      R5,R2
   \        0xC   0xE1A0'4000        MOV      R4,R0
    470          	bool status;
    471          	union _apch_78 apch78;
    472          	union _apch_79 apch79;
    473          
    474          	if (!_act8945a_read_reg(act8945a, IADDR_APCH_78, &apch78.u8) ||
    475          		!_act8945a_read_reg(act8945a, IADDR_APCH_79, &apch79.u8))
   \       0x10   0xE28D'2001        ADD      R2,SP,#+1
   \       0x14   0xE3A0'1078        MOV      R1,#+120
   \       0x18   0x....'....        BL       _act8945a_read_reg
   \       0x1C   0xE350'0000        CMP      R0,#+0
   \       0x20   0x0A00'007A        BEQ      ??act8945a_configure_apch_interrupt_1
   \       0x24   0xE1A0'200D        MOV      R2,SP
   \       0x28   0xE3A0'1079        MOV      R1,#+121
   \       0x2C   0xE1A0'0004        MOV      R0,R4
   \       0x30   0x....'....        BL       _act8945a_read_reg
   \       0x34   0xE350'0000        CMP      R0,#+0
   \       0x38   0x0A00'0074        BEQ      ??act8945a_configure_apch_interrupt_1
    476          		return false;
    477          
    478          	switch (interrupt)
   \       0x3C   0xE1A0'0006        MOV      R0,R6
   \       0x40   0xE350'0007        CMP      R0,#+7
   \       0x44   0x8A00'0069        BHI      ??act8945a_configure_apch_interrupt_2
   \       0x48   0xE7DF'1000        LDRB     R1,[PC, R0]
   \       0x4C   0xE08F'F101        ADD      PC,PC,R1, LSL #+2
   \                     ??act8945a_configure_apch_interrupt_0:
   \       0x50   0x46 0x01          DC8      0x46,0x1,0x25,0x51

   \              0x25 0x51
   \       0x54   0x3B 0x1A          DC8      0x3B,0x1A,0x30,0x5C

   \              0x30 0x5C
    479          	{
    480          	// Interrupt generated any time the input supply is disconnected when
    481          	// INSTAT[] bit is set to 1 and the INDIS[] bit is set to 1.
    482          	case INPUT_VOLTAGE_OUT_VALID_RANGE: // Interrupt
    483          		apch78.bits.instat = enable ? 1 : 0;
   \                     ??act8945a_configure_apch_interrupt_3:
   \       0x58   0xE5DD'2001        LDRB     R2,[SP, #+1]
   \       0x5C   0xE1B0'0005        MOVS     R0,R5
   \       0x60   0x13A0'0020        MOVNE    R0,#+32
   \       0x64   0xE202'30DF        AND      R3,R2,#0xDF
    484          		apch79.bits.indis = enable ? 1 : 0;
   \       0x68   0xE5DD'2000        LDRB     R2,[SP, #+0]
   \       0x6C   0xE180'0003        ORR      R0,R0,R3
   \       0x70   0xE5CD'0001        STRB     R0,[SP, #+1]
   \       0x74   0x13A0'0002        MOVNE    R0,#+2
   \       0x78   0xE202'30FD        AND      R3,R2,#0xFD
   \       0x7C   0x03A0'0000        MOVEQ    R0,#+0
    485          		break;
    486          
    487          	// Interrupt generated any time the input supply is connected when
    488          	// INSTAT[] bit is set to 1 and the INCON[] bit is set to 1.
    489          	case INPUT_VOLTAGE_INTO_VALID_RANGE:
    490          		apch78.bits.instat = enable ? 1 : 0;
    491          		apch79.bits.incon = enable ? 1 : 0;
    492          		break;
    493          
    494          	// Interrupts based upon the status of the battery temperature.
    495          	// Set the TEMPOUT[] bit to 1 and TEMPSTAT[] bit to 1 to generate
    496          	// an interrupt when battery temperature goes out of the valid
    497          	// temperature range.
    498          	case BATTERY_TEMPERATURE_OUT_RANGE:
    499          		apch78.bits.tempstat = enable ? 1 : 0;
    500          		apch79.bits.tempout = enable ? 1 : 0;
    501          		break;
    502          
    503          	// Interrupts based upon the status of the battery temperature.
    504          	// Set the TEMPIN[] bit to 1 and TEMPSTAT[] bit to 1 to generate
    505          	// an interrupt when battery temperature returns to the valid range.
    506          	case BATTERY_TEMPERATURE_INTO_RANGE:
    507          		apch78.bits.tempstat = enable ? 1 : 0;
    508          		apch79.bits.tempin = enable ? 1 : 0;
    509          		break;
    510          
    511          	// Interrupt when the charger state machine goes into the
    512          	// END-OF-CHARGE (EOC). Set CHGEOCIN[] bit to 1 and CHGSTAT[] bit
    513          	// to 1 to generate an interrupt when the charger state machine goes
    514          	// into the END-OF-CHARGE (EOC)state.
    515          	case CHARGE_STATE_INTO_EOC_STATE:
    516          		apch78.bits.chgstat = enable ? 1 : 0;
    517          		apch79.bits.chgeocin = enable ? 1 : 0;
    518          		break;
    519          
    520          	// Interrupt when the charger state machine exit the
    521          	// END-OF-CHARGE (EOC). Set CHGEOCOUT[] bit to 1 and CHGSTAT[] bit
    522          	// to 1 to generate an interrupt when the charger state machine exits
    523          	// the EOC state.
    524          	case CHARGE_STATE_OUT_EOC_STATE:
    525          		apch78.bits.chgstat = enable ? 1 : 0;
    526          		apch79.bits.chgeocout = enable ? 1 : 0;
    527          		break;
    528          
    529          	// Interrupts based upon the status of the charge timers.
    530          	// Set the TIMRPRE[] bit to 1 and TIMRSTAT[] bit to 1 to generate an
    531          	// interrupt when the Precondition Timer expires.
    532          	case PRECHARGE_TIME_OUT:
    533          		apch78.bits.timrstat = enable ? 1 : 0;
    534          		apch79.bits.timrpre = enable ? 1 : 0;
    535          		break;
    536          
    537          	// Set the TIMRTOT[] bit to 1 and TIMRSTAT[] bit to 1 to generate an
    538          	// interrupt when the Total-Charge Timer expires.
    539          	case TOTAL_CHARGE_TIME_OUT:
    540          		apch78.bits.timrstat = enable ? 1 : 0;
    541          		apch79.bits.timrtot = enable ? 1 : 0;
    542          		break;
    543          
    544          	default:
    545          		trace_warning("Unknown interrupt %d\r\n", interrupt);
    546          		return false;
    547          	}
    548          
    549          	// Write configuration to registers
    550          	status = _act8945a_write_reg(act8945a, IADDR_APCH_78, apch78.u8);
   \                     ??act8945a_configure_apch_interrupt_4:
   \       0x80   0xE5DD'2001        LDRB     R2,[SP, #+1]
   \       0x84   0xE180'0003        ORR      R0,R0,R3
   \       0x88   0xE3A0'1078        MOV      R1,#+120
   \       0x8C   0xE5CD'0000        STRB     R0,[SP, #+0]
   \       0x90   0xE1A0'0004        MOV      R0,R4
   \       0x94   0x....'....        BL       _act8945a_write_reg
    551          	status |= _act8945a_write_reg(act8945a, IADDR_APCH_79, apch79.u8);
   \       0x98   0xE5DD'2000        LDRB     R2,[SP, #+0]
   \       0x9C   0xE1A0'5000        MOV      R5,R0
   \       0xA0   0xE3A0'1079        MOV      R1,#+121
   \       0xA4   0xE1A0'0004        MOV      R0,R4
   \       0xA8   0x....'....        BL       _act8945a_write_reg
   \       0xAC   0xE190'0005        ORRS     R0,R0,R5
   \       0xB0   0x0A00'0056        BEQ      ??act8945a_configure_apch_interrupt_1
   \       0xB4   0xE3A0'0001        MOV      R0,#+1
   \       0xB8   0xE8BD'8076        POP      {R1,R2,R4-R6,PC}
   \                     ??act8945a_configure_apch_interrupt_5:
   \       0xBC   0xE5DD'2001        LDRB     R2,[SP, #+1]
   \       0xC0   0xE1B0'0005        MOVS     R0,R5
   \       0xC4   0x13A0'0020        MOVNE    R0,#+32
   \       0xC8   0xE202'30DF        AND      R3,R2,#0xDF
   \       0xCC   0xE5DD'2000        LDRB     R2,[SP, #+0]
   \       0xD0   0xE180'0003        ORR      R0,R0,R3
   \       0xD4   0xE5CD'0001        STRB     R0,[SP, #+1]
   \       0xD8   0x13A0'0020        MOVNE    R0,#+32
   \       0xDC   0xE202'30DF        AND      R3,R2,#0xDF
   \       0xE0   0x03A0'0000        MOVEQ    R0,#+0
   \       0xE4   0xEAFF'FFE5        B        ??act8945a_configure_apch_interrupt_4
   \                     ??act8945a_configure_apch_interrupt_6:
   \       0xE8   0xE5DD'2001        LDRB     R2,[SP, #+1]
   \       0xEC   0xE1B0'0005        MOVS     R0,R5
   \       0xF0   0x13A0'0040        MOVNE    R0,#+64
   \       0xF4   0xE202'30BF        AND      R3,R2,#0xBF
   \       0xF8   0xE5DD'2000        LDRB     R2,[SP, #+0]
   \       0xFC   0xE180'0003        ORR      R0,R0,R3
   \      0x100   0xE5CD'0001        STRB     R0,[SP, #+1]
   \      0x104   0x13A0'0004        MOVNE    R0,#+4
   \      0x108   0xE202'30FB        AND      R3,R2,#0xFB
   \      0x10C   0x03A0'0000        MOVEQ    R0,#+0
   \      0x110   0xEAFF'FFDA        B        ??act8945a_configure_apch_interrupt_4
   \                     ??act8945a_configure_apch_interrupt_7:
   \      0x114   0xE5DD'2001        LDRB     R2,[SP, #+1]
   \      0x118   0xE1B0'0005        MOVS     R0,R5
   \      0x11C   0x13A0'0040        MOVNE    R0,#+64
   \      0x120   0xE202'30BF        AND      R3,R2,#0xBF
   \      0x124   0xE5DD'2000        LDRB     R2,[SP, #+0]
   \      0x128   0xE180'0003        ORR      R0,R0,R3
   \      0x12C   0xE5CD'0001        STRB     R0,[SP, #+1]
   \      0x130   0x13A0'0040        MOVNE    R0,#+64
   \      0x134   0xE202'30BF        AND      R3,R2,#0xBF
   \      0x138   0x03A0'0000        MOVEQ    R0,#+0
   \      0x13C   0xEAFF'FFCF        B        ??act8945a_configure_apch_interrupt_4
   \                     ??act8945a_configure_apch_interrupt_8:
   \      0x140   0xE5DD'2001        LDRB     R2,[SP, #+1]
   \      0x144   0xE1B0'0005        MOVS     R0,R5
   \      0x148   0x13A0'0010        MOVNE    R0,#+16
   \      0x14C   0xE202'30EF        AND      R3,R2,#0xEF
   \      0x150   0xE5DD'2000        LDRB     R2,[SP, #+0]
   \      0x154   0xE180'0003        ORR      R0,R0,R3
   \      0x158   0xE5CD'0001        STRB     R0,[SP, #+1]
   \      0x15C   0x13A0'0010        MOVNE    R0,#+16
   \      0x160   0xE202'30EF        AND      R3,R2,#0xEF
   \      0x164   0x03A0'0000        MOVEQ    R0,#+0
   \      0x168   0xEAFF'FFC4        B        ??act8945a_configure_apch_interrupt_4
   \                     ??act8945a_configure_apch_interrupt_9:
   \      0x16C   0xE5DD'2001        LDRB     R2,[SP, #+1]
   \      0x170   0xE1B0'0005        MOVS     R0,R5
   \      0x174   0x13A0'0010        MOVNE    R0,#+16
   \      0x178   0xE202'30EF        AND      R3,R2,#0xEF
   \      0x17C   0xE5DD'2000        LDRB     R2,[SP, #+0]
   \      0x180   0xE180'0003        ORR      R0,R0,R3
   \      0x184   0xE5CD'0001        STRB     R0,[SP, #+1]
   \      0x188   0x13A0'0001        MOVNE    R0,#+1
   \      0x18C   0xE202'30FE        AND      R3,R2,#0xFE
   \      0x190   0x03A0'0000        MOVEQ    R0,#+0
   \      0x194   0xEAFF'FFB9        B        ??act8945a_configure_apch_interrupt_4
   \                     ??act8945a_configure_apch_interrupt_10:
   \      0x198   0xE5DD'2001        LDRB     R2,[SP, #+1]
   \      0x19C   0xE1B0'0005        MOVS     R0,R5
   \      0x1A0   0x13A0'0080        MOVNE    R0,#+128
   \      0x1A4   0xE202'307F        AND      R3,R2,#0x7F
   \      0x1A8   0xE5DD'2000        LDRB     R2,[SP, #+0]
   \      0x1AC   0xE180'0003        ORR      R0,R0,R3
   \      0x1B0   0xE5CD'0001        STRB     R0,[SP, #+1]
   \      0x1B4   0x13A0'0008        MOVNE    R0,#+8
   \      0x1B8   0xE202'30F7        AND      R3,R2,#0xF7
   \      0x1BC   0x03A0'0000        MOVEQ    R0,#+0
   \      0x1C0   0xEAFF'FFAE        B        ??act8945a_configure_apch_interrupt_4
   \                     ??act8945a_configure_apch_interrupt_11:
   \      0x1C4   0xE5DD'2001        LDRB     R2,[SP, #+1]
   \      0x1C8   0xE1B0'0005        MOVS     R0,R5
   \      0x1CC   0x13A0'0080        MOVNE    R0,#+128
   \      0x1D0   0xE202'307F        AND      R3,R2,#0x7F
   \      0x1D4   0xE5DD'2000        LDRB     R2,[SP, #+0]
   \      0x1D8   0xE180'0003        ORR      R0,R0,R3
   \      0x1DC   0xE5CD'0001        STRB     R0,[SP, #+1]
   \      0x1E0   0x13A0'0080        MOVNE    R0,#+128
   \      0x1E4   0xE202'307F        AND      R3,R2,#0x7F
   \      0x1E8   0x03A0'0000        MOVEQ    R0,#+0
   \      0x1EC   0xEAFF'FFA3        B        ??act8945a_configure_apch_interrupt_4
   \                     ??act8945a_configure_apch_interrupt_2:
   \      0x1F0   0x....'....        LDR      LR,??DataTable48_6
   \      0x1F4   0xE59E'1000        LDR      R1,[LR, #+0]
   \      0x1F8   0xE351'0003        CMP      R1,#+3
   \      0x1FC   0x3A00'0002        BCC      ??act8945a_configure_apch_interrupt_12
   \      0x200   0xE1A0'1006        MOV      R1,R6
   \      0x204   0x....'....        LDR      R0,??DataTable52
   \      0x208   0x....'....        BL       printf
   \                     ??act8945a_configure_apch_interrupt_12:
   \      0x20C   0xE3A0'0000        MOV      R0,#+0
    552          	return status;
   \                     ??act8945a_configure_apch_interrupt_1:
   \      0x210   0xE8BD'8076        POP      {R1,R2,R4-R6,PC}  ;; return
    553          
    554          }
    555          
    556          // Disable all interrupt from APCH

   \                                 In section SOFTPACK, align 4, keep-with-next
    557          bool act8945a_disable_all_apch_interrupts(struct _act8945a *act8945a)
    558          {
   \                     act8945a_disable_all_apch_interrupts:
   \        0x0   0xE92D'4038        PUSH     {R3-R5,LR}
   \        0x4   0xE1A0'4000        MOV      R4,R0
    559          	return act8945a_configure_apch_interrupt(act8945a, CHARGE_STATE_OUT_EOC_STATE, false) &&
    560          		act8945a_configure_apch_interrupt(act8945a, INPUT_VOLTAGE_OUT_VALID_RANGE, false) &&
    561          		act8945a_configure_apch_interrupt(act8945a, BATTERY_TEMPERATURE_OUT_RANGE, false) &&
    562          		act8945a_configure_apch_interrupt(act8945a, PRECHARGE_TIME_OUT, false) &&
    563          		act8945a_configure_apch_interrupt(act8945a, CHARGE_STATE_INTO_EOC_STATE, false) &&
    564          		act8945a_configure_apch_interrupt(act8945a, INPUT_VOLTAGE_INTO_VALID_RANGE, false) &&
    565          		act8945a_configure_apch_interrupt(act8945a, BATTERY_TEMPERATURE_INTO_RANGE, false) &&
    566          		act8945a_configure_apch_interrupt(act8945a, TOTAL_CHARGE_TIME_OUT, false);
   \        0x8   0xE3A0'2000        MOV      R2,#+0
   \        0xC   0xE3A0'1000        MOV      R1,#+0
   \       0x10   0x....'....        BL       act8945a_configure_apch_interrupt
   \       0x14   0xE350'0000        CMP      R0,#+0
   \       0x18   0x0A00'006B        BEQ      ??act8945a_disable_all_apch_interrupts_0
   \       0x1C   0xE3A0'2000        MOV      R2,#+0
   \       0x20   0xE3A0'1001        MOV      R1,#+1
   \       0x24   0xE1A0'0004        MOV      R0,R4
   \       0x28   0x....'....        BL       act8945a_configure_apch_interrupt
   \       0x2C   0xE350'0000        CMP      R0,#+0
   \       0x30   0x0A00'0065        BEQ      ??act8945a_disable_all_apch_interrupts_0
   \       0x34   0xE3A0'2000        MOV      R2,#+0
   \       0x38   0xE3A0'1002        MOV      R1,#+2
   \       0x3C   0xE1A0'0004        MOV      R0,R4
   \       0x40   0x....'....        BL       act8945a_configure_apch_interrupt
   \       0x44   0xE350'0000        CMP      R0,#+0
   \       0x48   0x0A00'005F        BEQ      ??act8945a_disable_all_apch_interrupts_0
   \       0x4C   0xE3A0'2000        MOV      R2,#+0
   \       0x50   0xE3A0'1003        MOV      R1,#+3
   \       0x54   0xE1A0'0004        MOV      R0,R4
   \       0x58   0x....'....        BL       act8945a_configure_apch_interrupt
   \       0x5C   0xE350'0000        CMP      R0,#+0
   \       0x60   0x0A00'0059        BEQ      ??act8945a_disable_all_apch_interrupts_0
   \       0x64   0xE3A0'2000        MOV      R2,#+0
   \       0x68   0xE3A0'1004        MOV      R1,#+4
   \       0x6C   0xE1A0'0004        MOV      R0,R4
   \       0x70   0x....'....        BL       act8945a_configure_apch_interrupt
   \       0x74   0xE350'0000        CMP      R0,#+0
   \       0x78   0x0A00'0053        BEQ      ??act8945a_disable_all_apch_interrupts_0
   \       0x7C   0xE28D'2001        ADD      R2,SP,#+1
   \       0x80   0xE3A0'1078        MOV      R1,#+120
   \       0x84   0xE1A0'0004        MOV      R0,R4
   \       0x88   0x....'....        BL       _act8945a_read_reg
   \       0x8C   0xE350'0000        CMP      R0,#+0
   \       0x90   0x0A00'004D        BEQ      ??act8945a_disable_all_apch_interrupts_0
   \       0x94   0xE1A0'200D        MOV      R2,SP
   \       0x98   0xE3A0'1079        MOV      R1,#+121
   \       0x9C   0xE1A0'0004        MOV      R0,R4
   \       0xA0   0x....'....        BL       _act8945a_read_reg
   \       0xA4   0xE350'0000        CMP      R0,#+0
   \       0xA8   0x0A00'0047        BEQ      ??act8945a_disable_all_apch_interrupts_0
   \       0xAC   0xE5DD'E000        LDRB     LR,[SP, #+0]
   \       0xB0   0xE5DD'1001        LDRB     R1,[SP, #+1]
   \       0xB4   0xE20E'00DF        AND      R0,LR,#0xDF
   \       0xB8   0xE5CD'0000        STRB     R0,[SP, #+0]
   \       0xBC   0xE1A0'0004        MOV      R0,R4
   \       0xC0   0xE201'20DF        AND      R2,R1,#0xDF
   \       0xC4   0xE3A0'1078        MOV      R1,#+120
   \       0xC8   0xE5CD'2001        STRB     R2,[SP, #+1]
   \       0xCC   0x....'....        BL       _act8945a_write_reg
   \       0xD0   0xE5DD'2000        LDRB     R2,[SP, #+0]
   \       0xD4   0xE1A0'5000        MOV      R5,R0
   \       0xD8   0xE3A0'1079        MOV      R1,#+121
   \       0xDC   0xE1A0'0004        MOV      R0,R4
   \       0xE0   0x....'....        BL       _act8945a_write_reg
   \       0xE4   0xE190'0005        ORRS     R0,R0,R5
   \       0xE8   0x0A00'0037        BEQ      ??act8945a_disable_all_apch_interrupts_0
   \       0xEC   0xE28D'2001        ADD      R2,SP,#+1
   \       0xF0   0xE3A0'1078        MOV      R1,#+120
   \       0xF4   0xE1A0'0004        MOV      R0,R4
   \       0xF8   0x....'....        BL       _act8945a_read_reg
   \       0xFC   0xE350'0000        CMP      R0,#+0
   \      0x100   0x0A00'0031        BEQ      ??act8945a_disable_all_apch_interrupts_0
   \      0x104   0xE1A0'200D        MOV      R2,SP
   \      0x108   0xE3A0'1079        MOV      R1,#+121
   \      0x10C   0xE1A0'0004        MOV      R0,R4
   \      0x110   0x....'....        BL       _act8945a_read_reg
   \      0x114   0xE350'0000        CMP      R0,#+0
   \      0x118   0x0A00'002B        BEQ      ??act8945a_disable_all_apch_interrupts_0
   \      0x11C   0xE5DD'E000        LDRB     LR,[SP, #+0]
   \      0x120   0xE5DD'1001        LDRB     R1,[SP, #+1]
   \      0x124   0xE20E'00BF        AND      R0,LR,#0xBF
   \      0x128   0xE5CD'0000        STRB     R0,[SP, #+0]
   \      0x12C   0xE1A0'0004        MOV      R0,R4
   \      0x130   0xE201'20BF        AND      R2,R1,#0xBF
   \      0x134   0xE3A0'1078        MOV      R1,#+120
   \      0x138   0xE5CD'2001        STRB     R2,[SP, #+1]
   \      0x13C   0x....'....        BL       _act8945a_write_reg
   \      0x140   0xE5DD'2000        LDRB     R2,[SP, #+0]
   \      0x144   0xE1A0'5000        MOV      R5,R0
   \      0x148   0xE3A0'1079        MOV      R1,#+121
   \      0x14C   0xE1A0'0004        MOV      R0,R4
   \      0x150   0x....'....        BL       _act8945a_write_reg
   \      0x154   0xE190'0005        ORRS     R0,R0,R5
   \      0x158   0x0A00'001B        BEQ      ??act8945a_disable_all_apch_interrupts_0
   \      0x15C   0xE28D'2001        ADD      R2,SP,#+1
   \      0x160   0xE3A0'1078        MOV      R1,#+120
   \      0x164   0xE1A0'0004        MOV      R0,R4
   \      0x168   0x....'....        BL       _act8945a_read_reg
   \      0x16C   0xE350'0000        CMP      R0,#+0
   \      0x170   0x0A00'0015        BEQ      ??act8945a_disable_all_apch_interrupts_0
   \      0x174   0xE1A0'200D        MOV      R2,SP
   \      0x178   0xE3A0'1079        MOV      R1,#+121
   \      0x17C   0xE1A0'0004        MOV      R0,R4
   \      0x180   0x....'....        BL       _act8945a_read_reg
   \      0x184   0xE350'0000        CMP      R0,#+0
   \      0x188   0x0A00'000F        BEQ      ??act8945a_disable_all_apch_interrupts_0
   \      0x18C   0xE5DD'E000        LDRB     LR,[SP, #+0]
   \      0x190   0xE5DD'1001        LDRB     R1,[SP, #+1]
   \      0x194   0xE20E'007F        AND      R0,LR,#0x7F
   \      0x198   0xE5CD'0000        STRB     R0,[SP, #+0]
   \      0x19C   0xE1A0'0004        MOV      R0,R4
   \      0x1A0   0xE201'207F        AND      R2,R1,#0x7F
   \      0x1A4   0xE3A0'1078        MOV      R1,#+120
   \      0x1A8   0xE5CD'2001        STRB     R2,[SP, #+1]
   \      0x1AC   0x....'....        BL       _act8945a_write_reg
   \      0x1B0   0xE5DD'2000        LDRB     R2,[SP, #+0]
   \      0x1B4   0xE1A0'5000        MOV      R5,R0
   \      0x1B8   0xE3A0'1079        MOV      R1,#+121
   \      0x1BC   0xE1A0'0004        MOV      R0,R4
   \      0x1C0   0x....'....        BL       _act8945a_write_reg
   \      0x1C4   0xE190'0005        ORRS     R0,R0,R5
   \      0x1C8   0x13A0'0001        MOVNE    R0,#+1
   \                     ??act8945a_disable_all_apch_interrupts_0:
   \      0x1CC   0xE8BD'8032        POP      {R1,R4,R5,PC}    ;; return
    567          }
    568          

   \                                 In section SOFTPACK, align 4, keep-with-next
    569          extern bool act8945a_set_system_voltage_detect_threshold(struct _act8945a *act8945a,
    570          		uint16_t threshold)
    571          {
   \                     act8945a_set_system_voltage_detect_threshold:
   \        0x0   0xE92D'407C        PUSH     {R2-R6,LR}
    572          	union _sys0 sys0;
    573          
    574          	if (threshold < 2300 || threshold > 3800)
   \        0x4   0xE3E0'60FB        MVN      R6,#+251
   \        0x8   0xE1A0'4000        MOV      R4,R0
   \        0xC   0xE1A0'5001        MOV      R5,R1
   \       0x10   0xE3C6'6E80        BIC      R6,R6,#0x800
   \       0x14   0xE086'0005        ADD      R0,R6,R5
   \       0x18   0xE300'15DD        MOVW     R1,#+1501
   \       0x1C   0xE150'0001        CMP      R0,R1
   \       0x20   0x3A00'0000        BCC      ??act8945a_set_system_voltage_detect_threshold_0
    575          		return false;
   \       0x24   0x....'....        B        ?Subroutine0
    576          	if (!_act8945a_read_reg(act8945a, IADDR_SYS0, &sys0.u8))
   \                     ??act8945a_set_system_voltage_detect_threshold_0:
   \       0x28   0xE1A0'200D        MOV      R2,SP
   \       0x2C   0xE3A0'1000        MOV      R1,#+0
   \       0x30   0xE1A0'0004        MOV      R0,R4
   \       0x34   0x....'....        BL       _act8945a_read_reg
   \       0x38   0xE350'0000        CMP      R0,#+0
   \       0x3C   0x0A00'000B        BEQ      ??act8945a_set_system_voltage_detect_threshold_1
    577          		return false;
    578          	sys0.bits.syslev = (threshold - 2300) / 100;
   \       0x40   0xE086'0005        ADD      R0,R6,R5
   \       0x44   0x....'....        LDR      R1,??DataTable52_4  ;; 0x51eb851f
   \       0x48   0xE0C1'2190        SMULL    R2,R1,R0,R1
   \       0x4C   0xE5DD'C000        LDRB     R12,[SP, #+0]
    579          	return _act8945a_write_reg(act8945a, IADDR_SYS0, sys0.u8);
   \       0x50   0xE1A0'0004        MOV      R0,R4
   \       0x54   0xE1A0'12C1        ASR      R1,R1,#+5
   \       0x58   0xE081'1FA1        ADD      R1,R1,R1, LSR #+31
   \       0x5C   0xE7C3'C011        BFI      R12,R1,#+0,#+4
   \       0x60   0xE3A0'1000        MOV      R1,#+0
   \       0x64   0xE5CD'C000        STRB     R12,[SP, #+0]
   \       0x68   0xE1A0'200C        MOV      R2,R12
   \       0x6C   0x....'....        BL       _act8945a_write_reg
   \                     ??act8945a_set_system_voltage_detect_threshold_1:
   \       0x70   0xE8BD'8076        POP      {R1,R2,R4-R6,PC}  ;; return
    580          }

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ?Subroutine0:
   \        0x0   0xE3A0'0000        MOV      R0,#+0
   \        0x4   0xE8BD'8076        POP      {R1,R2,R4-R6,PC}
    581          

   \                                 In section SOFTPACK, align 4, keep-with-next
    582          bool act8945a_enable_system_voltage_level_interrupt(struct _act8945a *act8945a,
    583          		bool enable)
    584          {
   \                     act8945a_enable_system_voltage_level_interrupt:
   \        0x0   0xE92D'4038        PUSH     {R3-R5,LR}
   \        0x4   0xE1A0'5001        MOV      R5,R1
   \        0x8   0xE1A0'4000        MOV      R4,R0
    585          	union _sys0 sys0;
    586          
    587          	if (!_act8945a_read_reg(act8945a, IADDR_SYS0, &sys0.u8))
   \        0xC   0xE1A0'200D        MOV      R2,SP
   \       0x10   0xE3A0'1000        MOV      R1,#+0
   \       0x14   0x....'....        BL       _act8945a_read_reg
   \       0x18   0xE350'0000        CMP      R0,#+0
   \       0x1C   0x0A00'000B        BEQ      ??act8945a_enable_system_voltage_level_interrup_0
    588          		return false;
    589          	sys0.bits.nsyslevmsk = enable ? 1 : 0;
    590          
    591          	sys0.bits.nsysmode = 1; //*************
   \       0x20   0xE5DD'2000        LDRB     R2,[SP, #+0]
   \       0x24   0xE355'0000        CMP      R5,#+0
    592          
    593          	return _act8945a_write_reg(act8945a, IADDR_SYS0, sys0.u8);
   \       0x28   0xE3A0'1000        MOV      R1,#+0
   \       0x2C   0x13A0'0020        MOVNE    R0,#+32
   \       0x30   0x03A0'0000        MOVEQ    R0,#+0
   \       0x34   0xE202'30DF        AND      R3,R2,#0xDF
   \       0x38   0xE180'0003        ORR      R0,R0,R3
   \       0x3C   0xE380'C040        ORR      R12,R0,#0x40
   \       0x40   0xE1A0'0004        MOV      R0,R4
   \       0x44   0xE5CD'C000        STRB     R12,[SP, #+0]
   \       0x48   0xE5DD'2000        LDRB     R2,[SP, #+0]
   \       0x4C   0x....'....        BL       _act8945a_write_reg
   \                     ??act8945a_enable_system_voltage_level_interrup_0:
   \       0x50   0xE8BD'8032        POP      {R1,R4,R5,PC}    ;; return
    594          }
    595          

   \                                 In section SOFTPACK, align 4, keep-with-next
    596          bool act8945a_set_regulator_voltage(struct _act8945a *act8945a,
    597          		uint8_t reg, uint16_t vout)
    598          {
   \                     act8945a_set_regulator_voltage:
   \        0x0   0xE92D'4038        PUSH     {R3-R5,LR}
    599          	// minimum is 600mV
    600          	if (vout < 600) {
   \        0x4   0xE352'0F96        CMP      R2,#+600
   \        0x8   0xE1A0'4000        MOV      R4,R0
   \        0xC   0xE1A0'5001        MOV      R5,R1
   \       0x10   0xE1A0'0002        MOV      R0,R2
   \       0x14   0xAA00'0008        BGE      ??act8945a_set_regulator_voltage_0
    601          		trace_warning("Cannot set regulator %d voltage to %dmV, using 600mV instead\r\n", reg, vout);
   \       0x18   0x....'....        LDR      R0,??DataTable48_6
   \       0x1C   0xE590'1000        LDR      R1,[R0, #+0]
   \       0x20   0xE351'0002        CMP      R1,#+2
   \       0x24   0x9A00'0002        BLS      ??act8945a_set_regulator_voltage_1
   \       0x28   0xE1A0'1005        MOV      R1,R5
   \       0x2C   0x....'....        LDR      R0,??DataTable52_5
   \       0x30   0x....'....        BL       printf
    602          		vout = 600;
   \                     ??act8945a_set_regulator_voltage_1:
   \       0x34   0xE3A0'0F96        MOV      R0,#+600
   \       0x38   0xEA00'000A        B        ??act8945a_set_regulator_voltage_2
    603          	}
    604          	// maximum is 3900mV
    605          	if (vout > 3900) {
   \                     ??act8945a_set_regulator_voltage_0:
   \       0x3C   0xE300'1F3D        MOVW     R1,#+3901
   \       0x40   0xE152'0001        CMP      R2,R1
   \       0x44   0xBA00'0007        BLT      ??act8945a_set_regulator_voltage_2
    606          		trace_warning("Cannot set regulator %d voltage to %dmV, using 3900mV instead\r\n", reg, vout);
   \       0x48   0x....'....        LDR      R0,??DataTable48_6
   \       0x4C   0xE590'3000        LDR      R3,[R0, #+0]
   \       0x50   0xE353'0002        CMP      R3,#+2
   \       0x54   0x9A00'0002        BLS      ??act8945a_set_regulator_voltage_3
   \       0x58   0xE1A0'1005        MOV      R1,R5
   \       0x5C   0x....'....        LDR      R0,??DataTable52_6
   \       0x60   0x....'....        BL       printf
    607          		vout = 3900;
   \                     ??act8945a_set_regulator_voltage_3:
   \       0x64   0xE300'0F3C        MOVW     R0,#+3900
    608          	}
    609          
    610          	// can only set voltage for regulators 4 to 7
    611          	if (reg < 4 || reg > 7) {
   \                     ??act8945a_set_regulator_voltage_2:
   \       0x68   0xE245'1004        SUB      R1,R5,#+4
   \       0x6C   0xE351'0003        CMP      R1,#+3
   \       0x70   0x9A00'0008        BLS      ??act8945a_set_regulator_voltage_4
    612          		trace_error("Cannot change voltage of regulator %d\r\n", reg);
   \       0x74   0x....'....        LDR      R0,??DataTable48_6
   \       0x78   0xE590'2000        LDR      R2,[R0, #+0]
   \       0x7C   0xE352'0002        CMP      R2,#+2
   \       0x80   0x3A00'0002        BCC      ??act8945a_set_regulator_voltage_5
   \       0x84   0xE1A0'1005        MOV      R1,R5
   \       0x88   0x....'....        LDR      R0,??DataTable52_7
   \       0x8C   0x....'....        BL       printf
    613          		return false;
   \                     ??act8945a_set_regulator_voltage_5:
   \       0x90   0xE3A0'0000        MOV      R0,#+0
   \       0x94   0xE8BD'8032        POP      {R1,R4,R5,PC}
    614          	};
    615          
    616          	uint8_t value = 0;
    617          	if (vout < 1200) {
   \                     ??act8945a_set_regulator_voltage_4:
   \       0x98   0xE350'0E4B        CMP      R0,#+1200
   \       0x9C   0xE3A0'2000        MOV      R2,#+0
   \       0xA0   0xAA00'0007        BGE      ??act8945a_set_regulator_voltage_6
    618          		value = (vout - 600) / 25;
   \       0xA4   0xE3E0'1057        MVN      R1,#+87
   \       0xA8   0x....'....        LDR      R2,??DataTable52_4  ;; 0x51eb851f
   \       0xAC   0xE3C1'1F80        BIC      R1,R1,#0x200
   \       0xB0   0xE081'0000        ADD      R0,R1,R0
   \       0xB4   0xE0C2'3290        SMULL    R3,R2,R0,R2
   \       0xB8   0xE1A0'01C2        ASR      R0,R2,#+3
   \       0xBC   0xE080'0FA0        ADD      R0,R0,R0, LSR #+31
   \       0xC0   0xEA00'0015        B        ??act8945a_set_regulator_voltage_7
    619          	} else if (vout < 2400) {
   \                     ??act8945a_set_regulator_voltage_6:
   \       0xC4   0xE350'0E96        CMP      R0,#+2400
   \       0xC8   0xAA00'0008        BGE      ??act8945a_set_regulator_voltage_8
    620          		value = 0x18 + (vout - 1200) / 50;
   \       0xCC   0xE3E0'C0AF        MVN      R12,#+175
   \       0xD0   0xE3CC'CE40        BIC      R12,R12,#0x400
   \       0xD4   0xE08C'C000        ADD      R12,R12,R0
   \       0xD8   0x....'....        LDR      R0,??DataTable52_4  ;; 0x51eb851f
   \       0xDC   0xE0C0'109C        SMULL    R1,R0,R12,R0
   \       0xE0   0xE1A0'0240        ASR      R0,R0,#+4
   \       0xE4   0xE080'0FA0        ADD      R0,R0,R0, LSR #+31
   \       0xE8   0xE280'0018        ADD      R0,R0,#+24
   \       0xEC   0xEA00'000A        B        ??act8945a_set_regulator_voltage_7
    621          	} else if (vout <= 3900) {
   \                     ??act8945a_set_regulator_voltage_8:
   \       0xF0   0xE300'3F3D        MOVW     R3,#+3901
   \       0xF4   0xE150'0003        CMP      R0,R3
   \       0xF8   0xAA00'0008        BGE      ??act8945a_set_regulator_voltage_9
    622          		value = 0x30 + (vout - 2400) / 100;
   \       0xFC   0xE3E0'205F        MVN      R2,#+95
   \      0x100   0xE3C2'2E90        BIC      R2,R2,#0x900
   \      0x104   0xE082'2000        ADD      R2,R2,R0
   \      0x108   0x....'....        LDR      R0,??DataTable52_4  ;; 0x51eb851f
   \      0x10C   0xE0C0'1092        SMULL    R1,R0,R2,R0
   \      0x110   0xE1A0'02C0        ASR      R0,R0,#+5
   \      0x114   0xE080'0FA0        ADD      R0,R0,R0, LSR #+31
   \      0x118   0xE280'0030        ADD      R0,R0,#+48
   \                     ??act8945a_set_regulator_voltage_7:
   \      0x11C   0xE200'203F        AND      R2,R0,#0x3F
    623          	}
    624          
    625          	uint32_t iaddr = _iaddr_reg[reg - 1];
    626          	return _act8945a_write_reg(act8945a, iaddr, value & 0x3f);
   \                     ??act8945a_set_regulator_voltage_9:
   \      0x120   0x....'....        LDR      R3,??DataTable52_8
   \      0x124   0xE083'3005        ADD      R3,R3,R5
   \      0x128   0xE1A0'0004        MOV      R0,R4
   \      0x12C   0xE553'1001        LDRB     R1,[R3, #-1]
   \      0x130   0xE8BD'4038        POP      {R3-R5,LR}
   \      0x134   0x....'....        B        _act8945a_write_reg  ;; tailcall
    627          }
    628          

   \                                 In section SOFTPACK, align 4, keep-with-next
    629          bool act8945a_enable_regulator(struct _act8945a *act8945a,
    630          		uint8_t reg, bool enable)
    631          {
   \                     act8945a_enable_regulator:
   \        0x0   0xE92D'407C        PUSH     {R2-R6,LR}
   \        0x4   0xE1A0'4000        MOV      R4,R0
    632          	if (reg >= 1 && reg <= 3) {
   \        0x8   0xE1B0'0001        MOVS     R0,R1
   \        0xC   0xE1A0'5002        MOV      R5,R2
   \       0x10   0x0A00'001A        BEQ      ??act8945a_enable_regulator_0
   \       0x14   0xE350'0004        CMP      R0,#+4
   \       0x18   0xAA00'0018        BGE      ??act8945a_enable_regulator_0
    633          		union _ctrl1 ctrl1;
    634          		uint32_t iaddr = _iaddr_reg[reg - 1] + 2;
   \       0x1C   0x....'....        LDR      R1,??DataTable52_8
   \       0x20   0xE081'0000        ADD      R0,R1,R0
   \       0x24   0xE550'2001        LDRB     R2,[R0, #-1]
    635          
    636          		if (!_act8945a_read_reg(act8945a, iaddr, &ctrl1.u8))
   \       0x28   0xE1A0'0004        MOV      R0,R4
   \       0x2C   0xE282'6002        ADD      R6,R2,#+2
   \       0x30   0xE1A0'200D        MOV      R2,SP
   \       0x34   0xE6EF'1076        UXTB     R1,R6
   \       0x38   0x....'....        BL       _act8945a_read_reg
   \       0x3C   0xE350'0000        CMP      R0,#+0
   \       0x40   0x0A00'000D        BEQ      ??act8945a_enable_regulator_1
    637          			return false;
    638          
    639          		ctrl1.bits.on = enable ? 1 : 0;
   \       0x44   0xE5DD'2000        LDRB     R2,[SP, #+0]
   \       0x48   0xE355'0000        CMP      R5,#+0
    640          
    641          		if (!_act8945a_write_reg(act8945a, iaddr, ctrl1.u8))
   \       0x4C   0xE6EF'1076        UXTB     R1,R6
   \       0x50   0x13A0'0080        MOVNE    R0,#+128
   \       0x54   0x03A0'0000        MOVEQ    R0,#+0
   \       0x58   0xE202'307F        AND      R3,R2,#0x7F
   \       0x5C   0xE180'0003        ORR      R0,R0,R3
   \       0x60   0xE5CD'0000        STRB     R0,[SP, #+0]
   \       0x64   0xE5DD'2000        LDRB     R2,[SP, #+0]
   \       0x68   0xE1A0'0004        MOV      R0,R4
   \       0x6C   0x....'....        BL       _act8945a_write_reg
   \       0x70   0xE350'0000        CMP      R0,#+0
   \       0x74   0x0A00'0000        BEQ      ??act8945a_enable_regulator_1
    642          			return false;
    643          	} else if (reg >= 4 && reg <= 7) {
    644          		union _ctrl2 ctrl2;
    645          		uint32_t iaddr = _iaddr_reg[reg - 1] + 1;
    646          
    647          		if (!_act8945a_read_reg(act8945a, iaddr, &ctrl2.u8))
    648          			return false;
    649          
    650          		ctrl2.bits.on = enable ? 1 : 0;
    651          
    652          		if (!_act8945a_write_reg(act8945a, iaddr, ctrl2.u8))
    653          			return false;
    654          	} else {
    655          		trace_error("Invalid regulator number %d\r\n", reg);
    656          		return false;
    657          	}
    658          
    659          	return true;
   \                     ??act8945a_enable_regulator_2:
   \       0x78   0xE3A0'0001        MOV      R0,#+1
   \                     ??act8945a_enable_regulator_1:
   \       0x7C   0xE8BD'8076        POP      {R1,R2,R4-R6,PC}  ;; return
   \                     ??act8945a_enable_regulator_0:
   \       0x80   0xE240'0004        SUB      R0,R0,#+4
   \       0x84   0xE350'0004        CMP      R0,#+4
   \       0x88   0x2A00'0017        BCS      ??act8945a_enable_regulator_3
   \       0x8C   0x....'....        LDR      R2,??DataTable52_8
   \       0x90   0xE082'1001        ADD      R1,R2,R1
   \       0x94   0xE1A0'200D        MOV      R2,SP
   \       0x98   0xE1A0'0004        MOV      R0,R4
   \       0x9C   0xE551'3001        LDRB     R3,[R1, #-1]
   \       0xA0   0xE283'6001        ADD      R6,R3,#+1
   \       0xA4   0xE6EF'1076        UXTB     R1,R6
   \       0xA8   0x....'....        BL       _act8945a_read_reg
   \       0xAC   0xE350'0000        CMP      R0,#+0
   \       0xB0   0x0AFF'FFF1        BEQ      ??act8945a_enable_regulator_1
   \       0xB4   0xE5DD'2000        LDRB     R2,[SP, #+0]
   \       0xB8   0xE355'0000        CMP      R5,#+0
   \       0xBC   0xE6EF'1076        UXTB     R1,R6
   \       0xC0   0x13A0'0080        MOVNE    R0,#+128
   \       0xC4   0x03A0'0000        MOVEQ    R0,#+0
   \       0xC8   0xE202'307F        AND      R3,R2,#0x7F
   \       0xCC   0xE180'0003        ORR      R0,R0,R3
   \       0xD0   0xE5CD'0000        STRB     R0,[SP, #+0]
   \       0xD4   0xE5DD'2000        LDRB     R2,[SP, #+0]
   \       0xD8   0xE1A0'0004        MOV      R0,R4
   \       0xDC   0x....'....        BL       _act8945a_write_reg
   \       0xE0   0xE350'0000        CMP      R0,#+0
   \       0xE4   0x1AFF'FFE3        BNE      ??act8945a_enable_regulator_2
   \       0xE8   0xEA00'0005        B        ??act8945a_enable_regulator_4
   \                     ??act8945a_enable_regulator_3:
   \       0xEC   0x....'....        LDR      R0,??DataTable48_6
   \       0xF0   0xE590'2000        LDR      R2,[R0, #+0]
   \       0xF4   0xE352'0002        CMP      R2,#+2
   \       0xF8   0x3A00'0001        BCC      ??act8945a_enable_regulator_4
   \       0xFC   0x....'....        LDR      R0,??DataTable52_9
   \      0x100   0x....'....        BL       printf
   \                     ??act8945a_enable_regulator_4:
   \      0x104                      REQUIRE ?Subroutine0
   \      0x104                      ;; // Fall through to label ?Subroutine0
    660          }
    661          

   \                                 In section SOFTPACK, align 4, keep-with-next
    662          bool act8945a_enable_regulator_fault_interrupt(struct _act8945a *act8945a,
    663          		uint8_t reg, bool enable)
    664          {
   \                     act8945a_enable_regulator_fault_interrupt:
   \        0x0   0xE92D'407C        PUSH     {R2-R6,LR}
   \        0x4   0xE1A0'4000        MOV      R4,R0
    665          	if (reg >= 1 && reg <= 3) {
   \        0x8   0xE1B0'0001        MOVS     R0,R1
   \        0xC   0xE1A0'5002        MOV      R5,R2
   \       0x10   0x0A00'001A        BEQ      ??act8945a_enable_regulator_fault_interrupt_0
   \       0x14   0xE350'0004        CMP      R0,#+4
   \       0x18   0xAA00'0018        BGE      ??act8945a_enable_regulator_fault_interrupt_0
    666          		union _ctrl1 ctrl1;
    667          		uint8_t iaddr = (_iaddr_reg[reg-1]) + 2;
   \       0x1C   0x....'....        LDR      R1,??DataTable52_8
   \       0x20   0xE081'0000        ADD      R0,R1,R0
   \       0x24   0xE550'2001        LDRB     R2,[R0, #-1]
    668          
    669          
    670          		if (!_act8945a_read_reg(act8945a, iaddr, &ctrl1.u8))
   \       0x28   0xE1A0'0004        MOV      R0,R4
   \       0x2C   0xE282'6002        ADD      R6,R2,#+2
   \       0x30   0xE1A0'200D        MOV      R2,SP
   \       0x34   0xE6EF'1076        UXTB     R1,R6
   \       0x38   0x....'....        BL       _act8945a_read_reg
   \       0x3C   0xE350'0000        CMP      R0,#+0
   \       0x40   0x0A00'000D        BEQ      ??act8945a_enable_regulator_fault_interrupt_1
    671          			return false;
    672          
    673          		ctrl1.bits.nfltmsk = enable ? 1 : 0;
   \       0x44   0xE5DD'2000        LDRB     R2,[SP, #+0]
   \       0x48   0xE355'0000        CMP      R5,#+0
    674          
    675          		if (!_act8945a_write_reg(act8945a, iaddr, ctrl1.u8))
   \       0x4C   0xE6EF'1076        UXTB     R1,R6
   \       0x50   0x13A0'0002        MOVNE    R0,#+2
   \       0x54   0x03A0'0000        MOVEQ    R0,#+0
   \       0x58   0xE202'30FD        AND      R3,R2,#0xFD
   \       0x5C   0xE180'0003        ORR      R0,R0,R3
   \       0x60   0xE5CD'0000        STRB     R0,[SP, #+0]
   \       0x64   0xE5DD'2000        LDRB     R2,[SP, #+0]
   \       0x68   0xE1A0'0004        MOV      R0,R4
   \       0x6C   0x....'....        BL       _act8945a_write_reg
   \       0x70   0xE350'0000        CMP      R0,#+0
   \       0x74   0x0A00'0000        BEQ      ??act8945a_enable_regulator_fault_interrupt_1
    676          			return false;
    677          	} else if (reg >= 4 && reg <= 7) {
    678          		union _ctrl2 ctrl2;
    679          		uint8_t iaddr = (_iaddr_reg[reg-1]) + 1;
    680          
    681          		if (!_act8945a_read_reg(act8945a, iaddr, &ctrl2.u8))
    682          			return false;
    683          
    684          		ctrl2.bits.nfltmsk = enable ? 1 : 0;
    685          
    686          		if (!_act8945a_write_reg(act8945a, iaddr, ctrl2.u8))
    687          			return false;
    688          	} else {
    689          		trace_error("Invalid regulator number %d\r\n", reg);
    690          		return false;
    691          	}
    692          
    693          	return true;
   \                     ??act8945a_enable_regulator_fault_interrupt_2:
   \       0x78   0xE3A0'0001        MOV      R0,#+1
   \                     ??act8945a_enable_regulator_fault_interrupt_1:
   \       0x7C   0xE8BD'8076        POP      {R1,R2,R4-R6,PC}  ;; return
   \                     ??act8945a_enable_regulator_fault_interrupt_0:
   \       0x80   0xE240'0004        SUB      R0,R0,#+4
   \       0x84   0xE350'0004        CMP      R0,#+4
   \       0x88   0x2A00'0017        BCS      ??act8945a_enable_regulator_fault_interrupt_3
   \       0x8C   0x....'....        LDR      R2,??DataTable52_8
   \       0x90   0xE082'1001        ADD      R1,R2,R1
   \       0x94   0xE1A0'200D        MOV      R2,SP
   \       0x98   0xE1A0'0004        MOV      R0,R4
   \       0x9C   0xE551'3001        LDRB     R3,[R1, #-1]
   \       0xA0   0xE283'6001        ADD      R6,R3,#+1
   \       0xA4   0xE6EF'1076        UXTB     R1,R6
   \       0xA8   0x....'....        BL       _act8945a_read_reg
   \       0xAC   0xE350'0000        CMP      R0,#+0
   \       0xB0   0x0AFF'FFF1        BEQ      ??act8945a_enable_regulator_fault_interrupt_1
   \       0xB4   0xE5DD'2000        LDRB     R2,[SP, #+0]
   \       0xB8   0xE355'0000        CMP      R5,#+0
   \       0xBC   0xE6EF'1076        UXTB     R1,R6
   \       0xC0   0x13A0'0002        MOVNE    R0,#+2
   \       0xC4   0x03A0'0000        MOVEQ    R0,#+0
   \       0xC8   0xE202'30FD        AND      R3,R2,#0xFD
   \       0xCC   0xE180'0003        ORR      R0,R0,R3
   \       0xD0   0xE5CD'0000        STRB     R0,[SP, #+0]
   \       0xD4   0xE5DD'2000        LDRB     R2,[SP, #+0]
   \       0xD8   0xE1A0'0004        MOV      R0,R4
   \       0xDC   0x....'....        BL       _act8945a_write_reg
   \       0xE0   0xE350'0000        CMP      R0,#+0
   \       0xE4   0x1AFF'FFE3        BNE      ??act8945a_enable_regulator_fault_interrupt_2
   \       0xE8   0xEA00'0005        B        ??act8945a_enable_regulator_fault_interrupt_4
   \                     ??act8945a_enable_regulator_fault_interrupt_3:
   \       0xEC   0x....'....        LDR      R0,??DataTable48_6
   \       0xF0   0xE590'2000        LDR      R2,[R0, #+0]
   \       0xF4   0xE352'0002        CMP      R2,#+2
   \       0xF8   0x3A00'0001        BCC      ??act8945a_enable_regulator_fault_interrupt_4
   \       0xFC   0x....'....        LDR      R0,??DataTable52_9
   \      0x100   0x....'....        BL       printf
   \                     ??act8945a_enable_regulator_fault_interrupt_4:
   \      0x104   0x....'....        B        ?Subroutine0
    694          }
    695          

   \                                 In section SOFTPACK, align 4, keep-with-next
    696          extern bool act8945a_get_lbo_pin_state(struct _act8945a *act8945a)
    697          {
   \                     act8945a_get_lbo_pin_state:
   \        0x0   0xE92D'5000        PUSH     {R12,LR}
    698          	return pio_get(&act8945a->desc.pin_lbo) ? true : false;
   \        0x4   0xE280'0024        ADD      R0,R0,#+36
   \        0x8   0x....'....        BL       pio_get
   \        0xC   0xE350'0000        CMP      R0,#+0
   \       0x10   0x13A0'0001        MOVNE    R0,#+1
   \       0x14   0xE6EF'0070        UXTB     R0,R0
   \       0x18   0xE8BD'8002        POP      {R1,PC}          ;; return
    699          }
    700          
    701          
    702          

   \                                 In section SOFTPACK, align 4, keep-with-next
    703          extern void act8945a_display_voltage_settings(struct _act8945a *act8945a)
    704          {
   \                     act8945a_display_voltage_settings:
   \        0x0   0xE92D'4FF8        PUSH     {R3-R11,LR}
   \        0x4   0xE1A0'A000        MOV      R10,R0
    705          	int reg;
    706          
    707          	printf("\r\n-- ACT8945A - Voltage Settings & State --\r\n");
   \        0x8   0x....'....        LDR      R0,??DataTable52_10
   \        0xC   0xE3A0'B000        MOV      R11,#+0
   \       0x10   0x....'....        LDR      R4,??DataTable52_8
   \       0x14   0x....'....        ADR      R5,??DataTable48_2  ;; 0x65, 0x6E, 0x00, 0x00
   \       0x18   0x....'....        LDR      R6,??DataTable52_11
   \       0x1C   0x....'....        ADR      R7,??DataTable48_3  ;; " %s"
   \       0x20   0x....'....        ADR      R8,??DataTable48_4  ;; "off"
   \       0x24   0x....'....        ADR      R9,??DataTable48_5  ;; 0x6F, 0x6E, 0x00, 0x00
   \       0x28   0xED2D'8B02        VPUSH    {D8}
   \       0x2C   0xE24D'D008        SUB      SP,SP,#+8
   \       0x30   0x....'....        BL       printf
    708          
    709          	for (reg = 0; reg < NUM_REGULATORS; reg++)
   \       0x34   0xE58D'A004        STR      R10,[SP, #+4]
    710          	{
    711          		uint8_t iadd_reg, setting, ctrl;
    712          		uint16_t u;
    713          
    714          		/* Warning VSEL state */
    715          		iadd_reg = _iaddr_reg[reg];
   \                     ??act8945a_display_voltage_settings_0:
   \       0x38   0xE5D4'A000        LDRB     R10,[R4, #+0]
    716          		if( (iadd_reg < IADDR_REG4) && (STATE_VSEL == 1) )
    717          			iadd_reg ++;
    718          
    719          		if (!_act8945a_read_reg(act8945a, iadd_reg, &setting))
   \       0x3C   0xE59D'0004        LDR      R0,[SP, #+4]
   \       0x40   0xE28D'2001        ADD      R2,SP,#+1
   \       0x44   0xE35A'0050        CMP      R10,#+80
   \       0x48   0xB28A'A001        ADDLT    R10,R10,#+1
   \       0x4C   0xE6EF'107A        UXTB     R1,R10
   \       0x50   0x....'....        BL       _act8945a_read_reg
   \       0x54   0xE350'0000        CMP      R0,#+0
   \       0x58   0x0A00'0094        BEQ      ??act8945a_display_voltage_settings_1
    720          			return;
    721          
    722          		if (!_act8945a_read_reg(act8945a, iadd_reg + 1, &ctrl))
   \       0x5C   0xE59D'0004        LDR      R0,[SP, #+4]
   \       0x60   0xE28A'1001        ADD      R1,R10,#+1
   \       0x64   0xE1A0'200D        MOV      R2,SP
   \       0x68   0xE6EF'1071        UXTB     R1,R1
   \       0x6C   0x....'....        BL       _act8945a_read_reg
   \       0x70   0xE350'0000        CMP      R0,#+0
   \       0x74   0x0A00'008D        BEQ      ??act8945a_display_voltage_settings_1
    723          			return;
    724          
    725          		u = _act8945a_convert_voltage_setting(setting);
   \       0x78   0xE5DD'0001        LDRB     R0,[SP, #+1]
   \       0x7C   0xE200'1007        AND      R1,R0,#0x7
   \       0x80   0xEE00'1A10        VMOV     S0,R1
   \       0x84   0xEEB8'0B40        VCVT.F64.U32 D0,S0
   \       0x88   0xE350'0018        CMP      R0,#+24
   \       0x8C   0xE7E2'21D0        UBFX     R2,R0,#+3,#+3
   \       0x90   0xAA00'0037        BGE      ??act8945a_display_voltage_settings_2
   \       0x94   0xEE01'2A10        VMOV     S2,R2
   \       0x98   0xEEB8'1B41        VCVT.F64.U32 D1,S2
   \       0x9C   0x....'....        VLDR     D3,??DataTable49_3
   \       0xA0   0x....'....        VLDR     D5,??DataTable49_4
   \       0xA4   0xEE01'5B03        VMLA.F64 D5,D1,D3
   \       0xA8   0x....'....        VLDR     D6,??DataTable49_5
   \       0xAC   0x....'....        VLDR     D7,??DataTable49_15
   \       0xB0   0xEE00'5B06        VMLA.F64 D5,D0,D6
   \       0xB4   0xEE25'0B07        VMUL.F64 D0,D5,D7
   \                     ??act8945a_display_voltage_settings_3:
   \       0xB8   0xEEBD'0BC0        VCVT.S32.F64 S0,D0
    726          		printf(" - VOUT_%d (0x%02x) = %dmV", reg + 1, ctrl, u);
   \       0xBC   0xE5DD'2000        LDRB     R2,[SP, #+0]
   \       0xC0   0xEE10'3A10        VMOV     R3,S0
   \       0xC4   0xE28B'A001        ADD      R10,R11,#+1
   \       0xC8   0x....'....        LDR      R0,??DataTable52_12
   \       0xCC   0xE6FF'3073        UXTH     R3,R3
   \       0xD0   0xE1A0'100A        MOV      R1,R10
   \       0xD4   0x....'....        BL       printf
    727          		if (reg <= 3) {
   \       0xD8   0xE5DD'0000        LDRB     R0,[SP, #+0]
   \       0xDC   0xE35B'0004        CMP      R11,#+4
   \       0xE0   0xE1A0'03A0        LSR      R0,R0,#+7
   \       0xE4   0xAA00'003A        BGE      ??act8945a_display_voltage_settings_4
    728          			union _ctrl1 *ctrl1 = (union _ctrl1*)&ctrl;
    729          			printf(" %s", ctrl1->bits.on ? "on" : "off");
   \       0xE8   0xE350'0000        CMP      R0,#+0
   \       0xEC   0xE1A0'0007        MOV      R0,R7
   \       0xF0   0x11A0'1009        MOVNE    R1,R9
   \       0xF4   0x01A0'1008        MOVEQ    R1,R8
   \       0xF8   0x....'....        BL       printf
    730          			printf(" %s", ctrl1->bits.phase ? "180" : "osc");
   \       0xFC   0xE5DD'1000        LDRB     R1,[SP, #+0]
   \      0x100   0xE7E0'0351        UBFX     R0,R1,#+6,#+1
   \      0x104   0xE350'0000        CMP      R0,#+0
   \      0x108   0xE1A0'0007        MOV      R0,R7
   \      0x10C   0x....'....        ADRNE    R1,??DataTable49_6  ;; "180"
   \      0x110   0x....'....        ADREQ    R1,??DataTable49_7  ;; "osc"
   \      0x114   0x....'....        BL       printf
    731          			printf(" %s", ctrl1->bits.mode ? "pwm" : "pow-saving");
   \      0x118   0xE5DD'1000        LDRB     R1,[SP, #+0]
   \      0x11C   0xE7E0'02D1        UBFX     R0,R1,#+5,#+1
   \      0x120   0xE350'0000        CMP      R0,#+0
   \      0x124   0xE1A0'0007        MOV      R0,R7
   \      0x128   0x....'....        ADRNE    R1,??DataTable49_8  ;; "pwm"
   \      0x12C   0x....'....        LDREQ    R1,??DataTable52_13
   \      0x130   0x....'....        BL       printf
    732          			printf(" delay:0x%02x", ctrl1->bits.delay);
   \      0x134   0xE5DD'1000        LDRB     R1,[SP, #+0]
   \      0x138   0xE1A0'0006        MOV      R0,R6
   \      0x13C   0xE7E2'1151        UBFX     R1,R1,#+2,#+3
   \      0x140   0x....'....        BL       printf
    733          			printf(" %s", ctrl1->bits.nfltmsk ? "en" : "dis");
   \      0x144   0xE5DD'1000        LDRB     R1,[SP, #+0]
   \      0x148   0xE7E0'00D1        UBFX     R0,R1,#+1,#+1
   \      0x14C   0xE350'0000        CMP      R0,#+0
   \      0x150   0xE1A0'0007        MOV      R0,R7
   \      0x154   0x11A0'1005        MOVNE    R1,R5
   \      0x158   0x....'....        ADREQ    R1,??DataTable49_16  ;; "dis"
   \      0x15C   0x....'....        BL       printf
    734          			printf(" %s", ctrl1->bits.ok ? "OK" : "<tresh");
   \      0x160   0xE5DD'1000        LDRB     R1,[SP, #+0]
   \      0x164   0xE311'0001        TST      R1,#0x1
   \      0x168   0x....'....        ADRNE    R1,??DataTable49_17  ;; 0x4F, 0x4B, 0x00, 0x00
   \      0x16C   0x....'....        LDREQ    R1,??DataTable52_14
   \      0x170   0xEA00'0039        B        ??act8945a_display_voltage_settings_5
   \                     ??act8945a_display_voltage_settings_2:
   \      0x174   0xE350'0030        CMP      R0,#+48
   \      0x178   0xAA00'000A        BGE      ??act8945a_display_voltage_settings_6
   \      0x17C   0xE242'0003        SUB      R0,R2,#+3
   \      0x180   0x....'....        VLDR     D3,??DataTable49_9
   \      0x184   0xEE01'0A10        VMOV     S2,R0
   \      0x188   0xEEB8'1BC1        VCVT.F64.S32 D1,S2
   \      0x18C   0x....'....        VLDR     D5,??DataTable49_10
   \      0x190   0xEE01'5B03        VMLA.F64 D5,D1,D3
   \      0x194   0x....'....        VLDR     D7,??DataTable49_11
   \      0x198   0x....'....        VLDR     D8,??DataTable49_15
   \      0x19C   0xEE00'5B07        VMLA.F64 D5,D0,D7
   \      0x1A0   0xEE25'0B08        VMUL.F64 D0,D5,D8
   \      0x1A4   0xEAFF'FFC3        B        ??act8945a_display_voltage_settings_3
   \                     ??act8945a_display_voltage_settings_6:
   \      0x1A8   0xE242'0006        SUB      R0,R2,#+6
   \      0x1AC   0x....'....        VLDR     D3,??DataTable49_12
   \      0x1B0   0xEE01'0A10        VMOV     S2,R0
   \      0x1B4   0xEEB8'1BC1        VCVT.F64.S32 D1,S2
   \      0x1B8   0x....'....        VLDR     D5,??DataTable49_13
   \      0x1BC   0xEE01'5B03        VMLA.F64 D5,D1,D3
   \      0x1C0   0x....'....        VLDR     D7,??DataTable49_14
   \      0x1C4   0x....'....        VLDR     D8,??DataTable49_15
   \      0x1C8   0xEE00'5B07        VMLA.F64 D5,D0,D7
   \      0x1CC   0xEE25'0B08        VMUL.F64 D0,D5,D8
   \      0x1D0   0xEAFF'FFB8        B        ??act8945a_display_voltage_settings_3
    735          		} else {
    736          			union _ctrl2 *ctrl2 = (union _ctrl2*)&ctrl;
    737          			printf(" %s", ctrl2->bits.on ? "on": "off");
   \                     ??act8945a_display_voltage_settings_4:
   \      0x1D4   0xE350'0000        CMP      R0,#+0
   \      0x1D8   0xE1A0'0007        MOV      R0,R7
   \      0x1DC   0x11A0'1009        MOVNE    R1,R9
   \      0x1E0   0x01A0'1008        MOVEQ    R1,R8
   \      0x1E4   0x....'....        BL       printf
    738          			printf(" %s", ctrl2->bits.dis ? "off" : "on");
   \      0x1E8   0xE5DD'1000        LDRB     R1,[SP, #+0]
   \      0x1EC   0xE7E0'0351        UBFX     R0,R1,#+6,#+1
   \      0x1F0   0xE350'0000        CMP      R0,#+0
   \      0x1F4   0xE1A0'0007        MOV      R0,R7
   \      0x1F8   0x11A0'1008        MOVNE    R1,R8
   \      0x1FC   0x01A0'1009        MOVEQ    R1,R9
   \      0x200   0x....'....        BL       printf
    739          			printf(" %s", ctrl2->bits.lowiq ? "normal" : "low-power");
   \      0x204   0xE5DD'1000        LDRB     R1,[SP, #+0]
   \      0x208   0xE7E0'02D1        UBFX     R0,R1,#+5,#+1
   \      0x20C   0xE350'0000        CMP      R0,#+0
   \      0x210   0xE1A0'0007        MOV      R0,R7
   \      0x214   0x....'....        LDRNE    R1,??DataTable52_15
   \      0x218   0x....'....        LDREQ    R1,??DataTable52_16
   \      0x21C   0x....'....        BL       printf
    740          			printf(" delay:0x%02x", ctrl2->bits.delay);
   \      0x220   0xE5DD'1000        LDRB     R1,[SP, #+0]
   \      0x224   0xE1A0'0006        MOV      R0,R6
   \      0x228   0xE7E2'1151        UBFX     R1,R1,#+2,#+3
   \      0x22C   0x....'....        BL       printf
    741          			printf(" %s", ctrl2->bits.nfltmsk ? "en" : "dis");
   \      0x230   0xE5DD'1000        LDRB     R1,[SP, #+0]
   \      0x234   0xE7E0'00D1        UBFX     R0,R1,#+1,#+1
   \      0x238   0xE350'0000        CMP      R0,#+0
   \      0x23C   0xE1A0'0007        MOV      R0,R7
   \      0x240   0x11A0'1005        MOVNE    R1,R5
   \      0x244   0x....'....        ADREQ    R1,??DataTable49_16  ;; "dis"
   \      0x248   0x....'....        BL       printf
    742          			printf(" %s", ctrl2->bits.ok ? "OK" : "<tresh");
   \      0x24C   0xE5DD'1000        LDRB     R1,[SP, #+0]
   \      0x250   0xE311'0001        TST      R1,#0x1
   \      0x254   0x....'....        ADRNE    R1,??DataTable49_17  ;; 0x4F, 0x4B, 0x00, 0x00
   \      0x258   0x....'....        LDREQ    R1,??DataTable52_14
   \                     ??act8945a_display_voltage_settings_5:
   \      0x25C   0xE1A0'0007        MOV      R0,R7
   \      0x260   0xE1A0'B00A        MOV      R11,R10
   \      0x264   0x....'....        BL       printf
    743          		}
    744          		printf("\r\n");
   \      0x268   0x....'....        ADR      R0,??DataTable49_18  ;; 0x0D, 0x0A, 0x00, 0x00
   \      0x26C   0x....'....        BL       printf
   \      0x270   0xE35B'0007        CMP      R11,#+7
   \      0x274   0xE284'4001        ADD      R4,R4,#+1
   \      0x278   0xBAFF'FF6E        BLT      ??act8945a_display_voltage_settings_0
   \      0x27C   0xE59D'0004        LDR      R0,[SP, #+4]
    745          	}
    746          
    747          	union _sys0 sys0;
    748          	if (!_act8945a_read_reg(act8945a, IADDR_SYS0, &sys0.u8))
   \      0x280   0xE1A0'200D        MOV      R2,SP
   \      0x284   0xE3A0'1000        MOV      R1,#+0
   \      0x288   0x....'....        BL       _act8945a_read_reg
   \      0x28C   0xE350'0000        CMP      R0,#+0
   \      0x290   0x0A00'0006        BEQ      ??act8945a_display_voltage_settings_1
    749          		return;
    750          	printf(" - SYSLEV Failing Treshold (0x%02x) = %dmV\r\n", sys0.u8,
    751          			2300 + sys0.bits.syslev * 100);
   \      0x294   0xE5DD'1000        LDRB     R1,[SP, #+0]
   \      0x298   0xE3A0'3064        MOV      R3,#+100
   \      0x29C   0xE300'C8FC        MOVW     R12,#+2300
   \      0x2A0   0x....'....        LDR      R0,??DataTable52_17
   \      0x2A4   0xE201'200F        AND      R2,R1,#0xF
   \      0x2A8   0xE102'C283        SMLABB   R2,R3,R2,R12
   \      0x2AC   0x....'....        BL       printf
    752          }
   \                     ??act8945a_display_voltage_settings_1:
   \      0x2B0   0xE28D'D008        ADD      SP,SP,#+8
   \      0x2B4   0xECBD'8B02        VPOP     {D8}
   \      0x2B8   0xE8BD'8FF1        POP      {R0,R4-R11,PC}   ;; return
    753          

   \                                 In section SOFTPACK, align 4, keep-with-next
    754          void act8945a_dump_registers(struct _act8945a *act8945a)
    755          {
   \                     act8945a_dump_registers:
   \        0x0   0xE92D'4FF8        PUSH     {R3-R11,LR}
   \        0x4   0xE1A0'A000        MOV      R10,R0
    756          	uint8_t reg, data, mask, i;
    757          
    758          
    759          	printf("\r\n-- ACT8945A - Registers Dump --\r\n");
   \        0x8   0x....'....        LDR      R6,??DataTable52_18
   \        0xC   0xE286'00C0        ADD      R0,R6,#+192
   \       0x10   0xE3A0'B018        MOV      R11,#+24
   \       0x14   0x....'....        BL       printf
    760          	for (reg = 0; reg < ARRAY_SIZE(_regs); reg++) {
   \       0x18   0x....'....        ADR      R7,??DataTable49_18  ;; 0x0D, 0x0A, 0x00, 0x00
   \       0x1C   0x....'....        ADR      R8,??DataTable50_1  ;; 0x25, 0x78, 0x00, 0x00
   \       0x20   0x....'....        LDR      R9,??DataTable52_19
    761          		if (!_act8945a_read_reg(act8945a, _regs[reg].iaddr, &data))
   \                     ??act8945a_dump_registers_0:
   \       0x24   0xE5D6'1004        LDRB     R1,[R6, #+4]
   \       0x28   0xE1A0'200D        MOV      R2,SP
   \       0x2C   0xE1A0'000A        MOV      R0,R10
   \       0x30   0x....'....        BL       _act8945a_read_reg
   \       0x34   0xE350'0000        CMP      R0,#+0
   \       0x38   0x0A00'000A        BEQ      ??act8945a_dump_registers_1
    762          			return;
    763          		printf(" - %s: 0x%02X  b:", _regs[reg].name, data);
   \       0x3C   0xE5DD'2000        LDRB     R2,[SP, #+0]
   \       0x40   0xE596'1000        LDR      R1,[R6, #+0]
   \       0x44   0xE1A0'0009        MOV      R0,R9
   \       0x48   0xE3A0'4080        MOV      R4,#+128
   \       0x4C   0xE3A0'5008        MOV      R5,#+8
   \       0x50   0x....'....        BL       printf
    764          		mask = 0x80;
    765          		for (i=0; i<8; i++, mask>>=1) {
    766          			printf("%x", (data&mask) ? 1 : 0);
   \                     ??act8945a_dump_registers_2:
   \       0x54   0xE5DD'1000        LDRB     R1,[SP, #+0]
   \       0x58   0xE114'0001        TST      R4,R1
   \       0x5C   0x13A0'1001        MOVNE    R1,#+1
   \       0x60   0x03A0'1000        MOVEQ    R1,#+0
   \       0x64   0xEA00'0000        B        ??act8945a_dump_registers_3
    767          		}
   \                     ??act8945a_dump_registers_1:
   \       0x68   0xE8BD'8FF1        POP      {R0,R4-R11,PC}   ;; return
   \                     ??act8945a_dump_registers_3:
   \       0x6C   0xE1A0'0008        MOV      R0,R8
   \       0x70   0xE1A0'40A4        LSR      R4,R4,#+1
   \       0x74   0x....'....        BL       printf
   \       0x78   0xE255'5001        SUBS     R5,R5,#+1
   \       0x7C   0x1AFF'FFF4        BNE      ??act8945a_dump_registers_2
    768          		printf("\r\n");
   \       0x80   0xE1A0'0007        MOV      R0,R7
   \       0x84   0xE286'6008        ADD      R6,R6,#+8
   \       0x88   0x....'....        BL       printf
    769          	}
   \       0x8C   0xE25B'B001        SUBS     R11,R11,#+1
   \       0x90   0x1AFF'FFE3        BNE      ??act8945a_dump_registers_0
    770          	printf("\r\n");
   \       0x94   0xE1A0'0007        MOV      R0,R7
   \       0x98   0x....'....        BL       printf
    771          }
   \       0x9C   0xE8BD'8FF1        POP      {R0,R4-R11,PC}
    772          

   \                                 In section SOFTPACK, align 4, keep-with-next
    773          void act8945a_display_apch_registers(struct _act8945a *act8945a)
    774          {
   \                     act8945a_display_apch_registers:
   \        0x0   0xE92D'407C        PUSH     {R2-R6,LR}
   \        0x4   0xE1A0'4000        MOV      R4,R0
    775          	union _apch_71 apch71;
    776          	union _apch_78 apch78;
    777          	union _apch_79 apch79;
    778          	union _apch_7a apch7a;
    779          
    780          	printf("\r\n-- ACT8945A - APCH Registers --\r\n");
   \        0x8   0x....'....        LDR      R5,??DataTable52_20
   \        0xC   0xE1A0'0005        MOV      R0,R5
   \       0x10   0x....'....        BL       printf
    781          
    782          //	if (!_act8945a_read_reg(act8945a, IADDR_APCH_70, &data))
    783          //		return;
    784          //	printf(" - APCH @0x70: 0x%02x (reserved)\r\n", data);
    785          
    786          	if (!_act8945a_read_reg(act8945a, IADDR_APCH_71, &apch71.u8))
   \       0x14   0xE28D'2002        ADD      R2,SP,#+2
   \       0x18   0xE3A0'1071        MOV      R1,#+113
   \       0x1C   0xE1A0'0004        MOV      R0,R4
   \       0x20   0x....'....        BL       _act8945a_read_reg
   \       0x24   0xE350'0000        CMP      R0,#+0
   \       0x28   0x0A00'007C        BEQ      ??act8945a_display_apch_registers_0
    787          		return;
    788          	printf(" - APCH @0x71: 0x%02x\r\n", apch71.u8);
   \       0x2C   0xE5DD'1002        LDRB     R1,[SP, #+2]
   \       0x30   0x....'....        LDR      R0,??DataTable52_21
   \       0x34   0x....'....        LDR      R6,??DataTable52_22
   \       0x38   0x....'....        BL       printf
    789          	printf("     Charge Suspend Control Input:          %x\r\n",
    790          			apch71.bits.suschg);
   \       0x3C   0xE5DD'0002        LDRB     R0,[SP, #+2]
   \       0x40   0xE1A0'13A0        LSR      R1,R0,#+7
   \       0x44   0xE285'0024        ADD      R0,R5,#+36
   \       0x48   0x....'....        BL       printf
    791          	printf("     Total Charge Time-out Selection:       %x\r\n",
    792          			apch71.bits.tottimo);
   \       0x4C   0xE5DD'1002        LDRB     R1,[SP, #+2]
   \       0x50   0xE285'0058        ADD      R0,R5,#+88
   \       0x54   0xE7E1'1251        UBFX     R1,R1,#+4,#+2
   \       0x58   0x....'....        BL       printf
    793          	printf("     Precondition Charge Time-out Sel:      %x\r\n",
    794          			apch71.bits.pretimo);
   \       0x5C   0xE5DD'1002        LDRB     R1,[SP, #+2]
   \       0x60   0xE285'008C        ADD      R0,R5,#+140
   \       0x64   0xE7E1'1151        UBFX     R1,R1,#+2,#+2
   \       0x68   0x....'....        BL       printf
    795          	printf("     Input Over-Volt Prot.Threshold Sel:    %x (%s)\r\n",
    796          			apch71.bits.ovpset, _ovp_setting[apch71.bits.ovpset]);
   \       0x6C   0xE5DD'1002        LDRB     R1,[SP, #+2]
   \       0x70   0xE285'00C0        ADD      R0,R5,#+192
   \       0x74   0xE201'1003        AND      R1,R1,#0x3
   \       0x78   0xE086'2101        ADD      R2,R6,R1, LSL #+2
   \       0x7C   0xE592'2010        LDR      R2,[R2, #+16]
   \       0x80   0x....'....        BL       printf
    797          
    798          	if (!_act8945a_read_reg(act8945a, IADDR_APCH_78, &apch78.u8))
   \       0x84   0xE28D'2001        ADD      R2,SP,#+1
   \       0x88   0xE3A0'1078        MOV      R1,#+120
   \       0x8C   0xE1A0'0004        MOV      R0,R4
   \       0x90   0x....'....        BL       _act8945a_read_reg
   \       0x94   0xE350'0000        CMP      R0,#+0
   \       0x98   0x0A00'0060        BEQ      ??act8945a_display_apch_registers_0
    799          		return;
    800          	printf(" - APCH @0x78: 0x%02x\r\n", apch78.u8);
   \       0x9C   0xE5DD'1001        LDRB     R1,[SP, #+1]
   \       0xA0   0x....'....        LDR      R0,??DataTable52_23
   \       0xA4   0x....'....        BL       printf
    801          	printf("     Charge Time-out Interrupt Status:      %x\r\n",
    802          			apch78.bits.timrstat);
   \       0xA8   0xE5DD'0001        LDRB     R0,[SP, #+1]
   \       0xAC   0xE1A0'13A0        LSR      R1,R0,#+7
   \       0xB0   0xE285'00F8        ADD      R0,R5,#+248
   \       0xB4   0x....'....        BL       printf
    803          	printf("     Battery Temperature Interrupt Status:  %x\r\n",
    804          			apch78.bits.tempstat);
   \       0xB8   0xE5DD'1001        LDRB     R1,[SP, #+1]
   \       0xBC   0xE285'0F4B        ADD      R0,R5,#+300
   \       0xC0   0xE7E0'1351        UBFX     R1,R1,#+6,#+1
   \       0xC4   0x....'....        BL       printf
    805          	printf("     Input Voltage Interrupt Status:        %x\r\n",
    806          			apch78.bits.instat);
   \       0xC8   0xE5DD'1001        LDRB     R1,[SP, #+1]
   \       0xCC   0xE285'0F58        ADD      R0,R5,#+352
   \       0xD0   0xE7E0'12D1        UBFX     R1,R1,#+5,#+1
   \       0xD4   0x....'....        BL       printf
    807          	printf("     Charge State Interrupt Status:         %x\r\n",
    808          			apch78.bits.chgstat);
   \       0xD8   0xE5DD'1001        LDRB     R1,[SP, #+1]
   \       0xDC   0xE285'0F65        ADD      R0,R5,#+404
   \       0xE0   0xE7E0'1251        UBFX     R1,R1,#+4,#+1
   \       0xE4   0x....'....        BL       printf
    809          	printf("     Charge Timer Status                    %x\r\n",
    810          			apch78.bits.timrdat);
   \       0xE8   0xE5DD'1001        LDRB     R1,[SP, #+1]
   \       0xEC   0xE285'0F72        ADD      R0,R5,#+456
   \       0xF0   0xE7E0'11D1        UBFX     R1,R1,#+3,#+1
   \       0xF4   0x....'....        BL       printf
    811          	printf("     Temperature Status                     %x\r\n",
    812          			apch78.bits.tempdat);
   \       0xF8   0xE5DD'1001        LDRB     R1,[SP, #+1]
   \       0xFC   0xE285'0F7F        ADD      R0,R5,#+508
   \      0x100   0xE7E0'1151        UBFX     R1,R1,#+2,#+1
   \      0x104   0x....'....        BL       printf
    813          	printf("     Input Voltage Status                   %x\r\n",
    814          			apch78.bits.indat);
   \      0x108   0xE5DD'1001        LDRB     R1,[SP, #+1]
   \      0x10C   0xE285'0F8C        ADD      R0,R5,#+560
   \      0x110   0xE7E0'10D1        UBFX     R1,R1,#+1,#+1
   \      0x114   0x....'....        BL       printf
    815          	printf("     Charge State Machine Status            %x\r\n",
    816          			apch78.bits.chgdat);
   \      0x118   0xE5DD'1001        LDRB     R1,[SP, #+1]
   \      0x11C   0xE285'0F99        ADD      R0,R5,#+612
   \      0x120   0xE201'1001        AND      R1,R1,#0x1
   \      0x124   0x....'....        BL       printf
    817          
    818          	if (!_act8945a_read_reg(act8945a, IADDR_APCH_79, &apch79.u8))
   \      0x128   0xE1A0'200D        MOV      R2,SP
   \      0x12C   0xE3A0'1079        MOV      R1,#+121
   \      0x130   0xE1A0'0004        MOV      R0,R4
   \      0x134   0x....'....        BL       _act8945a_read_reg
   \      0x138   0xE350'0000        CMP      R0,#+0
   \      0x13C   0x0A00'0037        BEQ      ??act8945a_display_apch_registers_0
    819          		return;
    820          	printf(" - APCH @0x79: 0x%02x\r\n", apch79.u8);
   \      0x140   0xE5DD'1000        LDRB     R1,[SP, #+0]
   \      0x144   0x....'....        LDR      R0,??DataTable52_24
   \      0x148   0x....'....        BL       printf
    821          	printf("     Total Charge Time-out Int Control:     %x\r\n",
    822          			apch79.bits.timrtot);
   \      0x14C   0xE5DD'0000        LDRB     R0,[SP, #+0]
   \      0x150   0xE1A0'13A0        LSR      R1,R0,#+7
   \      0x154   0xE285'0FA6        ADD      R0,R5,#+664
   \      0x158   0x....'....        BL       printf
    823          	printf("     Batt.Temp.Int.Ctrl into valid range:   %x\r\n",
    824          			apch79.bits.tempin);
   \      0x15C   0xE5DD'1000        LDRB     R1,[SP, #+0]
   \      0x160   0xE285'0FB3        ADD      R0,R5,#+716
   \      0x164   0xE7E0'1351        UBFX     R1,R1,#+6,#+1
   \      0x168   0x....'....        BL       printf
    825          	printf("     Inp.Voltage Int.Ctrl into valid range: %x\r\n",
    826          			apch79.bits.incon);
   \      0x16C   0xE5DD'1000        LDRB     R1,[SP, #+0]
   \      0x170   0xE285'0FC0        ADD      R0,R5,#+768
   \      0x174   0xE7E0'12D1        UBFX     R1,R1,#+5,#+1
   \      0x178   0x....'....        BL       printf
    827          	printf("     Charge State Int Ctrl into EOC state:  %x\r\n",
    828          			apch79.bits.chgeocin);
   \      0x17C   0xE5DD'1000        LDRB     R1,[SP, #+0]
   \      0x180   0xE285'0FCD        ADD      R0,R5,#+820
   \      0x184   0xE7E0'1251        UBFX     R1,R1,#+4,#+1
   \      0x188   0x....'....        BL       printf
    829          	printf("     Precharge Time-out Int Ctrl:           %x\r\n",
    830          			apch79.bits.timrpre);
   \      0x18C   0xE5DD'1000        LDRB     R1,[SP, #+0]
   \      0x190   0xE285'0FDA        ADD      R0,R5,#+872
   \      0x194   0xE7E0'11D1        UBFX     R1,R1,#+3,#+1
   \      0x198   0x....'....        BL       printf
    831          	printf("     Batt.Temp.Int.Ctrl. out valid range:   %x\r\n",
    832          			apch79.bits.tempout);
   \      0x19C   0xE5DD'1000        LDRB     R1,[SP, #+0]
   \      0x1A0   0xE285'0FE7        ADD      R0,R5,#+924
   \      0x1A4   0xE7E0'1151        UBFX     R1,R1,#+2,#+1
   \      0x1A8   0x....'....        BL       printf
    833          	printf("     Inp.Voltage Int.Ctrl. out valid range: %x\r\n",
    834          			apch79.bits.indis);
   \      0x1AC   0xE5DD'1000        LDRB     R1,[SP, #+0]
   \      0x1B0   0xE285'0FF4        ADD      R0,R5,#+976
   \      0x1B4   0xE7E0'10D1        UBFX     R1,R1,#+1,#+1
   \      0x1B8   0x....'....        BL       printf
    835          	printf("     Charge State Int.Ctrl. out EOC state:  %x\r\n",
    836          			apch79.bits.chgeocout);
   \      0x1BC   0xE5DD'1000        LDRB     R1,[SP, #+0]
   \      0x1C0   0xE300'2404        MOVW     R2,#+1028
   \      0x1C4   0xE085'0002        ADD      R0,R5,R2
   \      0x1C8   0xE201'1001        AND      R1,R1,#0x1
   \      0x1CC   0x....'....        BL       printf
    837          
    838          	if (!_act8945a_read_reg(act8945a, IADDR_APCH_7A, &apch7a.u8))
   \      0x1D0   0xE28D'2003        ADD      R2,SP,#+3
   \      0x1D4   0xE3A0'107A        MOV      R1,#+122
   \      0x1D8   0xE1A0'0004        MOV      R0,R4
   \      0x1DC   0x....'....        BL       _act8945a_read_reg
   \      0x1E0   0xE350'0000        CMP      R0,#+0
   \      0x1E4   0x0A00'000D        BEQ      ??act8945a_display_apch_registers_0
    839          		return;
    840          	printf(" - APCH @0x7a: 0x%02x\r\n", apch7a.u8);
   \      0x1E8   0xE5DD'1003        LDRB     R1,[SP, #+3]
   \      0x1EC   0x....'....        LDR      R0,??DataTable52_25
   \      0x1F0   0x....'....        BL       printf
    841          	printf("     Charge State:                          %x (%s)\r\n",
    842          			apch7a.bits.cstate, _charging_states[apch7a.bits.cstate]);
   \      0x1F4   0xE5DD'1003        LDRB     R1,[SP, #+3]
   \      0x1F8   0xE300'3438        MOVW     R3,#+1080
   \      0x1FC   0xE7E1'0251        UBFX     R0,R1,#+4,#+2
   \      0x200   0xE7E1'1251        UBFX     R1,R1,#+4,#+2
   \      0x204   0xE796'2100        LDR      R2,[R6, +R0, LSL #+2]
   \      0x208   0xE085'0003        ADD      R0,R5,R3
   \      0x20C   0x....'....        BL       printf
    843          	printf("     ACIN Status:                           %x\r\n",
    844          			apch7a.bits.acinstat);
   \      0x210   0xE5DD'1003        LDRB     R1,[SP, #+3]
   \      0x214   0xE285'0E47        ADD      R0,R5,#+1136
   \      0x218   0xE7E0'10D1        UBFX     R1,R1,#+1,#+1
   \      0x21C   0x....'....        BL       printf
    845          }
   \                     ??act8945a_display_apch_registers_0:
   \      0x220   0xE8BD'8073        POP      {R0,R1,R4-R6,PC}  ;; return
    846          

   \                                 In section SOFTPACK, align 4, keep-with-next
    847          void act8945a_display_system_registers(struct _act8945a *act8945a)
    848          {
   \                     act8945a_display_system_registers:
   \        0x0   0xE92D'4038        PUSH     {R3-R5,LR}
   \        0x4   0xE1A0'5000        MOV      R5,R0
    849          	union _sys0 sys0;
    850          	union _sys1 sys1;
    851          
    852          	printf("\r\n-- ACT8945A - System Registers --\r\n");
   \        0x8   0x....'....        LDR      R4,??DataTable52_26
   \        0xC   0xE1A0'0004        MOV      R0,R4
   \       0x10   0x....'....        BL       printf
    853          
    854          	if (!_act8945a_read_reg(act8945a, IADDR_SYS0, &sys0.u8))
   \       0x14   0xE1A0'200D        MOV      R2,SP
   \       0x18   0xE3A0'1000        MOV      R1,#+0
   \       0x1C   0xE1A0'0005        MOV      R0,R5
   \       0x20   0x....'....        BL       _act8945a_read_reg
   \       0x24   0xE350'0000        CMP      R0,#+0
   \       0x28   0x0A00'0038        BEQ      ??act8945a_display_system_registers_0
    855          		return;
    856          	printf(" - SYS0 @0x00: 0x%02x\r\n", sys0.u8);
   \       0x2C   0xE5DD'1000        LDRB     R1,[SP, #+0]
   \       0x30   0x....'....        LDR      R0,??DataTable52_27
   \       0x34   0x....'....        BL       printf
    857          	printf("     Reset Timer Setting:                   %s\r\n",
    858          			sys0.bits.trst ? "64ms" : "260ms");
   \       0x38   0xE5DD'0000        LDRB     R0,[SP, #+0]
   \       0x3C   0xE1B0'23A0        LSRS     R2,R0,#+7
   \       0x40   0xE284'0028        ADD      R0,R4,#+40
   \       0x44   0x....'....        LDRNE    R1,??DataTable52_28
   \       0x48   0x....'....        LDREQ    R1,??DataTable52_29
   \       0x4C   0x....'....        BL       printf
    859          	printf("     SYSLEV Mode Select:                    %s\r\n",
    860          			sys0.bits.nsysmode ?"int" : "shutdown");
   \       0x50   0xE5DD'1000        LDRB     R1,[SP, #+0]
   \       0x54   0xE7E0'0351        UBFX     R0,R1,#+6,#+1
   \       0x58   0xE350'0000        CMP      R0,#+0
   \       0x5C   0xE284'005C        ADD      R0,R4,#+92
   \       0x60   0x....'....        ADRNE    R1,??DataTable52_1  ;; "int"
   \       0x64   0x....'....        LDREQ    R1,??DataTable52_30
   \       0x68   0x....'....        BL       printf
    861          	printf("     System Voltage Level Int.Mask:         %s\r\n",
    862          			sys0.bits.nsyslevmsk ?"int" : "noint");
   \       0x6C   0xE5DD'1000        LDRB     R1,[SP, #+0]
   \       0x70   0xE7E0'02D1        UBFX     R0,R1,#+5,#+1
   \       0x74   0xE350'0000        CMP      R0,#+0
   \       0x78   0xE284'0090        ADD      R0,R4,#+144
   \       0x7C   0x....'....        ADRNE    R1,??DataTable52_1  ;; "int"
   \       0x80   0x....'....        LDREQ    R1,??DataTable52_31
   \       0x84   0x....'....        BL       printf
    863          	printf("     System Voltage Status:                 %s\r\n",
    864          			sys0.bits.nsysstat ? "vsys<syslev" : "vsys>syslev");
   \       0x88   0xE5DD'1000        LDRB     R1,[SP, #+0]
   \       0x8C   0xE7E0'0251        UBFX     R0,R1,#+4,#+1
   \       0x90   0xE350'0000        CMP      R0,#+0
   \       0x94   0xE284'00C4        ADD      R0,R4,#+196
   \       0x98   0x....'....        LDRNE    R1,??DataTable52_32
   \       0x9C   0x....'....        LDREQ    R1,??DataTable52_33
   \       0xA0   0x....'....        BL       printf
    865          	printf("     SYSLEV Failing Treshold value:         %dmV\r\n",
    866          			2300 + sys0.bits.syslev * 100);
   \       0xA4   0xE5DD'1000        LDRB     R1,[SP, #+0]
   \       0xA8   0xE3A0'3064        MOV      R3,#+100
   \       0xAC   0xE300'C8FC        MOVW     R12,#+2300
   \       0xB0   0xE284'00F8        ADD      R0,R4,#+248
   \       0xB4   0xE201'200F        AND      R2,R1,#0xF
   \       0xB8   0xE101'C283        SMLABB   R1,R3,R2,R12
   \       0xBC   0x....'....        BL       printf
    867          
    868          	if (!_act8945a_read_reg(act8945a, IADDR_SYS1, &sys1.u8))
   \       0xC0   0xE28D'2001        ADD      R2,SP,#+1
   \       0xC4   0xE3A0'1001        MOV      R1,#+1
   \       0xC8   0xE1A0'0005        MOV      R0,R5
   \       0xCC   0x....'....        BL       _act8945a_read_reg
   \       0xD0   0xE350'0000        CMP      R0,#+0
   \       0xD4   0x0A00'000D        BEQ      ??act8945a_display_system_registers_0
    869          		return;
    870          	printf(" - SYS1 @0x01: 0x%02x\r\n", sys1.u8);
   \       0xD8   0xE5DD'1001        LDRB     R1,[SP, #+1]
   \       0xDC   0x....'....        ADR      R0,?_109
   \       0xE0   0x....'....        BL       printf
    871          	printf("     Master Off Ctrl, All regul:            %s\r\n",
    872          			sys1.bits.mstroff ? "off" : "on");
   \       0xE4   0xE5DD'1001        LDRB     R1,[SP, #+1]
   \       0xE8   0xE7E0'02D1        UBFX     R0,R1,#+5,#+1
   \       0xEC   0xE350'0000        CMP      R0,#+0
   \       0xF0   0xE284'0F4B        ADD      R0,R4,#+300
   \       0xF4   0x....'....        ADRNE    R1,??DataTable52_2  ;; "off"
   \       0xF8   0x....'....        ADREQ    R1,??DataTable52_3  ;; 0x6F, 0x6E, 0x00, 0x00
   \       0xFC   0x....'....        BL       printf
    873          	printf("     Scratchpad Bits, free user:            %x\r\n",
    874          			sys1.bits.scratch);
   \      0x100   0xE5DD'1001        LDRB     R1,[SP, #+1]
   \      0x104   0xE284'0F58        ADD      R0,R4,#+352
   \      0x108   0xE201'100F        AND      R1,R1,#0xF
   \      0x10C   0x....'....        BL       printf
    875          }
   \                     ??act8945a_display_system_registers_0:
   \      0x110   0xE8BD'8031        POP      {R0,R4,R5,PC}    ;; return
    876          

   \                                 In section SOFTPACK, align 4, keep-with-next
    877          void act8945a_display_charge_state(struct _act8945a *act8945a)
    878          {
   \                     act8945a_display_charge_state:
   \        0x0   0xE92D'401C        PUSH     {R2-R4,LR}
   \        0x4   0xE1A0'4000        MOV      R4,R0
    879          	union _apch_7a apch7a;
    880          	if (!_act8945a_read_reg(act8945a, IADDR_APCH_7A, &apch7a.u8)) return;
   \        0x8   0xE1A0'200D        MOV      R2,SP
   \        0xC   0xE3A0'107A        MOV      R1,#+122
   \       0x10   0x....'....        BL       _act8945a_read_reg
   \       0x14   0xE350'0000        CMP      R0,#+0
   \       0x18   0x0A00'000C        BEQ      ??act8945a_display_charge_state_0
    881          
    882          	if (act8945a->apch7a != apch7a.u8) {
   \       0x1C   0xE5D4'0037        LDRB     R0,[R4, #+55]
   \       0x20   0xE5DD'2000        LDRB     R2,[SP, #+0]
   \       0x24   0xE150'0002        CMP      R0,R2
   \       0x28   0x0A00'0008        BEQ      ??act8945a_display_charge_state_0
    883          		printf(" Charge State: %x (%s)\r\n", apch7a.bits.cstate,
    884          				_charging_states[apch7a.bits.cstate]);
   \       0x2C   0xE1A0'1002        MOV      R1,R2
   \       0x30   0x....'....        LDR      R3,??DataTable52_22
   \       0x34   0xE7E1'0251        UBFX     R0,R1,#+4,#+2
   \       0x38   0xE7E1'1251        UBFX     R1,R1,#+4,#+2
   \       0x3C   0xE793'2100        LDR      R2,[R3, +R0, LSL #+2]
   \       0x40   0x....'....        ADR      R0,?_110
   \       0x44   0x....'....        BL       printf
    885          		act8945a->apch7a = apch7a.u8;
   \       0x48   0xE5DD'1000        LDRB     R1,[SP, #+0]
   \       0x4C   0xE5C4'1037        STRB     R1,[R4, #+55]
    886          	}
    887          }
   \                     ??act8945a_display_charge_state_0:
   \       0x50   0xE8BD'8013        POP      {R0,R1,R4,PC}    ;; return

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable48:
   \        0x0   0x....'....        DC32     ?_111

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable48_1:
   \        0x0   0x....'....        DC32     ?_112

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable48_2:
   \        0x0   0x65 0x6E          DC8      0x65, 0x6E, 0x00, 0x00

   \              0x00 0x00

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable48_3:
   \        0x0   0x20 0x25          DC8      " %s"

   \              0x73 0x00

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable48_4:
   \        0x0   0x6F 0x66          DC8      "off"

   \              0x66 0x00

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable48_5:
   \        0x0   0x6F 0x6E          DC8      0x6F, 0x6E, 0x00, 0x00

   \              0x00 0x00

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable48_6:
   \        0x0   0x....'....        DC32     trace_level

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable48_7:
   \        0x0   0x....'....        DC32     ?_32

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable48_8:
   \        0x0   0x....'....        DC32     ?_32+0x70

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable48_9:
   \        0x0   0x....'....        DC32     ?_77

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable49:
   \        0x0   0x....'....        DC32     _charging_states

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable49_1:
   \        0x0   0x....'....        DC32     ?_36+0x6C

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable49_2:
   \        0x0   0x....'....        DC32     ?_36

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable49_3:
   \        0x0   0x9999'999A        DC32     0x9999999A,0x3FC99999

   \              0x3FC9'9999

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable49_4:
   \        0x0   0x3333'3333        DC32     0x33333333,0x3FE33333

   \              0x3FE3'3333

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable49_5:
   \        0x0   0x9999'999A        DC32     0x9999999A,0x3F999999

   \              0x3F99'9999

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable49_6:
   \        0x0   0x31 0x38          DC8      "180"

   \              0x30 0x00

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable49_7:
   \        0x0   0x6F 0x73          DC8      "osc"

   \              0x63 0x00

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable49_8:
   \        0x0   0x70 0x77          DC8      "pwm"

   \              0x6D 0x00

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable49_9:
   \        0x0   0x9999'999A        DC32     0x9999999A,0x3FD99999

   \              0x3FD9'9999

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable49_10:
   \        0x0   0x3333'3333        DC32     0x33333333,0x3FF33333

   \              0x3FF3'3333

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable49_11:
   \        0x0   0x9999'999A        DC32     0x9999999A,0x3FA99999

   \              0x3FA9'9999

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable49_12:
   \        0x0   0x9999'999A        DC32     0x9999999A,0x3FE99999

   \              0x3FE9'9999

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable49_13:
   \        0x0   0x3333'3333        DC32     0x33333333,0x40033333

   \              0x4003'3333

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable49_14:
   \        0x0   0x9999'999A        DC32     0x9999999A,0x3FB99999

   \              0x3FB9'9999

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable49_15:
   \        0x0   0x0000'0000        DC32     0x0,0x408F4000

   \              0x408F'4000

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable49_16:
   \        0x0   0x64 0x69          DC8      "dis"

   \              0x73 0x00

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable49_17:
   \        0x0   0x4F 0x4B          DC8      0x4F, 0x4B, 0x00, 0x00

   \              0x00 0x00

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable49_18:
   \        0x0   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00

   \              0x00 0x00

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable49_19:
   \        0x0   0x....'....        DC32     ?_32+0xFC

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable49_20:
   \        0x0   0x....'....        DC32     ?_35

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable50:
   \        0x0   0x....'....        DC32     _act8945a_irq_handler

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable50_1:
   \        0x0   0x25 0x78          DC8      0x25, 0x78, 0x00, 0x00

   \              0x00 0x00

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable51:
   \        0x0   0x....'....        DC32     ?_36+0xD8

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable52:
   \        0x0   0x....'....        DC32     ?_78

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable52_1:
   \        0x0   0x69 0x6E          DC8      "int"

   \              0x74 0x00

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable52_2:
   \        0x0   0x6F 0x66          DC8      "off"

   \              0x66 0x00

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable52_3:
   \        0x0   0x6F 0x6E          DC8      0x6F, 0x6E, 0x00, 0x00

   \              0x00 0x00

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable52_4:
   \        0x0   0x51EB'851F        DC32     0x51eb851f

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable52_5:
   \        0x0   0x....'....        DC32     ?_39

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable52_6:
   \        0x0   0x....'....        DC32     ?_39+0x44

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable52_7:
   \        0x0   0x....'....        DC32     ?_39+0x88

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable52_8:
   \        0x0   0x....'....        DC32     _iaddr_reg

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable52_9:
   \        0x0   0x....'....        DC32     ?_42

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable52_10:
   \        0x0   0x....'....        DC32     ?_43

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable52_11:
   \        0x0   0x....'....        DC32     ?_87

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable52_12:
   \        0x0   0x....'....        DC32     ?_79

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable52_13:
   \        0x0   0x....'....        DC32     ?_86

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable52_14:
   \        0x0   0x....'....        DC32     ?_91

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable52_15:
   \        0x0   0x....'....        DC32     ?_92

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable52_16:
   \        0x0   0x....'....        DC32     ?_93

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable52_17:
   \        0x0   0x....'....        DC32     ?_43+0x30

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable52_18:
   \        0x0   0x....'....        DC32     _regs

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable52_19:
   \        0x0   0x....'....        DC32     ?_95

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable52_20:
   \        0x0   0x....'....        DC32     ?_46

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable52_21:
   \        0x0   0x....'....        DC32     ?_97

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable52_22:
   \        0x0   0x....'....        DC32     _charging_states

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable52_23:
   \        0x0   0x....'....        DC32     ?_98

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable52_24:
   \        0x0   0x....'....        DC32     ?_99

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable52_25:
   \        0x0   0x....'....        DC32     ?_100

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable52_26:
   \        0x0   0x....'....        DC32     ?_69

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable52_27:
   \        0x0   0x....'....        DC32     ?_101

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable52_28:
   \        0x0   0x....'....        DC32     ?_102

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable52_29:
   \        0x0   0x....'....        DC32     ?_103

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable52_30:
   \        0x0   0x....'....        DC32     ?_105

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable52_31:
   \        0x0   0x....'....        DC32     ?_106

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable52_32:
   \        0x0   0x....'....        DC32     ?_107

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable52_33:
   \        0x0   0x....'....        DC32     ?_108

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ?_109:
   \        0x0   0x20 0x2D          DC8 " - SYS1 @0x01: 0x%02x\015\012"

   \              0x20 0x53    

   \              0x59 0x53    

   \              0x31 0x20    

   \              0x40 0x30    

   \              0x78 0x30    

   \              0x31 0x3A    

   \              0x20 0x30    

   \              0x78 0x25    

   \              0x30 0x32    

   \              0x78 0x0D    

   \              0x0A 0x00

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ?_110:
   \        0x0   0x20 0x43          DC8 " Charge State: %x (%s)\015\012"

   \              0x68 0x61    

   \              0x72 0x67    

   \              0x65 0x20    

   \              0x53 0x74    

   \              0x61 0x74    

   \              0x65 0x3A    

   \              0x20 0x25    

   \              0x78 0x20    

   \              0x28 0x25    

   \              0x73 0x29    

   \              0x0D 0x0A    

   \              0x00
   \       0x19   0x00 0x00          DC8 0, 0, 0

   \              0x00

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x53 0x75          DC8 "Suspend/Disable/Fault"

   \              0x73 0x70    

   \              0x65 0x6E    

   \              0x64 0x2F    

   \              0x44 0x69    

   \              0x73 0x61    

   \              0x62 0x6C    

   \              0x65 0x2F    

   \              0x46 0x61    

   \              0x75 0x6C    

   \              0x74 0x00
   \       0x16   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x45 0x6E          DC8 "End of charge"

   \              0x64 0x20    

   \              0x6F 0x66    

   \              0x20 0x63    

   \              0x68 0x61    

   \              0x72 0x67    

   \              0x65 0x00
   \        0xE   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x46 0x61          DC8 "Fast charge/Top-off"

   \              0x73 0x74    

   \              0x20 0x63    

   \              0x68 0x61    

   \              0x72 0x67    

   \              0x65 0x2F    

   \              0x54 0x6F    

   \              0x70 0x2D    

   \              0x6F 0x66    

   \              0x66 0x00

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x50 0x72          DC8 "Precondition"

   \              0x65 0x63    

   \              0x6F 0x6E    

   \              0x64 0x69    

   \              0x74 0x69    

   \              0x6F 0x6E    

   \              0x00
   \        0xD   0x00 0x00          DC8 0, 0, 0

   \              0x00

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x53 0x59          DC8 "SYS0   "

   \              0x53 0x30    

   \              0x20 0x20    

   \              0x20 0x00

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x53 0x59          DC8 "SYS1   "

   \              0x53 0x31    

   \              0x20 0x20    

   \              0x20 0x00

   \                                 In section .rodata, align 4
   \                     ?_6:
   \        0x0   0x52 0x45          DC8 "REG1_20"

   \              0x47 0x31    

   \              0x5F 0x32    

   \              0x30 0x00

   \                                 In section .rodata, align 4
   \                     ?_7:
   \        0x0   0x52 0x45          DC8 "REG1_21"

   \              0x47 0x31    

   \              0x5F 0x32    

   \              0x31 0x00

   \                                 In section .rodata, align 4
   \                     ?_8:
   \        0x0   0x52 0x45          DC8 "REG1_22"

   \              0x47 0x31    

   \              0x5F 0x32    

   \              0x32 0x00

   \                                 In section .rodata, align 4
   \                     ?_9:
   \        0x0   0x52 0x45          DC8 "REG2_30"

   \              0x47 0x32    

   \              0x5F 0x33    

   \              0x30 0x00

   \                                 In section .rodata, align 4
   \                     ?_10:
   \        0x0   0x52 0x45          DC8 "REG2_31"

   \              0x47 0x32    

   \              0x5F 0x33    

   \              0x31 0x00

   \                                 In section .rodata, align 4
   \                     ?_11:
   \        0x0   0x52 0x45          DC8 "REG2_32"

   \              0x47 0x32    

   \              0x5F 0x33    

   \              0x32 0x00

   \                                 In section .rodata, align 4
   \                     ?_12:
   \        0x0   0x52 0x45          DC8 "REG3_40"

   \              0x47 0x33    

   \              0x5F 0x34    

   \              0x30 0x00

   \                                 In section .rodata, align 4
   \                     ?_13:
   \        0x0   0x52 0x45          DC8 "REG3_41"

   \              0x47 0x33    

   \              0x5F 0x34    

   \              0x31 0x00

   \                                 In section .rodata, align 4
   \                     ?_14:
   \        0x0   0x52 0x45          DC8 "REG3_42"

   \              0x47 0x33    

   \              0x5F 0x34    

   \              0x32 0x00

   \                                 In section .rodata, align 4
   \                     ?_15:
   \        0x0   0x52 0x45          DC8 "REG4_50"

   \              0x47 0x34    

   \              0x5F 0x35    

   \              0x30 0x00

   \                                 In section .rodata, align 4
   \                     ?_16:
   \        0x0   0x52 0x45          DC8 "REG4_51"

   \              0x47 0x34    

   \              0x5F 0x35    

   \              0x31 0x00

   \                                 In section .rodata, align 4
   \                     ?_17:
   \        0x0   0x52 0x45          DC8 "REG5_54"

   \              0x47 0x35    

   \              0x5F 0x35    

   \              0x34 0x00

   \                                 In section .rodata, align 4
   \                     ?_18:
   \        0x0   0x52 0x45          DC8 "REG5_55"

   \              0x47 0x35    

   \              0x5F 0x35    

   \              0x35 0x00

   \                                 In section .rodata, align 4
   \                     ?_19:
   \        0x0   0x52 0x45          DC8 "REG6_60"

   \              0x47 0x36    

   \              0x5F 0x36    

   \              0x30 0x00

   \                                 In section .rodata, align 4
   \                     ?_20:
   \        0x0   0x52 0x45          DC8 "REG6_61"

   \              0x47 0x36    

   \              0x5F 0x36    

   \              0x31 0x00

   \                                 In section .rodata, align 4
   \                     ?_21:
   \        0x0   0x52 0x45          DC8 "REG7_64"

   \              0x47 0x37    

   \              0x5F 0x36    

   \              0x34 0x00

   \                                 In section .rodata, align 4
   \                     ?_22:
   \        0x0   0x52 0x45          DC8 "REG7_65"

   \              0x47 0x37    

   \              0x5F 0x36    

   \              0x35 0x00

   \                                 In section .rodata, align 4
   \                     ?_23:
   \        0x0   0x41 0x50          DC8 "APCH_70"

   \              0x43 0x48    

   \              0x5F 0x37    

   \              0x30 0x00

   \                                 In section .rodata, align 4
   \                     ?_24:
   \        0x0   0x41 0x50          DC8 "APCH_71"

   \              0x43 0x48    

   \              0x5F 0x37    

   \              0x31 0x00

   \                                 In section .rodata, align 4
   \                     ?_25:
   \        0x0   0x41 0x50          DC8 "APCH_78"

   \              0x43 0x48    

   \              0x5F 0x37    

   \              0x38 0x00

   \                                 In section .rodata, align 4
   \                     ?_26:
   \        0x0   0x41 0x50          DC8 "APCH_79"

   \              0x43 0x48    

   \              0x5F 0x37    

   \              0x39 0x00

   \                                 In section .rodata, align 4
   \                     ?_27:
   \        0x0   0x41 0x50          DC8 "APCH_7A"

   \              0x43 0x48    

   \              0x5F 0x37    

   \              0x41 0x00

   \                                 In section .rodata, align 4
   \                     ?_28:
   \        0x0   0x36 0x2E          DC8 "6.6V"

   \              0x36 0x56    

   \              0x00
   \        0x5   0x00 0x00          DC8 0, 0, 0

   \              0x00

   \                                 In section .rodata, align 4
   \                     ?_29:
   \        0x0   0x37 0x2E          DC8 "7.0V"

   \              0x30 0x56    

   \              0x00
   \        0x5   0x00 0x00          DC8 0, 0, 0

   \              0x00

   \                                 In section .rodata, align 4
   \                     ?_30:
   \        0x0   0x37 0x2E          DC8 "7.5V"

   \              0x35 0x56    

   \              0x00
   \        0x5   0x00 0x00          DC8 0, 0, 0

   \              0x00

   \                                 In section .rodata, align 4
   \                     ?_31:
   \        0x0   0x38 0x2E          DC8 "8.0V"

   \              0x30 0x56    

   \              0x00
   \        0x5   0x00 0x00          DC8 0, 0, 0

   \              0x00

   \                                 In section .rodata, align 4
   \                     ?_32:
   \        0x0   0x2D 0x44          DC8 0x2D, 0x44, 0x2D, 0x20, 0x43, 0x3A, 0x5C, 0x77

   \              0x2D 0x20    

   \              0x43 0x3A    

   \              0x5C 0x77
   \        0x8   0x6F 0x72          DC8 0x6F, 0x72, 0x6B, 0x5C, 0x41, 0x74, 0x6D, 0x65

   \              0x6B 0x5C    

   \              0x41 0x74    

   \              0x6D 0x65
   \       0x10   0x6C 0x53          DC8 0x6C, 0x53, 0x6F, 0x66, 0x74, 0x50, 0x41, 0x63

   \              0x6F 0x66    

   \              0x74 0x50    

   \              0x41 0x63
   \       0x18   0x6B 0x5C          DC8 0x6B, 0x5C, 0x61, 0x74, 0x6D, 0x65, 0x6C, 0x2D

   \              0x61 0x74    

   \              0x6D 0x65    

   \              0x6C 0x2D
   \       0x20   0x73 0x6F          DC8 0x73, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65

   \              0x66 0x74    

   \              0x77 0x61    

   \              0x72 0x65
   \       0x28   0x2D 0x70          DC8 0x2D, 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65

   \              0x61 0x63    

   \              0x6B 0x61    

   \              0x67 0x65
   \       0x30   0x2D 0x32          DC8 0x2D, 0x32, 0x2E, 0x31, 0x37, 0x5C, 0x64, 0x72

   \              0x2E 0x31    

   \              0x37 0x5C    

   \              0x64 0x72
   \       0x38   0x69 0x76          DC8 0x69, 0x76, 0x65, 0x72, 0x73, 0x5C, 0x70, 0x6F

   \              0x65 0x72    

   \              0x73 0x5C    

   \              0x70 0x6F
   \       0x40   0x77 0x65          DC8 0x77, 0x65, 0x72, 0x5C, 0x61, 0x63, 0x74, 0x38

   \              0x72 0x5C    

   \              0x61 0x63    

   \              0x74 0x38
   \       0x48   0x39 0x34          DC8 0x39, 0x34, 0x35, 0x61, 0x2E, 0x63, 0x3A, 0x33

   \              0x35 0x61    

   \              0x2E 0x63    

   \              0x3A 0x33
   \       0x50   0x34 0x33          DC8 0x34, 0x33, 0x20, 0x50, 0x4D, 0x49, 0x43, 0x20

   \              0x20 0x50    

   \              0x4D 0x49    

   \              0x43 0x20
   \       0x58   0x49 0x52          DC8 0x49, 0x52, 0x51, 0x3A, 0x20, 0x53, 0x59, 0x53

   \              0x51 0x3A    

   \              0x20 0x53    

   \              0x59 0x53
   \       0x60   0x54 0x30          DC8 0x54, 0x30, 0x20, 0x63, 0x68, 0x61, 0x6E, 0x67

   \              0x20 0x63    

   \              0x68 0x61    

   \              0x6E 0x67
   \       0x68   0x65 0x64          DC8 0x65, 0x64, 0x0D, 0x0A, 0

   \              0x0D 0x0A    

   \              0x00
   \       0x6D   0x00 0x00          DC8 0, 0, 0

   \              0x00
   \       0x70   0x2D 0x44          DC8 0x2D, 0x44, 0x2D, 0x20, 0x43, 0x3A, 0x5C, 0x77

   \              0x2D 0x20    

   \              0x43 0x3A    

   \              0x5C 0x77
   \       0x78   0x6F 0x72          DC8 0x6F, 0x72, 0x6B, 0x5C, 0x41, 0x74, 0x6D, 0x65

   \              0x6B 0x5C    

   \              0x41 0x74    

   \              0x6D 0x65
   \       0x80   0x6C 0x53          DC8 0x6C, 0x53, 0x6F, 0x66, 0x74, 0x50, 0x41, 0x63

   \              0x6F 0x66    

   \              0x74 0x50    

   \              0x41 0x63
   \       0x88   0x6B 0x5C          DC8 0x6B, 0x5C, 0x61, 0x74, 0x6D, 0x65, 0x6C, 0x2D

   \              0x61 0x74    

   \              0x6D 0x65    

   \              0x6C 0x2D
   \       0x90   0x73 0x6F          DC8 0x73, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65

   \              0x66 0x74    

   \              0x77 0x61    

   \              0x72 0x65
   \       0x98   0x2D 0x70          DC8 0x2D, 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65

   \              0x61 0x63    

   \              0x6B 0x61    

   \              0x67 0x65
   \       0xA0   0x2D 0x32          DC8 0x2D, 0x32, 0x2E, 0x31, 0x37, 0x5C, 0x64, 0x72

   \              0x2E 0x31    

   \              0x37 0x5C    

   \              0x64 0x72
   \       0xA8   0x69 0x76          DC8 0x69, 0x76, 0x65, 0x72, 0x73, 0x5C, 0x70, 0x6F

   \              0x65 0x72    

   \              0x73 0x5C    

   \              0x70 0x6F
   \       0xB0   0x77 0x65          DC8 0x77, 0x65, 0x72, 0x5C, 0x61, 0x63, 0x74, 0x38

   \              0x72 0x5C    

   \              0x61 0x63    

   \              0x74 0x38
   \       0xB8   0x39 0x34          DC8 0x39, 0x34, 0x35, 0x61, 0x2E, 0x63, 0x3A, 0x33

   \              0x35 0x61    

   \              0x2E 0x63    

   \              0x3A 0x33
   \       0xC0   0x34 0x37          DC8 0x34, 0x37, 0x20, 0x50, 0x4D, 0x49, 0x43, 0x20

   \              0x20 0x50    

   \              0x4D 0x49    

   \              0x43 0x20
   \       0xC8   0x49 0x52          DC8 0x49, 0x52, 0x51, 0x3A, 0x20, 0x63, 0x68, 0x61

   \              0x51 0x3A    

   \              0x20 0x63    

   \              0x68 0x61
   \       0xD0   0x72 0x67          DC8 0x72, 0x67, 0x65, 0x72, 0x20, 0x73, 0x74, 0x61

   \              0x65 0x72    

   \              0x20 0x73    

   \              0x74 0x61
   \       0xD8   0x74 0x65          DC8 0x74, 0x65, 0x20, 0x6D, 0x61, 0x63, 0x68, 0x69

   \              0x20 0x6D    

   \              0x61 0x63    

   \              0x68 0x69
   \       0xE0   0x6E 0x65          DC8 0x6E, 0x65, 0x2C, 0x20, 0x45, 0x4E, 0x44, 0x2D

   \              0x2C 0x20    

   \              0x45 0x4E    

   \              0x44 0x2D
   \       0xE8   0x4F 0x46          DC8 0x4F, 0x46, 0x2D, 0x43, 0x48, 0x41, 0x52, 0x47

   \              0x2D 0x43    

   \              0x48 0x41    

   \              0x52 0x47
   \       0xF0   0x45 0x20          DC8 0x45, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x0D

   \              0x73 0x74    

   \              0x61 0x74    

   \              0x65 0x0D
   \       0xF8   0x0A 0x00          DC8 0x0A, 0
   \       0xFA   0x00 0x00          DC8 0, 0
   \       0xFC   0x2D 0x44          DC8 0x2D, 0x44, 0x2D, 0x20, 0x43, 0x3A, 0x5C, 0x77

   \              0x2D 0x20    

   \              0x43 0x3A    

   \              0x5C 0x77
   \      0x104   0x6F 0x72          DC8 0x6F, 0x72, 0x6B, 0x5C, 0x41, 0x74, 0x6D, 0x65

   \              0x6B 0x5C    

   \              0x41 0x74    

   \              0x6D 0x65
   \      0x10C   0x6C 0x53          DC8 0x6C, 0x53, 0x6F, 0x66, 0x74, 0x50, 0x41, 0x63

   \              0x6F 0x66    

   \              0x74 0x50    

   \              0x41 0x63
   \      0x114   0x6B 0x5C          DC8 0x6B, 0x5C, 0x61, 0x74, 0x6D, 0x65, 0x6C, 0x2D

   \              0x61 0x74    

   \              0x6D 0x65    

   \              0x6C 0x2D
   \      0x11C   0x73 0x6F          DC8 0x73, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65

   \              0x66 0x74    

   \              0x77 0x61    

   \              0x72 0x65
   \      0x124   0x2D 0x70          DC8 0x2D, 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65

   \              0x61 0x63    

   \              0x6B 0x61    

   \              0x67 0x65
   \      0x12C   0x2D 0x32          DC8 0x2D, 0x32, 0x2E, 0x31, 0x37, 0x5C, 0x64, 0x72

   \              0x2E 0x31    

   \              0x37 0x5C    

   \              0x64 0x72
   \      0x134   0x69 0x76          DC8 0x69, 0x76, 0x65, 0x72, 0x73, 0x5C, 0x70, 0x6F

   \              0x65 0x72    

   \              0x73 0x5C    

   \              0x70 0x6F
   \      0x13C   0x77 0x65          DC8 0x77, 0x65, 0x72, 0x5C, 0x61, 0x63, 0x74, 0x38

   \              0x72 0x5C    

   \              0x61 0x63    

   \              0x74 0x38
   \      0x144   0x39 0x34          DC8 0x39, 0x34, 0x35, 0x61, 0x2E, 0x63, 0x3A, 0x33

   \              0x35 0x61    

   \              0x2E 0x63    

   \              0x3A 0x33
   \      0x14C   0x35 0x33          DC8 0x35, 0x33, 0x20, 0x50, 0x4D, 0x49, 0x43, 0x20

   \              0x20 0x50    

   \              0x4D 0x49    

   \              0x43 0x20
   \      0x154   0x49 0x52          DC8 0x49, 0x52, 0x51, 0x3A, 0x20, 0x25, 0x73, 0x0D

   \              0x51 0x3A    

   \              0x20 0x25    

   \              0x73 0x0D
   \      0x15C   0x0A 0x00          DC8 0x0A, 0
   \      0x15E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_35:
   \        0x0   0x2D 0x44          DC8 0x2D, 0x44, 0x2D, 0x20, 0x43, 0x3A, 0x5C, 0x77

   \              0x2D 0x20    

   \              0x43 0x3A    

   \              0x5C 0x77
   \        0x8   0x6F 0x72          DC8 0x6F, 0x72, 0x6B, 0x5C, 0x41, 0x74, 0x6D, 0x65

   \              0x6B 0x5C    

   \              0x41 0x74    

   \              0x6D 0x65
   \       0x10   0x6C 0x53          DC8 0x6C, 0x53, 0x6F, 0x66, 0x74, 0x50, 0x41, 0x63

   \              0x6F 0x66    

   \              0x74 0x50    

   \              0x41 0x63
   \       0x18   0x6B 0x5C          DC8 0x6B, 0x5C, 0x61, 0x74, 0x6D, 0x65, 0x6C, 0x2D

   \              0x61 0x74    

   \              0x6D 0x65    

   \              0x6C 0x2D
   \       0x20   0x73 0x6F          DC8 0x73, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65

   \              0x66 0x74    

   \              0x77 0x61    

   \              0x72 0x65
   \       0x28   0x2D 0x70          DC8 0x2D, 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65

   \              0x61 0x63    

   \              0x6B 0x61    

   \              0x67 0x65
   \       0x30   0x2D 0x32          DC8 0x2D, 0x32, 0x2E, 0x31, 0x37, 0x5C, 0x64, 0x72

   \              0x2E 0x31    

   \              0x37 0x5C    

   \              0x64 0x72
   \       0x38   0x69 0x76          DC8 0x69, 0x76, 0x65, 0x72, 0x73, 0x5C, 0x70, 0x6F

   \              0x65 0x72    

   \              0x73 0x5C    

   \              0x70 0x6F
   \       0x40   0x77 0x65          DC8 0x77, 0x65, 0x72, 0x5C, 0x61, 0x63, 0x74, 0x38

   \              0x72 0x5C    

   \              0x61 0x63    

   \              0x74 0x38
   \       0x48   0x39 0x34          DC8 0x39, 0x34, 0x35, 0x61, 0x2E, 0x63, 0x3A, 0x33

   \              0x35 0x61    

   \              0x2E 0x63    

   \              0x3A 0x33
   \       0x50   0x36 0x33          DC8 0x36, 0x33, 0x20, 0x50, 0x4D, 0x49, 0x43, 0x20

   \              0x20 0x50    

   \              0x4D 0x49    

   \              0x43 0x20
   \       0x58   0x4C 0x42          DC8 0x4C, 0x42, 0x4F, 0x3A, 0x20, 0x4C, 0x6F, 0x77

   \              0x4F 0x3A    

   \              0x20 0x4C    

   \              0x6F 0x77
   \       0x60   0x20 0x42          DC8 0x20, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79

   \              0x61 0x74    

   \              0x74 0x65    

   \              0x72 0x79
   \       0x68   0x20 0x4F          DC8 0x20, 0x4F, 0x75, 0x74, 0x70, 0x75, 0x74, 0x0D

   \              0x75 0x74    

   \              0x70 0x75    

   \              0x74 0x0D
   \       0x70   0x0A 0x00          DC8 0x0A, 0
   \       0x72   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_36:
   \        0x0   0x2D 0x44          DC8 0x2D, 0x44, 0x2D, 0x20, 0x43, 0x3A, 0x5C, 0x77

   \              0x2D 0x20    

   \              0x43 0x3A    

   \              0x5C 0x77
   \        0x8   0x6F 0x72          DC8 0x6F, 0x72, 0x6B, 0x5C, 0x41, 0x74, 0x6D, 0x65

   \              0x6B 0x5C    

   \              0x41 0x74    

   \              0x6D 0x65
   \       0x10   0x6C 0x53          DC8 0x6C, 0x53, 0x6F, 0x66, 0x74, 0x50, 0x41, 0x63

   \              0x6F 0x66    

   \              0x74 0x50    

   \              0x41 0x63
   \       0x18   0x6B 0x5C          DC8 0x6B, 0x5C, 0x61, 0x74, 0x6D, 0x65, 0x6C, 0x2D

   \              0x61 0x74    

   \              0x6D 0x65    

   \              0x6C 0x2D
   \       0x20   0x73 0x6F          DC8 0x73, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65

   \              0x66 0x74    

   \              0x77 0x61    

   \              0x72 0x65
   \       0x28   0x2D 0x70          DC8 0x2D, 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65

   \              0x61 0x63    

   \              0x6B 0x61    

   \              0x67 0x65
   \       0x30   0x2D 0x32          DC8 0x2D, 0x32, 0x2E, 0x31, 0x37, 0x5C, 0x64, 0x72

   \              0x2E 0x31    

   \              0x37 0x5C    

   \              0x64 0x72
   \       0x38   0x69 0x76          DC8 0x69, 0x76, 0x65, 0x72, 0x73, 0x5C, 0x70, 0x6F

   \              0x65 0x72    

   \              0x73 0x5C    

   \              0x70 0x6F
   \       0x40   0x77 0x65          DC8 0x77, 0x65, 0x72, 0x5C, 0x61, 0x63, 0x74, 0x38

   \              0x72 0x5C    

   \              0x61 0x63    

   \              0x74 0x38
   \       0x48   0x39 0x34          DC8 0x39, 0x34, 0x35, 0x61, 0x2E, 0x63, 0x3A, 0x34

   \              0x35 0x61    

   \              0x2E 0x63    

   \              0x3A 0x34
   \       0x50   0x35 0x31          DC8 0x35, 0x31, 0x20, 0x43, 0x68, 0x61, 0x72, 0x67

   \              0x20 0x43    

   \              0x68 0x61    

   \              0x72 0x67
   \       0x58   0x65 0x20          DC8 0x65, 0x20, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x3A

   \              0x4C 0x65    

   \              0x76 0x65    

   \              0x6C 0x3A
   \       0x60   0x20 0x31          DC8 0x20, 0x31, 0x30, 0x30, 0x6D, 0x41, 0x0D, 0x0A

   \              0x30 0x30    

   \              0x6D 0x41    

   \              0x0D 0x0A
   \       0x68   0x00               DC8 0
   \       0x69   0x00 0x00          DC8 0, 0, 0

   \              0x00
   \       0x6C   0x2D 0x44          DC8 0x2D, 0x44, 0x2D, 0x20, 0x43, 0x3A, 0x5C, 0x77

   \              0x2D 0x20    

   \              0x43 0x3A    

   \              0x5C 0x77
   \       0x74   0x6F 0x72          DC8 0x6F, 0x72, 0x6B, 0x5C, 0x41, 0x74, 0x6D, 0x65

   \              0x6B 0x5C    

   \              0x41 0x74    

   \              0x6D 0x65
   \       0x7C   0x6C 0x53          DC8 0x6C, 0x53, 0x6F, 0x66, 0x74, 0x50, 0x41, 0x63

   \              0x6F 0x66    

   \              0x74 0x50    

   \              0x41 0x63
   \       0x84   0x6B 0x5C          DC8 0x6B, 0x5C, 0x61, 0x74, 0x6D, 0x65, 0x6C, 0x2D

   \              0x61 0x74    

   \              0x6D 0x65    

   \              0x6C 0x2D
   \       0x8C   0x73 0x6F          DC8 0x73, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65

   \              0x66 0x74    

   \              0x77 0x61    

   \              0x72 0x65
   \       0x94   0x2D 0x70          DC8 0x2D, 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65

   \              0x61 0x63    

   \              0x6B 0x61    

   \              0x67 0x65
   \       0x9C   0x2D 0x32          DC8 0x2D, 0x32, 0x2E, 0x31, 0x37, 0x5C, 0x64, 0x72

   \              0x2E 0x31    

   \              0x37 0x5C    

   \              0x64 0x72
   \       0xA4   0x69 0x76          DC8 0x69, 0x76, 0x65, 0x72, 0x73, 0x5C, 0x70, 0x6F

   \              0x65 0x72    

   \              0x73 0x5C    

   \              0x70 0x6F
   \       0xAC   0x77 0x65          DC8 0x77, 0x65, 0x72, 0x5C, 0x61, 0x63, 0x74, 0x38

   \              0x72 0x5C    

   \              0x61 0x63    

   \              0x74 0x38
   \       0xB4   0x39 0x34          DC8 0x39, 0x34, 0x35, 0x61, 0x2E, 0x63, 0x3A, 0x34

   \              0x35 0x61    

   \              0x2E 0x63    

   \              0x3A 0x34
   \       0xBC   0x35 0x35          DC8 0x35, 0x35, 0x20, 0x43, 0x68, 0x61, 0x72, 0x67

   \              0x20 0x43    

   \              0x68 0x61    

   \              0x72 0x67
   \       0xC4   0x65 0x20          DC8 0x65, 0x20, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x3A

   \              0x4C 0x65    

   \              0x76 0x65    

   \              0x6C 0x3A
   \       0xCC   0x20 0x34          DC8 0x20, 0x34, 0x35, 0x30, 0x6D, 0x41, 0x0D, 0x0A

   \              0x35 0x30    

   \              0x6D 0x41    

   \              0x0D 0x0A
   \       0xD4   0x00               DC8 0
   \       0xD5   0x00 0x00          DC8 0, 0, 0

   \              0x00
   \       0xD8   0x2D 0x57          DC8 "-W- Invalid charge level requested: %d\015\012"

   \              0x2D 0x20    

   \              0x49 0x6E    

   \              0x76 0x61    

   \              0x6C 0x69    

   \              0x64 0x20    

   \              0x63 0x68    

   \              0x61 0x72    

   \              0x67 0x65    

   \              0x20 0x6C    

   \              0x65 0x76    

   \              0x65 0x6C    

   \              0x20 0x72    

   \              0x65 0x71    

   \              0x75 0x65    

   \              0x73 0x74    

   \              0x65 0x64    

   \              0x3A 0x20    

   \              0x25 0x64    

   \              0x0D 0x0A    

   \              0x00
   \      0x101   0x00 0x00          DC8 0, 0, 0

   \              0x00

   \                                 In section .rodata, align 4
   \                     ?_39:
   \        0x0   0x2D 0x57          DC8 0x2D, 0x57, 0x2D, 0x20, 0x43, 0x61, 0x6E, 0x6E

   \              0x2D 0x20    

   \              0x43 0x61    

   \              0x6E 0x6E
   \        0x8   0x6F 0x74          DC8 0x6F, 0x74, 0x20, 0x73, 0x65, 0x74, 0x20, 0x72

   \              0x20 0x73    

   \              0x65 0x74    

   \              0x20 0x72
   \       0x10   0x65 0x67          DC8 0x65, 0x67, 0x75, 0x6C, 0x61, 0x74, 0x6F, 0x72

   \              0x75 0x6C    

   \              0x61 0x74    

   \              0x6F 0x72
   \       0x18   0x20 0x25          DC8 0x20, 0x25, 0x64, 0x20, 0x76, 0x6F, 0x6C, 0x74

   \              0x64 0x20    

   \              0x76 0x6F    

   \              0x6C 0x74
   \       0x20   0x61 0x67          DC8 0x61, 0x67, 0x65, 0x20, 0x74, 0x6F, 0x20, 0x25

   \              0x65 0x20    

   \              0x74 0x6F    

   \              0x20 0x25
   \       0x28   0x64 0x6D          DC8 0x64, 0x6D, 0x56, 0x2C, 0x20, 0x75, 0x73, 0x69

   \              0x56 0x2C    

   \              0x20 0x75    

   \              0x73 0x69
   \       0x30   0x6E 0x67          DC8 0x6E, 0x67, 0x20, 0x36, 0x30, 0x30, 0x6D, 0x56

   \              0x20 0x36    

   \              0x30 0x30    

   \              0x6D 0x56
   \       0x38   0x20 0x69          DC8 0x20, 0x69, 0x6E, 0x73, 0x74, 0x65, 0x61, 0x64

   \              0x6E 0x73    

   \              0x74 0x65    

   \              0x61 0x64
   \       0x40   0x0D 0x0A          DC8 0x0D, 0x0A, 0

   \              0x00
   \       0x43   0x00               DC8 0
   \       0x44   0x2D 0x57          DC8 0x2D, 0x57, 0x2D, 0x20, 0x43, 0x61, 0x6E, 0x6E

   \              0x2D 0x20    

   \              0x43 0x61    

   \              0x6E 0x6E
   \       0x4C   0x6F 0x74          DC8 0x6F, 0x74, 0x20, 0x73, 0x65, 0x74, 0x20, 0x72

   \              0x20 0x73    

   \              0x65 0x74    

   \              0x20 0x72
   \       0x54   0x65 0x67          DC8 0x65, 0x67, 0x75, 0x6C, 0x61, 0x74, 0x6F, 0x72

   \              0x75 0x6C    

   \              0x61 0x74    

   \              0x6F 0x72
   \       0x5C   0x20 0x25          DC8 0x20, 0x25, 0x64, 0x20, 0x76, 0x6F, 0x6C, 0x74

   \              0x64 0x20    

   \              0x76 0x6F    

   \              0x6C 0x74
   \       0x64   0x61 0x67          DC8 0x61, 0x67, 0x65, 0x20, 0x74, 0x6F, 0x20, 0x25

   \              0x65 0x20    

   \              0x74 0x6F    

   \              0x20 0x25
   \       0x6C   0x64 0x6D          DC8 0x64, 0x6D, 0x56, 0x2C, 0x20, 0x75, 0x73, 0x69

   \              0x56 0x2C    

   \              0x20 0x75    

   \              0x73 0x69
   \       0x74   0x6E 0x67          DC8 0x6E, 0x67, 0x20, 0x33, 0x39, 0x30, 0x30, 0x6D

   \              0x20 0x33    

   \              0x39 0x30    

   \              0x30 0x6D
   \       0x7C   0x56 0x20          DC8 0x56, 0x20, 0x69, 0x6E, 0x73, 0x74, 0x65, 0x61

   \              0x69 0x6E    

   \              0x73 0x74    

   \              0x65 0x61
   \       0x84   0x64 0x0D          DC8 0x64, 0x0D, 0x0A, 0

   \              0x0A 0x00
   \       0x88   0x2D 0x45          DC8 "-E- Cannot change voltage of regulator %d\015\012"

   \              0x2D 0x20    

   \              0x43 0x61    

   \              0x6E 0x6E    

   \              0x6F 0x74    

   \              0x20 0x63    

   \              0x68 0x61    

   \              0x6E 0x67    

   \              0x65 0x20    

   \              0x76 0x6F    

   \              0x6C 0x74    

   \              0x61 0x67    

   \              0x65 0x20    

   \              0x6F 0x66    

   \              0x20 0x72    

   \              0x65 0x67    

   \              0x75 0x6C    

   \              0x61 0x74    

   \              0x6F 0x72    

   \              0x20 0x25    

   \              0x64 0x0D    

   \              0x0A 0x00

   \                                 In section .rodata, align 4
   \                     ?_42:
   \        0x0   0x2D 0x45          DC8 "-E- Invalid regulator number %d\015\012"

   \              0x2D 0x20    

   \              0x49 0x6E    

   \              0x76 0x61    

   \              0x6C 0x69    

   \              0x64 0x20    

   \              0x72 0x65    

   \              0x67 0x75    

   \              0x6C 0x61    

   \              0x74 0x6F    

   \              0x72 0x20    

   \              0x6E 0x75    

   \              0x6D 0x62    

   \              0x65 0x72    

   \              0x20 0x25    

   \              0x64 0x0D    

   \              0x0A 0x00
   \       0x22   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_43:
   \        0x0   0x0D 0x0A          DC8 "\015\012-- ACT8945A - Voltage Settings & State --\015\012"

   \              0x2D 0x2D    

   \              0x20 0x41    

   \              0x43 0x54    

   \              0x38 0x39    

   \              0x34 0x35    

   \              0x41 0x20    

   \              0x2D 0x20    

   \              0x56 0x6F    

   \              0x6C 0x74    

   \              0x61 0x67    

   \              0x65 0x20    

   \              0x53 0x65    

   \              0x74 0x74    

   \              0x69 0x6E    

   \              0x67 0x73    

   \              0x20 0x26    

   \              0x20 0x53    

   \              0x74 0x61    

   \              0x74 0x65    

   \              0x20 0x2D    

   \              0x2D 0x0D    

   \              0x0A 0x00
   \       0x2E   0x00 0x00          DC8 0, 0
   \       0x30   0x20 0x2D          DC8 " - SYSLEV Failing Treshold (0x%02x) = %dmV\015\012"

   \              0x20 0x53    

   \              0x59 0x53    

   \              0x4C 0x45    

   \              0x56 0x20    

   \              0x46 0x61    

   \              0x69 0x6C    

   \              0x69 0x6E    

   \              0x67 0x20    

   \              0x54 0x72    

   \              0x65 0x73    

   \              0x68 0x6F    

   \              0x6C 0x64    

   \              0x20 0x28    

   \              0x30 0x78    

   \              0x25 0x30    

   \              0x32 0x78    

   \              0x29 0x20    

   \              0x3D 0x20    

   \              0x25 0x64    

   \              0x6D 0x56    

   \              0x0D 0x0A    

   \              0x00
   \       0x5D   0x00 0x00          DC8 0, 0, 0

   \              0x00

   \                                 In section .rodata, align 4
   \                     ?_46:
   \        0x0   0x0D 0x0A          DC8 "\015\012-- ACT8945A - APCH Registers --\015\012"

   \              0x2D 0x2D    

   \              0x20 0x41    

   \              0x43 0x54    

   \              0x38 0x39    

   \              0x34 0x35    

   \              0x41 0x20    

   \              0x2D 0x20    

   \              0x41 0x50    

   \              0x43 0x48    

   \              0x20 0x52    

   \              0x65 0x67    

   \              0x69 0x73    

   \              0x74 0x65    

   \              0x72 0x73    

   \              0x20 0x2D    

   \              0x2D 0x0D    

   \              0x0A 0x00
   \       0x24   0x20 0x20          DC8 "     Charge Suspend Control Input:          %x\015\012"

   \              0x20 0x20    

   \              0x20 0x43    

   \              0x68 0x61    

   \              0x72 0x67    

   \              0x65 0x20    

   \              0x53 0x75    

   \              0x73 0x70    

   \              0x65 0x6E    

   \              0x64 0x20    

   \              0x43 0x6F    

   \              0x6E 0x74    

   \              0x72 0x6F    

   \              0x6C 0x20    

   \              0x49 0x6E    

   \              0x70 0x75    

   \              0x74 0x3A    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x25 0x78    

   \              0x0D 0x0A    

   \              0x00
   \       0x55   0x00 0x00          DC8 0, 0, 0

   \              0x00
   \       0x58   0x20 0x20          DC8 "     Total Charge Time-out Selection:       %x\015\012"

   \              0x20 0x20    

   \              0x20 0x54    

   \              0x6F 0x74    

   \              0x61 0x6C    

   \              0x20 0x43    

   \              0x68 0x61    

   \              0x72 0x67    

   \              0x65 0x20    

   \              0x54 0x69    

   \              0x6D 0x65    

   \              0x2D 0x6F    

   \              0x75 0x74    

   \              0x20 0x53    

   \              0x65 0x6C    

   \              0x65 0x63    

   \              0x74 0x69    

   \              0x6F 0x6E    

   \              0x3A 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x25 0x78    

   \              0x0D 0x0A    

   \              0x00
   \       0x89   0x00 0x00          DC8 0, 0, 0

   \              0x00
   \       0x8C   0x20 0x20          DC8 "     Precondition Charge Time-out Sel:      %x\015\012"

   \              0x20 0x20    

   \              0x20 0x50    

   \              0x72 0x65    

   \              0x63 0x6F    

   \              0x6E 0x64    

   \              0x69 0x74    

   \              0x69 0x6F    

   \              0x6E 0x20    

   \              0x43 0x68    

   \              0x61 0x72    

   \              0x67 0x65    

   \              0x20 0x54    

   \              0x69 0x6D    

   \              0x65 0x2D    

   \              0x6F 0x75    

   \              0x74 0x20    

   \              0x53 0x65    

   \              0x6C 0x3A    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x25 0x78    

   \              0x0D 0x0A    

   \              0x00
   \       0xBD   0x00 0x00          DC8 0, 0, 0

   \              0x00
   \       0xC0   0x20 0x20          DC8 0x20, 0x20, 0x20, 0x20, 0x20, 0x49, 0x6E, 0x70

   \              0x20 0x20    

   \              0x20 0x49    

   \              0x6E 0x70
   \       0xC8   0x75 0x74          DC8 0x75, 0x74, 0x20, 0x4F, 0x76, 0x65, 0x72, 0x2D

   \              0x20 0x4F    

   \              0x76 0x65    

   \              0x72 0x2D
   \       0xD0   0x56 0x6F          DC8 0x56, 0x6F, 0x6C, 0x74, 0x20, 0x50, 0x72, 0x6F

   \              0x6C 0x74    

   \              0x20 0x50    

   \              0x72 0x6F
   \       0xD8   0x74 0x2E          DC8 0x74, 0x2E, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68

   \              0x54 0x68    

   \              0x72 0x65    

   \              0x73 0x68
   \       0xE0   0x6F 0x6C          DC8 0x6F, 0x6C, 0x64, 0x20, 0x53, 0x65, 0x6C, 0x3A

   \              0x64 0x20    

   \              0x53 0x65    

   \              0x6C 0x3A
   \       0xE8   0x20 0x20          DC8 0x20, 0x20, 0x20, 0x20, 0x25, 0x78, 0x20, 0x28

   \              0x20 0x20    

   \              0x25 0x78    

   \              0x20 0x28
   \       0xF0   0x25 0x73          DC8 0x25, 0x73, 0x29, 0x0D, 0x0A, 0

   \              0x29 0x0D    

   \              0x0A 0x00
   \       0xF6   0x00 0x00          DC8 0, 0
   \       0xF8   0x20 0x20          DC8 "     Charge Time-out Interrupt Status:      %x\015\012"

   \              0x20 0x20    

   \              0x20 0x43    

   \              0x68 0x61    

   \              0x72 0x67    

   \              0x65 0x20    

   \              0x54 0x69    

   \              0x6D 0x65    

   \              0x2D 0x6F    

   \              0x75 0x74    

   \              0x20 0x49    

   \              0x6E 0x74    

   \              0x65 0x72    

   \              0x72 0x75    

   \              0x70 0x74    

   \              0x20 0x53    

   \              0x74 0x61    

   \              0x74 0x75    

   \              0x73 0x3A    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x25 0x78    

   \              0x0D 0x0A    

   \              0x00
   \      0x129   0x00 0x00          DC8 0, 0, 0

   \              0x00
   \      0x12C   0x20 0x20          DC8 "     Battery Temperature Interrupt Status:  %x\015\012"

   \              0x20 0x20    

   \              0x20 0x42    

   \              0x61 0x74    

   \              0x74 0x65    

   \              0x72 0x79    

   \              0x20 0x54    

   \              0x65 0x6D    

   \              0x70 0x65    

   \              0x72 0x61    

   \              0x74 0x75    

   \              0x72 0x65    

   \              0x20 0x49    

   \              0x6E 0x74    

   \              0x65 0x72    

   \              0x72 0x75    

   \              0x70 0x74    

   \              0x20 0x53    

   \              0x74 0x61    

   \              0x74 0x75    

   \              0x73 0x3A    

   \              0x20 0x20    

   \              0x25 0x78    

   \              0x0D 0x0A    

   \              0x00
   \      0x15D   0x00 0x00          DC8 0, 0, 0

   \              0x00
   \      0x160   0x20 0x20          DC8 "     Input Voltage Interrupt Status:        %x\015\012"

   \              0x20 0x20    

   \              0x20 0x49    

   \              0x6E 0x70    

   \              0x75 0x74    

   \              0x20 0x56    

   \              0x6F 0x6C    

   \              0x74 0x61    

   \              0x67 0x65    

   \              0x20 0x49    

   \              0x6E 0x74    

   \              0x65 0x72    

   \              0x72 0x75    

   \              0x70 0x74    

   \              0x20 0x53    

   \              0x74 0x61    

   \              0x74 0x75    

   \              0x73 0x3A    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x25 0x78    

   \              0x0D 0x0A    

   \              0x00
   \      0x191   0x00 0x00          DC8 0, 0, 0

   \              0x00
   \      0x194   0x20 0x20          DC8 "     Charge State Interrupt Status:         %x\015\012"

   \              0x20 0x20    

   \              0x20 0x43    

   \              0x68 0x61    

   \              0x72 0x67    

   \              0x65 0x20    

   \              0x53 0x74    

   \              0x61 0x74    

   \              0x65 0x20    

   \              0x49 0x6E    

   \              0x74 0x65    

   \              0x72 0x72    

   \              0x75 0x70    

   \              0x74 0x20    

   \              0x53 0x74    

   \              0x61 0x74    

   \              0x75 0x73    

   \              0x3A 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x25 0x78    

   \              0x0D 0x0A    

   \              0x00
   \      0x1C5   0x00 0x00          DC8 0, 0, 0

   \              0x00
   \      0x1C8   0x20 0x20          DC8 "     Charge Timer Status                    %x\015\012"

   \              0x20 0x20    

   \              0x20 0x43    

   \              0x68 0x61    

   \              0x72 0x67    

   \              0x65 0x20    

   \              0x54 0x69    

   \              0x6D 0x65    

   \              0x72 0x20    

   \              0x53 0x74    

   \              0x61 0x74    

   \              0x75 0x73    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x25 0x78    

   \              0x0D 0x0A    

   \              0x00
   \      0x1F9   0x00 0x00          DC8 0, 0, 0

   \              0x00
   \      0x1FC   0x20 0x20          DC8 "     Temperature Status                     %x\015\012"

   \              0x20 0x20    

   \              0x20 0x54    

   \              0x65 0x6D    

   \              0x70 0x65    

   \              0x72 0x61    

   \              0x74 0x75    

   \              0x72 0x65    

   \              0x20 0x53    

   \              0x74 0x61    

   \              0x74 0x75    

   \              0x73 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x25 0x78    

   \              0x0D 0x0A    

   \              0x00
   \      0x22D   0x00 0x00          DC8 0, 0, 0

   \              0x00
   \      0x230   0x20 0x20          DC8 "     Input Voltage Status                   %x\015\012"

   \              0x20 0x20    

   \              0x20 0x49    

   \              0x6E 0x70    

   \              0x75 0x74    

   \              0x20 0x56    

   \              0x6F 0x6C    

   \              0x74 0x61    

   \              0x67 0x65    

   \              0x20 0x53    

   \              0x74 0x61    

   \              0x74 0x75    

   \              0x73 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x25 0x78    

   \              0x0D 0x0A    

   \              0x00
   \      0x261   0x00 0x00          DC8 0, 0, 0

   \              0x00
   \      0x264   0x20 0x20          DC8 "     Charge State Machine Status            %x\015\012"

   \              0x20 0x20    

   \              0x20 0x43    

   \              0x68 0x61    

   \              0x72 0x67    

   \              0x65 0x20    

   \              0x53 0x74    

   \              0x61 0x74    

   \              0x65 0x20    

   \              0x4D 0x61    

   \              0x63 0x68    

   \              0x69 0x6E    

   \              0x65 0x20    

   \              0x53 0x74    

   \              0x61 0x74    

   \              0x75 0x73    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x25 0x78    

   \              0x0D 0x0A    

   \              0x00
   \      0x295   0x00 0x00          DC8 0, 0, 0

   \              0x00
   \      0x298   0x20 0x20          DC8 "     Total Charge Time-out Int Control:     %x\015\012"

   \              0x20 0x20    

   \              0x20 0x54    

   \              0x6F 0x74    

   \              0x61 0x6C    

   \              0x20 0x43    

   \              0x68 0x61    

   \              0x72 0x67    

   \              0x65 0x20    

   \              0x54 0x69    

   \              0x6D 0x65    

   \              0x2D 0x6F    

   \              0x75 0x74    

   \              0x20 0x49    

   \              0x6E 0x74    

   \              0x20 0x43    

   \              0x6F 0x6E    

   \              0x74 0x72    

   \              0x6F 0x6C    

   \              0x3A 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x25 0x78    

   \              0x0D 0x0A    

   \              0x00
   \      0x2C9   0x00 0x00          DC8 0, 0, 0

   \              0x00
   \      0x2CC   0x20 0x20          DC8 "     Batt.Temp.Int.Ctrl into valid range:   %x\015\012"

   \              0x20 0x20    

   \              0x20 0x42    

   \              0x61 0x74    

   \              0x74 0x2E    

   \              0x54 0x65    

   \              0x6D 0x70    

   \              0x2E 0x49    

   \              0x6E 0x74    

   \              0x2E 0x43    

   \              0x74 0x72    

   \              0x6C 0x20    

   \              0x69 0x6E    

   \              0x74 0x6F    

   \              0x20 0x76    

   \              0x61 0x6C    

   \              0x69 0x64    

   \              0x20 0x72    

   \              0x61 0x6E    

   \              0x67 0x65    

   \              0x3A 0x20    

   \              0x20 0x20    

   \              0x25 0x78    

   \              0x0D 0x0A    

   \              0x00
   \      0x2FD   0x00 0x00          DC8 0, 0, 0

   \              0x00
   \      0x300   0x20 0x20          DC8 "     Inp.Voltage Int.Ctrl into valid range: %x\015\012"

   \              0x20 0x20    

   \              0x20 0x49    

   \              0x6E 0x70    

   \              0x2E 0x56    

   \              0x6F 0x6C    

   \              0x74 0x61    

   \              0x67 0x65    

   \              0x20 0x49    

   \              0x6E 0x74    

   \              0x2E 0x43    

   \              0x74 0x72    

   \              0x6C 0x20    

   \              0x69 0x6E    

   \              0x74 0x6F    

   \              0x20 0x76    

   \              0x61 0x6C    

   \              0x69 0x64    

   \              0x20 0x72    

   \              0x61 0x6E    

   \              0x67 0x65    

   \              0x3A 0x20    

   \              0x25 0x78    

   \              0x0D 0x0A    

   \              0x00
   \      0x331   0x00 0x00          DC8 0, 0, 0

   \              0x00
   \      0x334   0x20 0x20          DC8 "     Charge State Int Ctrl into EOC state:  %x\015\012"

   \              0x20 0x20    

   \              0x20 0x43    

   \              0x68 0x61    

   \              0x72 0x67    

   \              0x65 0x20    

   \              0x53 0x74    

   \              0x61 0x74    

   \              0x65 0x20    

   \              0x49 0x6E    

   \              0x74 0x20    

   \              0x43 0x74    

   \              0x72 0x6C    

   \              0x20 0x69    

   \              0x6E 0x74    

   \              0x6F 0x20    

   \              0x45 0x4F    

   \              0x43 0x20    

   \              0x73 0x74    

   \              0x61 0x74    

   \              0x65 0x3A    

   \              0x20 0x20    

   \              0x25 0x78    

   \              0x0D 0x0A    

   \              0x00
   \      0x365   0x00 0x00          DC8 0, 0, 0

   \              0x00
   \      0x368   0x20 0x20          DC8 "     Precharge Time-out Int Ctrl:           %x\015\012"

   \              0x20 0x20    

   \              0x20 0x50    

   \              0x72 0x65    

   \              0x63 0x68    

   \              0x61 0x72    

   \              0x67 0x65    

   \              0x20 0x54    

   \              0x69 0x6D    

   \              0x65 0x2D    

   \              0x6F 0x75    

   \              0x74 0x20    

   \              0x49 0x6E    

   \              0x74 0x20    

   \              0x43 0x74    

   \              0x72 0x6C    

   \              0x3A 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x25 0x78    

   \              0x0D 0x0A    

   \              0x00
   \      0x399   0x00 0x00          DC8 0, 0, 0

   \              0x00
   \      0x39C   0x20 0x20          DC8 "     Batt.Temp.Int.Ctrl. out valid range:   %x\015\012"

   \              0x20 0x20    

   \              0x20 0x42    

   \              0x61 0x74    

   \              0x74 0x2E    

   \              0x54 0x65    

   \              0x6D 0x70    

   \              0x2E 0x49    

   \              0x6E 0x74    

   \              0x2E 0x43    

   \              0x74 0x72    

   \              0x6C 0x2E    

   \              0x20 0x6F    

   \              0x75 0x74    

   \              0x20 0x76    

   \              0x61 0x6C    

   \              0x69 0x64    

   \              0x20 0x72    

   \              0x61 0x6E    

   \              0x67 0x65    

   \              0x3A 0x20    

   \              0x20 0x20    

   \              0x25 0x78    

   \              0x0D 0x0A    

   \              0x00
   \      0x3CD   0x00 0x00          DC8 0, 0, 0

   \              0x00
   \      0x3D0   0x20 0x20          DC8 "     Inp.Voltage Int.Ctrl. out valid range: %x\015\012"

   \              0x20 0x20    

   \              0x20 0x49    

   \              0x6E 0x70    

   \              0x2E 0x56    

   \              0x6F 0x6C    

   \              0x74 0x61    

   \              0x67 0x65    

   \              0x20 0x49    

   \              0x6E 0x74    

   \              0x2E 0x43    

   \              0x74 0x72    

   \              0x6C 0x2E    

   \              0x20 0x6F    

   \              0x75 0x74    

   \              0x20 0x76    

   \              0x61 0x6C    

   \              0x69 0x64    

   \              0x20 0x72    

   \              0x61 0x6E    

   \              0x67 0x65    

   \              0x3A 0x20    

   \              0x25 0x78    

   \              0x0D 0x0A    

   \              0x00
   \      0x401   0x00 0x00          DC8 0, 0, 0

   \              0x00
   \      0x404   0x20 0x20          DC8 "     Charge State Int.Ctrl. out EOC state:  %x\015\012"

   \              0x20 0x20    

   \              0x20 0x43    

   \              0x68 0x61    

   \              0x72 0x67    

   \              0x65 0x20    

   \              0x53 0x74    

   \              0x61 0x74    

   \              0x65 0x20    

   \              0x49 0x6E    

   \              0x74 0x2E    

   \              0x43 0x74    

   \              0x72 0x6C    

   \              0x2E 0x20    

   \              0x6F 0x75    

   \              0x74 0x20    

   \              0x45 0x4F    

   \              0x43 0x20    

   \              0x73 0x74    

   \              0x61 0x74    

   \              0x65 0x3A    

   \              0x20 0x20    

   \              0x25 0x78    

   \              0x0D 0x0A    

   \              0x00
   \      0x435   0x00 0x00          DC8 0, 0, 0

   \              0x00
   \      0x438   0x20 0x20          DC8 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x68, 0x61

   \              0x20 0x20    

   \              0x20 0x43    

   \              0x68 0x61
   \      0x440   0x72 0x67          DC8 0x72, 0x67, 0x65, 0x20, 0x53, 0x74, 0x61, 0x74

   \              0x65 0x20    

   \              0x53 0x74    

   \              0x61 0x74
   \      0x448   0x65 0x3A          DC8 0x65, 0x3A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20
   \      0x450   0x20 0x20          DC8 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20
   \      0x458   0x20 0x20          DC8 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20
   \      0x460   0x20 0x20          DC8 0x20, 0x20, 0x20, 0x20, 0x25, 0x78, 0x20, 0x28

   \              0x20 0x20    

   \              0x25 0x78    

   \              0x20 0x28
   \      0x468   0x25 0x73          DC8 0x25, 0x73, 0x29, 0x0D, 0x0A, 0

   \              0x29 0x0D    

   \              0x0A 0x00
   \      0x46E   0x00 0x00          DC8 0, 0
   \      0x470   0x20 0x20          DC8 "     ACIN Status:                           %x\015\012"

   \              0x20 0x20    

   \              0x20 0x41    

   \              0x43 0x49    

   \              0x4E 0x20    

   \              0x53 0x74    

   \              0x61 0x74    

   \              0x75 0x73    

   \              0x3A 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x25 0x78    

   \              0x0D 0x0A    

   \              0x00
   \      0x4A1   0x00 0x00          DC8 0, 0, 0

   \              0x00

   \                                 In section .rodata, align 4
   \                     ?_69:
   \        0x0   0x0D 0x0A          DC8 "\015\012-- ACT8945A - System Registers --\015\012"

   \              0x2D 0x2D    

   \              0x20 0x41    

   \              0x43 0x54    

   \              0x38 0x39    

   \              0x34 0x35    

   \              0x41 0x20    

   \              0x2D 0x20    

   \              0x53 0x79    

   \              0x73 0x74    

   \              0x65 0x6D    

   \              0x20 0x52    

   \              0x65 0x67    

   \              0x69 0x73    

   \              0x74 0x65    

   \              0x72 0x73    

   \              0x20 0x2D    

   \              0x2D 0x0D    

   \              0x0A 0x00
   \       0x26   0x00 0x00          DC8 0, 0
   \       0x28   0x20 0x20          DC8 "     Reset Timer Setting:                   %s\015\012"

   \              0x20 0x20    

   \              0x20 0x52    

   \              0x65 0x73    

   \              0x65 0x74    

   \              0x20 0x54    

   \              0x69 0x6D    

   \              0x65 0x72    

   \              0x20 0x53    

   \              0x65 0x74    

   \              0x74 0x69    

   \              0x6E 0x67    

   \              0x3A 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x25 0x73    

   \              0x0D 0x0A    

   \              0x00
   \       0x59   0x00 0x00          DC8 0, 0, 0

   \              0x00
   \       0x5C   0x20 0x20          DC8 "     SYSLEV Mode Select:                    %s\015\012"

   \              0x20 0x20    

   \              0x20 0x53    

   \              0x59 0x53    

   \              0x4C 0x45    

   \              0x56 0x20    

   \              0x4D 0x6F    

   \              0x64 0x65    

   \              0x20 0x53    

   \              0x65 0x6C    

   \              0x65 0x63    

   \              0x74 0x3A    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x25 0x73    

   \              0x0D 0x0A    

   \              0x00
   \       0x8D   0x00 0x00          DC8 0, 0, 0

   \              0x00
   \       0x90   0x20 0x20          DC8 "     System Voltage Level Int.Mask:         %s\015\012"

   \              0x20 0x20    

   \              0x20 0x53    

   \              0x79 0x73    

   \              0x74 0x65    

   \              0x6D 0x20    

   \              0x56 0x6F    

   \              0x6C 0x74    

   \              0x61 0x67    

   \              0x65 0x20    

   \              0x4C 0x65    

   \              0x76 0x65    

   \              0x6C 0x20    

   \              0x49 0x6E    

   \              0x74 0x2E    

   \              0x4D 0x61    

   \              0x73 0x6B    

   \              0x3A 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x25 0x73    

   \              0x0D 0x0A    

   \              0x00
   \       0xC1   0x00 0x00          DC8 0, 0, 0

   \              0x00
   \       0xC4   0x20 0x20          DC8 "     System Voltage Status:                 %s\015\012"

   \              0x20 0x20    

   \              0x20 0x53    

   \              0x79 0x73    

   \              0x74 0x65    

   \              0x6D 0x20    

   \              0x56 0x6F    

   \              0x6C 0x74    

   \              0x61 0x67    

   \              0x65 0x20    

   \              0x53 0x74    

   \              0x61 0x74    

   \              0x75 0x73    

   \              0x3A 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x25 0x73    

   \              0x0D 0x0A    

   \              0x00
   \       0xF5   0x00 0x00          DC8 0, 0, 0

   \              0x00
   \       0xF8   0x20 0x20          DC8 0x20, 0x20, 0x20, 0x20, 0x20, 0x53, 0x59, 0x53

   \              0x20 0x20    

   \              0x20 0x53    

   \              0x59 0x53
   \      0x100   0x4C 0x45          DC8 0x4C, 0x45, 0x56, 0x20, 0x46, 0x61, 0x69, 0x6C

   \              0x56 0x20    

   \              0x46 0x61    

   \              0x69 0x6C
   \      0x108   0x69 0x6E          DC8 0x69, 0x6E, 0x67, 0x20, 0x54, 0x72, 0x65, 0x73

   \              0x67 0x20    

   \              0x54 0x72    

   \              0x65 0x73
   \      0x110   0x68 0x6F          DC8 0x68, 0x6F, 0x6C, 0x64, 0x20, 0x76, 0x61, 0x6C

   \              0x6C 0x64    

   \              0x20 0x76    

   \              0x61 0x6C
   \      0x118   0x75 0x65          DC8 0x75, 0x65, 0x3A, 0x20, 0x20, 0x20, 0x20, 0x20

   \              0x3A 0x20    

   \              0x20 0x20    

   \              0x20 0x20
   \      0x120   0x20 0x20          DC8 0x20, 0x20, 0x20, 0x20, 0x25, 0x64, 0x6D, 0x56

   \              0x20 0x20    

   \              0x25 0x64    

   \              0x6D 0x56
   \      0x128   0x0D 0x0A          DC8 0x0D, 0x0A, 0

   \              0x00
   \      0x12B   0x00               DC8 0
   \      0x12C   0x20 0x20          DC8 "     Master Off Ctrl, All regul:            %s\015\012"

   \              0x20 0x20    

   \              0x20 0x4D    

   \              0x61 0x73    

   \              0x74 0x65    

   \              0x72 0x20    

   \              0x4F 0x66    

   \              0x66 0x20    

   \              0x43 0x74    

   \              0x72 0x6C    

   \              0x2C 0x20    

   \              0x41 0x6C    

   \              0x6C 0x20    

   \              0x72 0x65    

   \              0x67 0x75    

   \              0x6C 0x3A    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x25 0x73    

   \              0x0D 0x0A    

   \              0x00
   \      0x15D   0x00 0x00          DC8 0, 0, 0

   \              0x00
   \      0x160   0x20 0x20          DC8 "     Scratchpad Bits, free user:            %x\015\012"

   \              0x20 0x20    

   \              0x20 0x53    

   \              0x63 0x72    

   \              0x61 0x74    

   \              0x63 0x68    

   \              0x70 0x61    

   \              0x64 0x20    

   \              0x42 0x69    

   \              0x74 0x73    

   \              0x2C 0x20    

   \              0x66 0x72    

   \              0x65 0x65    

   \              0x20 0x75    

   \              0x73 0x65    

   \              0x72 0x3A    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x25 0x78    

   \              0x0D 0x0A    

   \              0x00
   \      0x191   0x00 0x00          DC8 0, 0, 0

   \              0x00

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_77:
   \        0x0   0x50 0x4D          DC8 "PMIC IRQ: APCH79 changed\015\012"

   \              0x49 0x43    

   \              0x20 0x49    

   \              0x52 0x51    

   \              0x3A 0x20    

   \              0x41 0x50    

   \              0x43 0x48    

   \              0x37 0x39    

   \              0x20 0x63    

   \              0x68 0x61    

   \              0x6E 0x67    

   \              0x65 0x64    

   \              0x0D 0x0A    

   \              0x00
   \       0x1B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_78:
   \        0x0   0x2D 0x57          DC8 "-W- Unknown interrupt %d\015\012"

   \              0x2D 0x20    

   \              0x55 0x6E    

   \              0x6B 0x6E    

   \              0x6F 0x77    

   \              0x6E 0x20    

   \              0x69 0x6E    

   \              0x74 0x65    

   \              0x72 0x72    

   \              0x75 0x70    

   \              0x74 0x20    

   \              0x25 0x64    

   \              0x0D 0x0A    

   \              0x00
   \       0x1B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_79:
   \        0x0   0x20 0x2D          DC8 " - VOUT_%d (0x%02x) = %dmV"

   \              0x20 0x56    

   \              0x4F 0x55    

   \              0x54 0x5F    

   \              0x25 0x64    

   \              0x20 0x28    

   \              0x30 0x78    

   \              0x25 0x30    

   \              0x32 0x78    

   \              0x29 0x20    

   \              0x3D 0x20    

   \              0x25 0x64    

   \              0x6D 0x56    

   \              0x00
   \       0x1B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_80:
   \        0x0   0x20 0x25          DC8 " %s"

   \              0x73 0x00

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_81:
   \        0x0   0x6F 0x6E          DC8 "on"

   \              0x00
   \        0x3   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_82:
   \        0x0   0x6F 0x66          DC8 "off"

   \              0x66 0x00

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_83:
   \        0x0   0x31 0x38          DC8 "180"

   \              0x30 0x00

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_84:
   \        0x0   0x6F 0x73          DC8 "osc"

   \              0x63 0x00

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_85:
   \        0x0   0x70 0x77          DC8 "pwm"

   \              0x6D 0x00

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_86:
   \        0x0   0x70 0x6F          DC8 "pow-saving"

   \              0x77 0x2D    

   \              0x73 0x61    

   \              0x76 0x69    

   \              0x6E 0x67    

   \              0x00
   \        0xB   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_87:
   \        0x0   0x20 0x64          DC8 " delay:0x%02x"

   \              0x65 0x6C    

   \              0x61 0x79    

   \              0x3A 0x30    

   \              0x78 0x25    

   \              0x30 0x32    

   \              0x78 0x00
   \        0xE   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_88:
   \        0x0   0x65 0x6E          DC8 "en"

   \              0x00
   \        0x3   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_89:
   \        0x0   0x64 0x69          DC8 "dis"

   \              0x73 0x00

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_90:
   \        0x0   0x4F 0x4B          DC8 "OK"

   \              0x00
   \        0x3   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_91:
   \        0x0   0x3C 0x74          DC8 "<tresh"

   \              0x72 0x65    

   \              0x73 0x68    

   \              0x00
   \        0x7   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_92:
   \        0x0   0x6E 0x6F          DC8 "normal"

   \              0x72 0x6D    

   \              0x61 0x6C    

   \              0x00
   \        0x7   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_93:
   \        0x0   0x6C 0x6F          DC8 "low-power"

   \              0x77 0x2D    

   \              0x70 0x6F    

   \              0x77 0x65    

   \              0x72 0x00
   \        0xA   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_94:
   \        0x0   0x0D 0x0A          DC8 "\015\012"

   \              0x00
   \        0x3   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_95:
   \        0x0   0x20 0x2D          DC8 " - %s: 0x%02X  b:"

   \              0x20 0x25    

   \              0x73 0x3A    

   \              0x20 0x30    

   \              0x78 0x25    

   \              0x30 0x32    

   \              0x58 0x20    

   \              0x20 0x62    

   \              0x3A 0x00
   \       0x12   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_96:
   \        0x0   0x25 0x78          DC8 "%x"

   \              0x00
   \        0x3   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_97:
   \        0x0   0x20 0x2D          DC8 " - APCH @0x71: 0x%02x\015\012"

   \              0x20 0x41    

   \              0x50 0x43    

   \              0x48 0x20    

   \              0x40 0x30    

   \              0x78 0x37    

   \              0x31 0x3A    

   \              0x20 0x30    

   \              0x78 0x25    

   \              0x30 0x32    

   \              0x78 0x0D    

   \              0x0A 0x00

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_98:
   \        0x0   0x20 0x2D          DC8 " - APCH @0x78: 0x%02x\015\012"

   \              0x20 0x41    

   \              0x50 0x43    

   \              0x48 0x20    

   \              0x40 0x30    

   \              0x78 0x37    

   \              0x38 0x3A    

   \              0x20 0x30    

   \              0x78 0x25    

   \              0x30 0x32    

   \              0x78 0x0D    

   \              0x0A 0x00

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_99:
   \        0x0   0x20 0x2D          DC8 " - APCH @0x79: 0x%02x\015\012"

   \              0x20 0x41    

   \              0x50 0x43    

   \              0x48 0x20    

   \              0x40 0x30    

   \              0x78 0x37    

   \              0x39 0x3A    

   \              0x20 0x30    

   \              0x78 0x25    

   \              0x30 0x32    

   \              0x78 0x0D    

   \              0x0A 0x00

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_100:
   \        0x0   0x20 0x2D          DC8 " - APCH @0x7a: 0x%02x\015\012"

   \              0x20 0x41    

   \              0x50 0x43    

   \              0x48 0x20    

   \              0x40 0x30    

   \              0x78 0x37    

   \              0x61 0x3A    

   \              0x20 0x30    

   \              0x78 0x25    

   \              0x30 0x32    

   \              0x78 0x0D    

   \              0x0A 0x00

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_101:
   \        0x0   0x20 0x2D          DC8 " - SYS0 @0x00: 0x%02x\015\012"

   \              0x20 0x53    

   \              0x59 0x53    

   \              0x30 0x20    

   \              0x40 0x30    

   \              0x78 0x30    

   \              0x30 0x3A    

   \              0x20 0x30    

   \              0x78 0x25    

   \              0x30 0x32    

   \              0x78 0x0D    

   \              0x0A 0x00

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_102:
   \        0x0   0x36 0x34          DC8 "64ms"

   \              0x6D 0x73    

   \              0x00
   \        0x5   0x00 0x00          DC8 0, 0, 0

   \              0x00

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_103:
   \        0x0   0x32 0x36          DC8 "260ms"

   \              0x30 0x6D    

   \              0x73 0x00
   \        0x6   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_104:
   \        0x0   0x69 0x6E          DC8 "int"

   \              0x74 0x00

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_105:
   \        0x0   0x73 0x68          DC8 "shutdown"

   \              0x75 0x74    

   \              0x64 0x6F    

   \              0x77 0x6E    

   \              0x00
   \        0x9   0x00 0x00          DC8 0, 0, 0

   \              0x00

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_106:
   \        0x0   0x6E 0x6F          DC8 "noint"

   \              0x69 0x6E    

   \              0x74 0x00
   \        0x6   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_107:
   \        0x0   0x76 0x73          DC8 "vsys<syslev"

   \              0x79 0x73    

   \              0x3C 0x73    

   \              0x79 0x73    

   \              0x6C 0x65    

   \              0x76 0x00

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_108:
   \        0x0   0x76 0x73          DC8 "vsys>syslev"

   \              0x79 0x73    

   \              0x3E 0x73    

   \              0x79 0x73    

   \              0x6C 0x65    

   \              0x76 0x00

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   _act8945a_irq_handler
        24   -> _act8945a_update_cached_registers
         0   -> printf
        24   -> printf
       8   _act8945a_lbo_handler
         0   -> pio_disable_it
         8   -> printf
      56   _act8945a_read_reg
        56   -> bus_start_transaction
        56   -> bus_stop_transaction
        56   -> bus_transfer
       8   _act8945a_update_cached_registers
         8   -> _act8945a_read_reg
      40   _act8945a_write_reg
        40   -> bus_start_transaction
        40   -> bus_stop_transaction
        40   -> bus_transfer
      16   act8945a_configure
        16   -> _act8945a_read_reg
        16   -> _act8945a_update_cached_registers
        16   -> _act8945a_write_reg
        16   -> act8945a_configure_apch_interrupt
        16   -> act8945a_disable_all_apch_interrupts
        16   -> act8945a_enable_regulator_fault_interrupt
        16   -> pio_add_handler_to_group
        16   -> pio_configure
        16   -> pio_enable_it
        16   -> pio_set
        16   -> printf
      24   act8945a_configure_apch_interrupt
        24   -> _act8945a_read_reg
        24   -> _act8945a_write_reg
        24   -> printf
      16   act8945a_disable_all_apch_interrupts
        16   -> _act8945a_read_reg
        16   -> _act8945a_write_reg
        16   -> act8945a_configure_apch_interrupt
      24   act8945a_display_apch_registers
        24   -> _act8945a_read_reg
        24   -> printf
      16   act8945a_display_charge_state
        16   -> _act8945a_read_reg
        16   -> printf
      16   act8945a_display_system_registers
        16   -> _act8945a_read_reg
        16   -> printf
      56   act8945a_display_voltage_settings
        56   -> _act8945a_read_reg
        56   -> printf
      40   act8945a_dump_registers
        40   -> _act8945a_read_reg
        40   -> printf
      24   act8945a_enable_regulator
        24   -> _act8945a_read_reg
        24   -> _act8945a_write_reg
        24   -> printf
      24   act8945a_enable_regulator_fault_interrupt
        24   -> _act8945a_read_reg
        24   -> _act8945a_write_reg
        24   -> printf
      16   act8945a_enable_system_voltage_level_interrupt
        16   -> _act8945a_read_reg
        16   -> _act8945a_write_reg
       8   act8945a_get_lbo_pin_state
         8   -> pio_get
       8   act8945a_set_charge_level
         8   -> pio_clear
         8   -> pio_set
         0   -> printf
      16   act8945a_set_regulator_voltage
         0   -> _act8945a_write_reg
        16   -> printf
      24   act8945a_set_system_voltage_detect_threshold
        24   -> _act8945a_read_reg
        24   -> _act8945a_write_reg


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable48
       4  ??DataTable48_1
       4  ??DataTable48_2
       4  ??DataTable48_3
       4  ??DataTable48_4
       4  ??DataTable48_5
       4  ??DataTable48_6
       4  ??DataTable48_7
       4  ??DataTable48_8
       4  ??DataTable48_9
       4  ??DataTable49
       4  ??DataTable49_1
       8  ??DataTable49_10
       8  ??DataTable49_11
       8  ??DataTable49_12
       8  ??DataTable49_13
       8  ??DataTable49_14
       8  ??DataTable49_15
       4  ??DataTable49_16
       4  ??DataTable49_17
       4  ??DataTable49_18
       4  ??DataTable49_19
       4  ??DataTable49_2
       4  ??DataTable49_20
       8  ??DataTable49_3
       8  ??DataTable49_4
       8  ??DataTable49_5
       4  ??DataTable49_6
       4  ??DataTable49_7
       4  ??DataTable49_8
       8  ??DataTable49_9
       4  ??DataTable50
       4  ??DataTable50_1
       4  ??DataTable51
       4  ??DataTable52
       4  ??DataTable52_1
       4  ??DataTable52_10
       4  ??DataTable52_11
       4  ??DataTable52_12
       4  ??DataTable52_13
       4  ??DataTable52_14
       4  ??DataTable52_15
       4  ??DataTable52_16
       4  ??DataTable52_17
       4  ??DataTable52_18
       4  ??DataTable52_19
       4  ??DataTable52_2
       4  ??DataTable52_20
       4  ??DataTable52_21
       4  ??DataTable52_22
       4  ??DataTable52_23
       4  ??DataTable52_24
       4  ??DataTable52_25
       4  ??DataTable52_26
       4  ??DataTable52_27
       4  ??DataTable52_28
       4  ??DataTable52_29
       4  ??DataTable52_3
       4  ??DataTable52_30
       4  ??DataTable52_31
       4  ??DataTable52_32
       4  ??DataTable52_33
       4  ??DataTable52_4
       4  ??DataTable52_5
       4  ??DataTable52_6
       4  ??DataTable52_7
       4  ??DataTable52_8
       4  ??DataTable52_9
       8  ?Subroutine0
      24  ?_0
      16  ?_1
       8  ?_10
      24  ?_100
      24  ?_101
       8  ?_102
       8  ?_103
       4  ?_104
      12  ?_105
       8  ?_106
      12  ?_107
      12  ?_108
      24  ?_109
       8  ?_11
      28  ?_110
      24  ?_111
      12  ?_112
       8  ?_12
       8  ?_13
       8  ?_14
       8  ?_15
       8  ?_16
       8  ?_17
       8  ?_18
       8  ?_19
      20  ?_2
       8  ?_20
       8  ?_21
       8  ?_22
       8  ?_23
       8  ?_24
       8  ?_25
       8  ?_26
       8  ?_27
       8  ?_28
       8  ?_29
      16  ?_3
       8  ?_30
       8  ?_31
     352  ?_32
     116  ?_35
     260  ?_36
     180  ?_39
       8  ?_4
      36  ?_42
      96  ?_43
   1'188  ?_46
       8  ?_5
       8  ?_6
     404  ?_69
       8  ?_7
      28  ?_77
      28  ?_78
      28  ?_79
       8  ?_8
       4  ?_80
       4  ?_81
       4  ?_82
       4  ?_83
       4  ?_84
       4  ?_85
      12  ?_86
      16  ?_87
       4  ?_88
       4  ?_89
       8  ?_9
       4  ?_90
       8  ?_91
       8  ?_92
      12  ?_93
       4  ?_94
      20  ?_95
       4  ?_96
      24  ?_97
      24  ?_98
      24  ?_99
     200  _act8945a_irq_handler
      80  _act8945a_lbo_handler
     104  _act8945a_read_reg
     104  _act8945a_update_cached_registers
     108  _act8945a_write_reg
      32  _charging_states
          _ovp_setting
       8  _iaddr_reg
     228  _regs
     348  act8945a_configure
     532  act8945a_configure_apch_interrupt
     464  act8945a_disable_all_apch_interrupts
     548  act8945a_display_apch_registers
      84  act8945a_display_charge_state
     276  act8945a_display_system_registers
     700  act8945a_display_voltage_settings
     160  act8945a_dump_registers
     260  act8945a_enable_regulator
     264  act8945a_enable_regulator_fault_interrupt
      84  act8945a_enable_system_voltage_level_interrupt
      28  act8945a_get_lbo_pin_state
     124  act8945a_set_charge_level
     312  act8945a_set_regulator_voltage
     116  act8945a_set_system_voltage_detect_threshold

 
    32 bytes in section .data
 3'592 bytes in section .rodata
 5'268 bytes in section SOFTPACK
 
 5'268 bytes of CODE  memory
 3'592 bytes of CONST memory
    32 bytes of DATA  memory

Errors: none
Warnings: none
