###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.1.245/W32 for ARM         13/Jan/2021  09:45:20
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\gpio\piobu.c
#    Command line      =
#        -f C:\Users\c40450\AppData\Local\Temp\EW7F21.tmp
#        (C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\gpio\piobu.c
#        -D "SOFTPACK_VERSION=\"2.17\"" -D TRACE_LEVEL=5 -D VARIANT_SRAM -D
#        CONFIG_ARCH_ARMV7A -D CONFIG_ARCH_ARM -D CONFIG_SOC_SAMA5D2 -D
#        CONFIG_CHIP_SAMA5D27 -D CONFIG_PACKAGE_289PIN -D
#        CONFIG_BOARD_SAMA5D2_XPLAINED -D CONFIG_HAVE_AIC5 -D
#        CONFIG_HAVE_FLEXCOM -D CONFIG_HAVE_PIO4 -D CONFIG_HAVE_PIO4_SECURE -D
#        CONFIG_HAVE_NFC -D CONFIG_HAVE_PIT -D CONFIG_HAVE_SMC -D
#        CONFIG_HAVE_SMC_SCRAMBLING -D CONFIG_HAVE_GMAC_QUEUES -D
#        CONFIG_HAVE_MPDDRC -D CONFIG_HAVE_MPDDRC_DATA_PATH -D
#        CONFIG_HAVE_MPDDRC_IO_CALIBRATION -D CONFIG_HAVE_MPDDRC_DDR2 -D
#        CONFIG_HAVE_MPDDRC_LPDDR2 -D CONFIG_HAVE_MPDDRC_DDR3 -D
#        CONFIG_HAVE_MPDDRC_LPDDR3 -D CONFIG_HAVE_ADC_SETTLING_TIME -D
#        CONFIG_HAVE_ADC_DIFF_INPUT -D CONFIG_HAVE_ADC_SEQ_R2 -D
#        CONFIG_HAVE_PMC_FAST_STARTUP -D CONFIG_HAVE_PMC_GENERATED_CLOCKS -D
#        CONFIG_HAVE_PMC_AUDIO_CLOCK -D CONFIG_HAVE_PMC_PLLADIV2 -D
#        CONFIG_HAVE_PMC_H32MXDIV -D CONFIG_HAVE_PMC_UPLL_BIAS -D
#        CONFIG_HAVE_SCKC -D CONFIG_HAVE_PWMC_DMA -D
#        CONFIG_HAVE_PWMC_SPREAD_SPECTRUM -D CONFIG_HAVE_PWMC_EXTERNAL_TRIGGER
#        -D CONFIG_HAVE_PWMC_FAULT_PROT_HIZ -D CONFIG_HAVE_PWMC_STEPPER_MOTOR
#        -D CONFIG_HAVE_PWMC_CMP_UNIT -D CONFIG_HAVE_PWMC_SYNC_MODE -D
#        CONFIG_HAVE_PWMC_OOV -D CONFIG_HAVE_PWMC_FMODE -D CONFIG_HAVE_PWMC_WP
#        -D CONFIG_HAVE_PWMC_DTIME -D CONFIG_HAVE_PWMC_ELINE -D
#        CONFIG_HAVE_SFRBU -D CONFIG_HAVE_L2CC -D CONFIG_HAVE_SAIC -D
#        CONFIG_HAVE_XDMAC -D CONFIG_HAVE_XDMAC_DATA_WIDTH_DWORD -D
#        CONFIG_HAVE_SECUMOD -D CONFIG_HAVE_SFC -D CONFIG_HAVE_PWMC -D
#        CONFIG_HAVE_SECURE_MATRIX -D CONFIG_HAVE_DDR3_MT41K128M16 -D
#        CONFIG_HAVE_RSTC_CONFIGURABLE_USER_RESET -D CONFIG_HAVE_TC_FAULT_MODE
#        -D CONFIG_HAVE_TC_DMA_MODE -D CONFIG_HAVE_RTC_CALIBRATION -D
#        CONFIG_HAVE_RTC_MODE_PERSIAN -D CONFIG_HAVE_RTC_MODE_UTC -D
#        CONFIG_HAVE_RTC_TAMPER -D CONFIG_HAVE_SHDWC -D CONFIG_HAVE_MMU -D
#        CONFIG_HAVE_L1CACHE -D CONFIG_HAVE_L2CACHE -D CONFIG_HAVE_UART -D
#        CONFIG_HAVE_SERIALD_UART -D CONFIG_HAVE_USART -D
#        CONFIG_HAVE_USART_FIFO --preprocess
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\tc\build\sama5d2-xplained\sram\List
#        -lC
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\tc\build\sama5d2-xplained\sram\List
#        --diag_suppress Pa050 -o
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\tc\build\sama5d2-xplained\sram\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-A5 -e --fpu=VFPv4_D16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\tc\..\..\arch\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\tc\..\..\utils\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\tc\..\..\target\common\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\tc\..\..\target\sama5d2\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\tc\..\..\drivers\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\tc\..\..\lib\
#        --section .text=SOFTPACK --cpu_mode arm -On)
#    Locale            =  C
#    List file         =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\tc\build\sama5d2-xplained\sram\List\piobu.lst
#    Object file       =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\tc\build\sama5d2-xplained\sram\Obj\piobu.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\gpio\piobu.c
      1          /* ----------------------------------------------------------------------------
      2           *         SAM Software Package License
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2017, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          /*----------------------------------------------------------------------------
     31           *        Headers
     32           *----------------------------------------------------------------------------*/
     33          
     34          #include <errno.h>
     35          #include <stdbool.h>
     36          
     37          #include "board.h"
     38          #include "gpio/piobu.h"
     39          
     40          /*----------------------------------------------------------------------------
     41           *        Global functions
     42           *----------------------------------------------------------------------------*/
     43          

   \                                 In section SOFTPACK, align 4, keep-with-next
     44          int piobu_configure(const struct _pin* pin_list, int size)
     45          {
   \                     piobu_configure:
   \        0x0   0xE92D'4030        PUSH     {R4,R5,LR}
   \        0x4   0xE1B0'2000        MOVS     R2,R0
     46          	int i, j;
     47          
     48          	for (i = 0; i < size; i++) {
   \        0x8   0xE3A0'C000        MOV      R12,#+0
   \                     ??piobu_configure_0:
   \        0xC   0xE15C'0001        CMP      R12,R1
   \       0x10   0xAA00'002D        BGE      ??piobu_configure_1
     49          		const struct _pin* pin = &pin_list[i];
   \       0x14   0xE1B0'020C        LSLS     R0,R12,#+4
   \       0x18   0xE092'E000        ADDS     LR,R2,R0
     50          		uint32_t piobu = 0;
   \       0x1C   0xE3A0'4000        MOV      R4,#+0
     51          
     52          		switch (pin->type) {
   \       0x20   0xE5DE'0008        LDRB     R0,[LR, #+8]
   \       0x24   0xE350'0007        CMP      R0,#+7
   \       0x28   0x0A00'0004        BEQ      ??piobu_configure_2
   \       0x2C   0x3A00'0007        BCC      ??piobu_configure_3
   \       0x30   0xE350'0009        CMP      R0,#+9
   \       0x34   0x0A00'0002        BEQ      ??piobu_configure_4
   \       0x38   0x3A00'0002        BCC      ??piobu_configure_5
   \       0x3C   0xEA00'0003        B        ??piobu_configure_3
     53          		case PIO_INPUT:
     54          			break;
   \                     ??piobu_configure_2:
   \       0x40   0xEA00'0004        B        ??piobu_configure_6
     55          		case PIO_OUTPUT_1:
     56          			piobu |= SECUMOD_PIOBU_PIO_SOD;
   \                     ??piobu_configure_4:
   \       0x44   0xE394'4F80        ORRS     R4,R4,#0x200
     57          			/* fall-through */
     58          		case PIO_OUTPUT_0:
     59          			piobu |= SECUMOD_PIOBU_OUTPUT_ENABLED_OUTPUT;
   \                     ??piobu_configure_5:
   \       0x48   0xE394'4F40        ORRS     R4,R4,#0x100
     60          			break;
   \       0x4C   0xEA00'0001        B        ??piobu_configure_6
     61          		default:
     62          			return -EINVAL;
   \                     ??piobu_configure_3:
   \       0x50   0xE3E0'001B        MVN      R0,#+27
   \       0x54   0xEA00'001D        B        ??piobu_configure_7
     63          		}
     64          
     65          		switch (pin->attribute) {
   \                     ??piobu_configure_6:
   \       0x58   0xE59E'000C        LDR      R0,[LR, #+12]
   \       0x5C   0xE350'0000        CMP      R0,#+0
   \       0x60   0x0A00'0003        BEQ      ??piobu_configure_8
   \       0x64   0xE350'0002        CMP      R0,#+2
   \       0x68   0x0A00'0004        BEQ      ??piobu_configure_9
   \       0x6C   0x3A00'0001        BCC      ??piobu_configure_10
   \       0x70   0xEA00'0004        B        ??piobu_configure_11
     66          		case PIO_DEFAULT:
     67          			break;
   \                     ??piobu_configure_8:
   \       0x74   0xEA00'0005        B        ??piobu_configure_12
     68          		case PIO_PULLUP:
     69          			piobu |= SECUMOD_PIOBU_PULLUP_PULL_UP;
   \                     ??piobu_configure_10:
   \       0x78   0xE394'4D40        ORRS     R4,R4,#0x1000
     70          			break;
   \       0x7C   0xEA00'0003        B        ??piobu_configure_12
     71          		case PIO_PULLDOWN:
     72          			piobu |= SECUMOD_PIOBU_PULLUP_PULL_DOWN;
   \                     ??piobu_configure_9:
   \       0x80   0xE394'4D80        ORRS     R4,R4,#0x2000
     73          			break;
   \       0x84   0xEA00'0001        B        ??piobu_configure_12
     74          		default:
     75          			return -EINVAL;
   \                     ??piobu_configure_11:
   \       0x88   0xE3E0'001B        MVN      R0,#+27
   \       0x8C   0xEA00'000F        B        ??piobu_configure_7
     76          		}
     77          
     78          		for (j = 0; j < ARRAY_SIZE(SECUMOD->SECUMOD_PIOBU); j++) {
   \                     ??piobu_configure_12:
   \       0x90   0xE3A0'0000        MOV      R0,#+0
   \       0x94   0xE1B0'3000        MOVS     R3,R0
   \                     ??piobu_configure_13:
   \       0x98   0xE353'0008        CMP      R3,#+8
   \       0x9C   0x2A00'0008        BCS      ??piobu_configure_14
     79          			if (pin->mask & (1u << j))
   \       0xA0   0xE59E'0004        LDR      R0,[LR, #+4]
   \       0xA4   0xE3A0'5001        MOV      R5,#+1
   \       0xA8   0xE115'0330        TST      R5,R0, LSR R3
   \       0xAC   0x0A00'0002        BEQ      ??piobu_configure_15
     80          				SECUMOD->SECUMOD_PIOBU[j] = piobu;
   \       0xB0   0x....'....        LDR      R0,??DataTable3  ;; 0xfc040018
   \       0xB4   0xE1B0'5103        LSLS     R5,R3,#+2
   \       0xB8   0xE780'4005        STR      R4,[R0, +R5]
     81          		}
   \                     ??piobu_configure_15:
   \       0xBC   0xE293'3001        ADDS     R3,R3,#+1
   \       0xC0   0xEAFF'FFF4        B        ??piobu_configure_13
     82          	}
   \                     ??piobu_configure_14:
   \       0xC4   0xE29C'C001        ADDS     R12,R12,#+1
   \       0xC8   0xEAFF'FFCF        B        ??piobu_configure_0
     83          
     84          	return 0;
   \                     ??piobu_configure_1:
   \       0xCC   0xE3A0'0000        MOV      R0,#+0
   \                     ??piobu_configure_7:
   \       0xD0   0xE8BD'8030        POP      {R4,R5,PC}       ;; return
     85          }
     86          

   \                                 In section SOFTPACK, align 4, keep-with-next
     87          uint32_t piobu_get(const struct _pin* pin)
     88          {
   \                     piobu_get:
   \        0x0   0xE1B0'1000        MOVS     R1,R0
     89          	uint32_t piobu = 0;
   \        0x4   0xE3A0'0000        MOV      R0,#+0
     90          	int i;
     91          
     92          	for (i = 0; i < ARRAY_SIZE(SECUMOD->SECUMOD_PIOBU); i++) {
   \        0x8   0xE3A0'2000        MOV      R2,#+0
   \                     ??piobu_get_0:
   \        0xC   0xE352'0008        CMP      R2,#+8
   \       0x10   0x2A00'000C        BCS      ??piobu_get_1
     93          		if (pin->mask & (1u << i)) {
   \       0x14   0xE591'3004        LDR      R3,[R1, #+4]
   \       0x18   0xE3A0'C001        MOV      R12,#+1
   \       0x1C   0xE11C'0233        TST      R12,R3, LSR R2
   \       0x20   0x0A00'0006        BEQ      ??piobu_get_2
     94          			if (SECUMOD->SECUMOD_PIOBU[i] & SECUMOD_PIOBU_PIO_PDS)
   \       0x24   0x....'....        LDR      R3,??DataTable3  ;; 0xfc040018
   \       0x28   0xE1B0'C102        LSLS     R12,R2,#+2
   \       0x2C   0xE793'300C        LDR      R3,[R3, +R12]
   \       0x30   0xE313'0E40        TST      R3,#0x400
   \       0x34   0x0A00'0001        BEQ      ??piobu_get_2
     95          				piobu |= (1u << i);
   \       0x38   0xE3A0'3001        MOV      R3,#+1
   \       0x3C   0xE190'0213        ORRS     R0,R0,R3, LSL R2
     96          		}
     97          	}
   \                     ??piobu_get_2:
   \       0x40   0xE292'2001        ADDS     R2,R2,#+1
   \       0x44   0xEAFF'FFF0        B        ??piobu_get_0
     98          
     99          	return piobu;
   \                     ??piobu_get_1:
   \       0x48   0xE12F'FF1E        BX       LR               ;; return
    100          }
    101          

   \                                 In section SOFTPACK, align 4, keep-with-next
    102          void piobu_set(const struct _pin* pin)
    103          {
    104          	int i;
    105          
    106          	for (i = 0; i < ARRAY_SIZE(SECUMOD->SECUMOD_PIOBU); i++) {
   \                     piobu_set:
   \        0x0   0xE3A0'1000        MOV      R1,#+0
   \                     ??piobu_set_0:
   \        0x4   0xE351'0008        CMP      R1,#+8
   \        0x8   0x2A00'000B        BCS      ??piobu_set_1
    107          		if (pin->mask & (1u << i))
   \        0xC   0xE590'2004        LDR      R2,[R0, #+4]
   \       0x10   0xE3A0'3001        MOV      R3,#+1
   \       0x14   0xE113'0132        TST      R3,R2, LSR R1
   \       0x18   0x0A00'0005        BEQ      ??piobu_set_2
    108          			SECUMOD->SECUMOD_PIOBU[i] |= SECUMOD_PIOBU_PIO_SOD;
   \       0x1C   0x....'....        LDR      R2,??DataTable3  ;; 0xfc040018
   \       0x20   0xE1B0'3101        LSLS     R3,R1,#+2
   \       0x24   0xE792'3003        LDR      R3,[R2, +R3]
   \       0x28   0xE393'3F80        ORRS     R3,R3,#0x200
   \       0x2C   0xE1B0'C101        LSLS     R12,R1,#+2
   \       0x30   0xE782'300C        STR      R3,[R2, +R12]
    109          	}
   \                     ??piobu_set_2:
   \       0x34   0xE291'1001        ADDS     R1,R1,#+1
   \       0x38   0xEAFF'FFF1        B        ??piobu_set_0
    110          }
   \                     ??piobu_set_1:
   \       0x3C   0xE12F'FF1E        BX       LR               ;; return
    111          

   \                                 In section SOFTPACK, align 4, keep-with-next
    112          void piobu_clear(const struct _pin* pin)
    113          {
    114          	int i;
    115          
    116          	for (i = 0; i < ARRAY_SIZE(SECUMOD->SECUMOD_PIOBU); i++) {
   \                     piobu_clear:
   \        0x0   0xE3A0'1000        MOV      R1,#+0
   \                     ??piobu_clear_0:
   \        0x4   0xE351'0008        CMP      R1,#+8
   \        0x8   0x2A00'000B        BCS      ??piobu_clear_1
    117          		if (pin->mask & (1u << i))
   \        0xC   0xE590'2004        LDR      R2,[R0, #+4]
   \       0x10   0xE3A0'3001        MOV      R3,#+1
   \       0x14   0xE113'0132        TST      R3,R2, LSR R1
   \       0x18   0x0A00'0005        BEQ      ??piobu_clear_2
    118          			SECUMOD->SECUMOD_PIOBU[i] &= ~SECUMOD_PIOBU_PIO_SOD;
   \       0x1C   0x....'....        LDR      R2,??DataTable3  ;; 0xfc040018
   \       0x20   0xE1B0'3101        LSLS     R3,R1,#+2
   \       0x24   0xE792'3003        LDR      R3,[R2, +R3]
   \       0x28   0xE3D3'3F80        BICS     R3,R3,#0x200
   \       0x2C   0xE1B0'C101        LSLS     R12,R1,#+2
   \       0x30   0xE782'300C        STR      R3,[R2, +R12]
    119          	}
   \                     ??piobu_clear_2:
   \       0x34   0xE291'1001        ADDS     R1,R1,#+1
   \       0x38   0xEAFF'FFF1        B        ??piobu_clear_0
    120          }
   \                     ??piobu_clear_1:
   \       0x3C   0xE12F'FF1E        BX       LR               ;; return

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable3:
   \        0x0   0xFC04'0018        DC32     0xfc040018

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   piobu_clear
      12   piobu_configure
       0   piobu_get
       0   piobu_set


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
      64  piobu_clear
     212  piobu_configure
      76  piobu_get
      64  piobu_set

 
 420 bytes in section SOFTPACK
 
 420 bytes of CODE memory

Errors: none
Warnings: none
