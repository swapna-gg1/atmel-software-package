###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.1.245/W32 for ARM         03/Jun/2020  07:55:11
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\dma\xdmac.c
#    Command line      =
#        -f C:\Users\c40450\AppData\Local\Temp\EW2190.tmp
#        (C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\dma\xdmac.c
#        -D "SOFTPACK_VERSION=\"2.17\"" -D TRACE_LEVEL=5 -D VARIANT_DDRAM -D
#        CONFIG_ARCH_ARMV7A -D CONFIG_ARCH_ARM -D CONFIG_SOC_SAMA5D2 -D
#        CONFIG_CHIP_SAMA5D27 -D CONFIG_PACKAGE_289PIN -D
#        CONFIG_BOARD_SAMA5D27_SOM1_EK -D CONFIG_HAVE_AIC5 -D
#        CONFIG_HAVE_FLEXCOM -D CONFIG_HAVE_PIO4 -D CONFIG_HAVE_PIO4_SECURE -D
#        CONFIG_HAVE_NFC -D CONFIG_HAVE_PIT -D CONFIG_HAVE_SMC -D
#        CONFIG_HAVE_SMC_SCRAMBLING -D CONFIG_HAVE_GMAC_QUEUES -D
#        CONFIG_HAVE_MPDDRC -D CONFIG_HAVE_MPDDRC_DATA_PATH -D
#        CONFIG_HAVE_MPDDRC_IO_CALIBRATION -D CONFIG_HAVE_MPDDRC_DDR2 -D
#        CONFIG_HAVE_MPDDRC_LPDDR2 -D CONFIG_HAVE_MPDDRC_DDR3 -D
#        CONFIG_HAVE_MPDDRC_LPDDR3 -D CONFIG_HAVE_ADC_SETTLING_TIME -D
#        CONFIG_HAVE_ADC_DIFF_INPUT -D CONFIG_HAVE_ADC_SEQ_R2 -D
#        CONFIG_HAVE_PMC_FAST_STARTUP -D CONFIG_HAVE_PMC_GENERATED_CLOCKS -D
#        CONFIG_HAVE_PMC_AUDIO_CLOCK -D CONFIG_HAVE_PMC_PLLADIV2 -D
#        CONFIG_HAVE_PMC_H32MXDIV -D CONFIG_HAVE_PMC_UPLL_BIAS -D
#        CONFIG_HAVE_SCKC -D CONFIG_HAVE_PWMC_DMA -D
#        CONFIG_HAVE_PWMC_SPREAD_SPECTRUM -D CONFIG_HAVE_PWMC_EXTERNAL_TRIGGER
#        -D CONFIG_HAVE_PWMC_FAULT_PROT_HIZ -D CONFIG_HAVE_PWMC_STEPPER_MOTOR
#        -D CONFIG_HAVE_PWMC_CMP_UNIT -D CONFIG_HAVE_PWMC_SYNC_MODE -D
#        CONFIG_HAVE_PWMC_OOV -D CONFIG_HAVE_PWMC_FMODE -D CONFIG_HAVE_PWMC_WP
#        -D CONFIG_HAVE_PWMC_DTIME -D CONFIG_HAVE_PWMC_ELINE -D
#        CONFIG_HAVE_SFRBU -D CONFIG_HAVE_L2CC -D CONFIG_HAVE_SAIC -D
#        CONFIG_HAVE_XDMAC -D CONFIG_HAVE_XDMAC_DATA_WIDTH_DWORD -D
#        CONFIG_HAVE_SECUMOD -D CONFIG_HAVE_SFC -D CONFIG_HAVE_PWMC -D
#        CONFIG_HAVE_SECURE_MATRIX -D CONFIG_HAVE_DDR2_W971GG6SB -D
#        CONFIG_HAVE_RSTC_CONFIGURABLE_USER_RESET -D CONFIG_HAVE_TC_FAULT_MODE
#        -D CONFIG_HAVE_TC_DMA_MODE -D CONFIG_HAVE_RTC_CALIBRATION -D
#        CONFIG_HAVE_RTC_MODE_PERSIAN -D CONFIG_HAVE_RTC_MODE_UTC -D
#        CONFIG_HAVE_RTC_TAMPER -D CONFIG_HAVE_SHDWC -D CONFIG_HAVE_LED -D
#        CONFIG_HAVE_MMU -D CONFIG_HAVE_L1CACHE -D CONFIG_HAVE_L2CACHE -D
#        CONFIG_HAVE_UART -D CONFIG_HAVE_SERIALD_UART -D CONFIG_HAVE_USART -D
#        CONFIG_HAVE_USART_FIFO --preprocess
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\pwm\build\sama5d27-som1-ek\ddram\List
#        -lC
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\pwm\build\sama5d27-som1-ek\ddram\List
#        --diag_suppress Pa050 -o
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\pwm\build\sama5d27-som1-ek\ddram\Obj
#        --debug --endian=little --cpu=Cortex-A5 -e --fpu=VFPv4_D16
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\pwm\..\..\arch\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\pwm\..\..\utils\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\pwm\..\..\target\common\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\pwm\..\..\target\sama5d2\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\pwm\..\..\drivers\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\pwm\..\..\lib\
#        --section .text=SOFTPACK --cpu_mode arm -Oh)
#    Locale            =  C
#    List file         =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\pwm\build\sama5d27-som1-ek\ddram\List\xdmac.lst
#    Object file       =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\pwm\build\sama5d27-som1-ek\ddram\Obj\xdmac.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\dma\xdmac.c
      1          /* ----------------------------------------------------------------------------
      2           *         SAM Software Package License
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2015, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          /**
     31           * \file
     32           *
     33           * Implementation of xDMA controller (XDMAC).
     34           *
     35           */
     36          
     37          /*----------------------------------------------------------------------------
     38           *        Headers
     39           *----------------------------------------------------------------------------*/
     40          
     41          #include "chip.h"
     42          #include "dma/xdmac.h"
     43          
     44          #include <assert.h>
     45          #include "compiler.h"
     46          
     47          /*----------------------------------------------------------------------------
     48           *        Exported functions
     49           *----------------------------------------------------------------------------*/
     50          

   \                                 In section SOFTPACK, align 4, keep-with-next
     51          uint32_t xdmac_get_type(Xdmac *xdmac)
     52          {
     53          	return xdmac->XDMAC_GTYPE;
   \                     xdmac_get_type:
   \        0x0   0xE590'0000        LDR      R0,[R0, #+0]
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
     54          }
     55          

   \                                 In section SOFTPACK, align 4, keep-with-next
     56          uint32_t xdmac_get_config(Xdmac *xdmac)
     57          {
     58          	return xdmac->XDMAC_GCFG;
   \                     xdmac_get_config:
   \        0x0   0xE590'0004        LDR      R0,[R0, #+4]
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
     59          }
     60          

   \                                 In section SOFTPACK, align 4, keep-with-next
     61          uint32_t xdmac_get_arbiter(Xdmac *xdmac)
     62          {
     63          	return xdmac->XDMAC_GWAC;
   \                     xdmac_get_arbiter:
   \        0x0   0xE590'0008        LDR      R0,[R0, #+8]
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
     64          }
     65          

   \                                 In section SOFTPACK, align 4, keep-with-next
     66          void xdmac_enable_global_it(Xdmac *xdmac, uint32_t int_mask)
     67          {
     68          	xdmac->XDMAC_GIE = int_mask;
   \                     xdmac_enable_global_it:
   \        0x0   0xE580'100C        STR      R1,[R0, #+12]
     69          }
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
     70          

   \                                 In section SOFTPACK, align 4, keep-with-next
     71          void xdmac_disable_global_it(Xdmac *xdmac, uint32_t int_mask)
     72          {
     73          	xdmac->XDMAC_GID = int_mask;
   \                     xdmac_disable_global_it:
   \        0x0   0xE580'1010        STR      R1,[R0, #+16]
     74          }
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
     75          

   \                                 In section SOFTPACK, align 4, keep-with-next
     76          uint32_t xdmac_get_global_it_mask(Xdmac *xdmac)
     77          {
     78          	return xdmac->XDMAC_GIM;
   \                     xdmac_get_global_it_mask:
   \        0x0   0xE590'0014        LDR      R0,[R0, #+20]
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
     79          }
     80          

   \                                 In section SOFTPACK, align 4, keep-with-next
     81          uint32_t xdmac_get_global_isr(Xdmac *xdmac)
     82          {
     83          	return xdmac->XDMAC_GIS;
   \                     xdmac_get_global_isr:
   \        0x0   0xE590'0018        LDR      R0,[R0, #+24]
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
     84          }
     85          

   \                                 In section SOFTPACK, align 4, keep-with-next
     86          uint32_t xdmac_get_masked_global_isr(Xdmac *xdmac)
     87          {
     88          	uint32_t mask = xdmac->XDMAC_GIM;
   \                     xdmac_get_masked_global_isr:
   \        0x0   0xE590'1014        LDR      R1,[R0, #+20]
     89          
     90          	return xdmac->XDMAC_GIS & mask;
   \        0x4   0xE590'0018        LDR      R0,[R0, #+24]
   \        0x8   0xE001'0000        AND      R0,R1,R0
   \        0xC   0xE12F'FF1E        BX       LR               ;; return
     91          }
     92          

   \                                 In section SOFTPACK, align 4, keep-with-next
     93          void xdmac_enable_channel(Xdmac *xdmac, uint8_t channel)
     94          {
   \                     xdmac_enable_channel:
   \        0x0   0xE92D'4038        PUSH     {R3-R5,LR}
   \        0x4   0xE1A0'5001        MOV      R5,R1
   \        0x8   0xE1A0'4000        MOV      R4,R0
     95          	assert(channel < XDMAC_CHANNELS);
   \        0xC   0xE355'0010        CMP      R5,#+16
   \       0x10   0x3A00'0004        BCC      ??xdmac_enable_channel_0
   \       0x14   0x....'....        LDR      R0,??DataTable29
   \       0x18   0xE3A0'205F        MOV      R2,#+95
   \       0x1C   0xE280'1050        ADD      R1,R0,#+80
   \       0x20   0x....'....        BL       __aeabi_assert
   \       0x24   0x....'....        BL       __iar_EmptyStepPoint
     96          
     97          	xdmac->XDMAC_GE |= XDMAC_GE_EN0 << channel;
   \                     ??xdmac_enable_channel_0:
   \       0x28   0xE594'001C        LDR      R0,[R4, #+28]
   \       0x2C   0xE3A0'1001        MOV      R1,#+1
   \       0x30   0xE180'1511        ORR      R1,R0,R1, LSL R5
   \       0x34   0xE584'101C        STR      R1,[R4, #+28]
     98          }
   \       0x38   0xE8BD'8031        POP      {R0,R4,R5,PC}    ;; return
     99          

   \                                 In section SOFTPACK, align 4, keep-with-next
    100          void xdmac_enable_channels(Xdmac *xdmac, uint32_t channel_mask)
    101          {
    102          	xdmac->XDMAC_GE = channel_mask;
   \                     xdmac_enable_channels:
   \        0x0   0xE580'101C        STR      R1,[R0, #+28]
    103          }
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
    104          

   \                                 In section SOFTPACK, align 4, keep-with-next
    105          void xdmac_disable_channel(Xdmac *xdmac, uint8_t channel)
    106          {
   \                     xdmac_disable_channel:
   \        0x0   0xE92D'4038        PUSH     {R3-R5,LR}
   \        0x4   0xE1A0'5001        MOV      R5,R1
   \        0x8   0xE1A0'4000        MOV      R4,R0
    107          	assert(channel < XDMAC_CHANNELS);
   \        0xC   0xE355'0010        CMP      R5,#+16
   \       0x10   0x3A00'0004        BCC      ??xdmac_disable_channel_0
   \       0x14   0x....'....        LDR      R0,??DataTable29
   \       0x18   0xE3A0'206B        MOV      R2,#+107
   \       0x1C   0xE280'1050        ADD      R1,R0,#+80
   \       0x20   0x....'....        BL       __aeabi_assert
   \       0x24   0x....'....        BL       __iar_EmptyStepPoint
    108          
    109          	xdmac->XDMAC_GD = XDMAC_GD_DI0 << channel;
   \                     ??xdmac_disable_channel_0:
   \       0x28   0xE3A0'0001        MOV      R0,#+1
   \       0x2C   0xE1A0'0510        LSL      R0,R0,R5
   \       0x30   0xE584'0020        STR      R0,[R4, #+32]
    110          }
   \       0x34   0xE8BD'8031        POP      {R0,R4,R5,PC}    ;; return
    111          

   \                                 In section SOFTPACK, align 4, keep-with-next
    112          void xdmac_suspend_channel(Xdmac *xdmac, uint8_t channel)
    113          {
   \                     xdmac_suspend_channel:
   \        0x0   0xE92D'4038        PUSH     {R3-R5,LR}
   \        0x4   0xE1A0'5001        MOV      R5,R1
   \        0x8   0xE1A0'4000        MOV      R4,R0
    114          	assert(channel < XDMAC_CHANNELS);
   \        0xC   0xE355'0010        CMP      R5,#+16
   \       0x10   0x3A00'0004        BCC      ??xdmac_suspend_channel_0
   \       0x14   0x....'....        LDR      R0,??DataTable29
   \       0x18   0xE3A0'2072        MOV      R2,#+114
   \       0x1C   0xE280'1050        ADD      R1,R0,#+80
   \       0x20   0x....'....        BL       __aeabi_assert
   \       0x24   0x....'....        BL       __iar_EmptyStepPoint
    115          
    116          	xdmac->XDMAC_GRWS = XDMAC_GRWS_RWS0 << channel;
   \                     ??xdmac_suspend_channel_0:
   \       0x28   0xE3A0'0001        MOV      R0,#+1
   \       0x2C   0xE1A0'0510        LSL      R0,R0,R5
   \       0x30   0xE584'0030        STR      R0,[R4, #+48]
    117          }
   \       0x34   0xE8BD'8031        POP      {R0,R4,R5,PC}    ;; return
    118          

   \                                 In section SOFTPACK, align 4, keep-with-next
    119          void xdmac_disable_channels(Xdmac *xdmac, uint32_t channel_mask)
    120          {
    121          	xdmac->XDMAC_GD = channel_mask;
   \                     xdmac_disable_channels:
   \        0x0   0xE580'1020        STR      R1,[R0, #+32]
    122          }
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
    123          

   \                                 In section SOFTPACK, align 4, keep-with-next
    124          uint32_t xdmac_get_global_channel_status(Xdmac *xdmac)
    125          {
    126          	return xdmac->XDMAC_GS;
   \                     xdmac_get_global_channel_status:
   \        0x0   0xE590'0024        LDR      R0,[R0, #+36]
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
    127          }
    128          

   \                                 In section SOFTPACK, align 4, keep-with-next
    129          void xdmac_suspend_read_channel(Xdmac *xdmac, uint8_t channel)
    130          {
   \                     xdmac_suspend_read_channel:
   \        0x0   0xE92D'4038        PUSH     {R3-R5,LR}
   \        0x4   0xE1A0'5001        MOV      R5,R1
   \        0x8   0xE1A0'4000        MOV      R4,R0
    131          	assert(channel < XDMAC_CHANNELS);
   \        0xC   0xE355'0010        CMP      R5,#+16
   \       0x10   0x3A00'0004        BCC      ??xdmac_suspend_read_channel_0
   \       0x14   0x....'....        LDR      R0,??DataTable29
   \       0x18   0xE3A0'2083        MOV      R2,#+131
   \       0x1C   0xE280'1050        ADD      R1,R0,#+80
   \       0x20   0x....'....        BL       __aeabi_assert
   \       0x24   0x....'....        BL       __iar_EmptyStepPoint
    132          
    133          	xdmac->XDMAC_GRS |= XDMAC_GRS_RS0 << channel;
   \                     ??xdmac_suspend_read_channel_0:
   \       0x28   0xE594'0028        LDR      R0,[R4, #+40]
   \       0x2C   0xE3A0'1001        MOV      R1,#+1
   \       0x30   0xE180'1511        ORR      R1,R0,R1, LSL R5
   \       0x34   0xE584'1028        STR      R1,[R4, #+40]
    134          }
   \       0x38   0xE8BD'8031        POP      {R0,R4,R5,PC}    ;; return
    135          

   \                                 In section SOFTPACK, align 4, keep-with-next
    136          void xdmac_suspend_write_channel(Xdmac *xdmac, uint8_t channel)
    137          {
   \                     xdmac_suspend_write_channel:
   \        0x0   0xE92D'4038        PUSH     {R3-R5,LR}
   \        0x4   0xE1A0'5001        MOV      R5,R1
   \        0x8   0xE1A0'4000        MOV      R4,R0
    138          	assert(channel < XDMAC_CHANNELS);
   \        0xC   0xE355'0010        CMP      R5,#+16
   \       0x10   0x3A00'0004        BCC      ??xdmac_suspend_write_channel_0
   \       0x14   0x....'....        LDR      R0,??DataTable29
   \       0x18   0xE3A0'208A        MOV      R2,#+138
   \       0x1C   0xE280'1050        ADD      R1,R0,#+80
   \       0x20   0x....'....        BL       __aeabi_assert
   \       0x24   0x....'....        BL       __iar_EmptyStepPoint
    139          
    140          	xdmac->XDMAC_GWS |= XDMAC_GWS_WS0 << channel;
   \                     ??xdmac_suspend_write_channel_0:
   \       0x28   0xE594'002C        LDR      R0,[R4, #+44]
   \       0x2C   0xE3A0'1001        MOV      R1,#+1
   \       0x30   0xE180'1511        ORR      R1,R0,R1, LSL R5
   \       0x34   0xE584'102C        STR      R1,[R4, #+44]
    141          }
   \       0x38   0xE8BD'8031        POP      {R0,R4,R5,PC}    ;; return
    142          

   \                                 In section SOFTPACK, align 4, keep-with-next
    143          void xdmac_suspend_read_write_channel(Xdmac *xdmac, uint8_t channel)
    144          {
   \                     xdmac_suspend_read_write_channel:
   \        0x0   0xE92D'4038        PUSH     {R3-R5,LR}
   \        0x4   0xE1A0'5001        MOV      R5,R1
   \        0x8   0xE1A0'4000        MOV      R4,R0
    145          	assert(channel < XDMAC_CHANNELS);
   \        0xC   0xE355'0010        CMP      R5,#+16
   \       0x10   0x3A00'0004        BCC      ??xdmac_suspend_read_write_channel_0
   \       0x14   0x....'....        LDR      R0,??DataTable29
   \       0x18   0xE3A0'2091        MOV      R2,#+145
   \       0x1C   0xE280'1050        ADD      R1,R0,#+80
   \       0x20   0x....'....        BL       __aeabi_assert
   \       0x24   0x....'....        BL       __iar_EmptyStepPoint
    146          
    147          	xdmac->XDMAC_GRWS |= XDMAC_GRWS_RWS0 << channel;
   \                     ??xdmac_suspend_read_write_channel_0:
   \       0x28   0xE594'0030        LDR      R0,[R4, #+48]
   \       0x2C   0xE3A0'1001        MOV      R1,#+1
   \       0x30   0xE180'1511        ORR      R1,R0,R1, LSL R5
   \       0x34   0xE584'1030        STR      R1,[R4, #+48]
    148          }
   \       0x38   0xE8BD'8031        POP      {R0,R4,R5,PC}    ;; return
    149          

   \                                 In section SOFTPACK, align 4, keep-with-next
    150          void xdmac_resume_read_write_channel(Xdmac *xdmac, uint8_t channel)
    151          {
   \                     xdmac_resume_read_write_channel:
   \        0x0   0xE92D'4038        PUSH     {R3-R5,LR}
   \        0x4   0xE1A0'5001        MOV      R5,R1
   \        0x8   0xE1A0'4000        MOV      R4,R0
    152          	assert(channel < XDMAC_CHANNELS);
   \        0xC   0xE355'0010        CMP      R5,#+16
   \       0x10   0x3A00'0004        BCC      ??xdmac_resume_read_write_channel_0
   \       0x14   0x....'....        LDR      R0,??DataTable29
   \       0x18   0xE3A0'2098        MOV      R2,#+152
   \       0x1C   0xE280'1050        ADD      R1,R0,#+80
   \       0x20   0x....'....        BL       __aeabi_assert
   \       0x24   0x....'....        BL       __iar_EmptyStepPoint
    153          
    154          	xdmac->XDMAC_GRWR |= XDMAC_GRWR_RWR0 << channel;
   \                     ??xdmac_resume_read_write_channel_0:
   \       0x28   0xE594'0034        LDR      R0,[R4, #+52]
   \       0x2C   0xE3A0'1001        MOV      R1,#+1
   \       0x30   0xE180'1511        ORR      R1,R0,R1, LSL R5
   \       0x34   0xE584'1034        STR      R1,[R4, #+52]
    155          }
   \       0x38   0xE8BD'8031        POP      {R0,R4,R5,PC}    ;; return
    156          

   \                                 In section SOFTPACK, align 4, keep-with-next
    157          void xdmac_software_transfer_request(Xdmac *xdmac, uint8_t channel)
    158          {
   \                     xdmac_software_transfer_request:
   \        0x0   0xE92D'4038        PUSH     {R3-R5,LR}
   \        0x4   0xE1A0'5001        MOV      R5,R1
   \        0x8   0xE1A0'4000        MOV      R4,R0
    159          	assert(channel < XDMAC_CHANNELS);
   \        0xC   0xE355'0010        CMP      R5,#+16
   \       0x10   0x3A00'0004        BCC      ??xdmac_software_transfer_request_0
   \       0x14   0x....'....        LDR      R0,??DataTable29
   \       0x18   0xE3A0'209F        MOV      R2,#+159
   \       0x1C   0xE280'1050        ADD      R1,R0,#+80
   \       0x20   0x....'....        BL       __aeabi_assert
   \       0x24   0x....'....        BL       __iar_EmptyStepPoint
    160          
    161          	xdmac->XDMAC_GSWR |= (XDMAC_GSWR_SWREQ0 << channel);
   \                     ??xdmac_software_transfer_request_0:
   \       0x28   0xE594'0038        LDR      R0,[R4, #+56]
   \       0x2C   0xE3A0'1001        MOV      R1,#+1
   \       0x30   0xE180'1511        ORR      R1,R0,R1, LSL R5
   \       0x34   0xE584'1038        STR      R1,[R4, #+56]
    162          }
   \       0x38   0xE8BD'8031        POP      {R0,R4,R5,PC}    ;; return
    163          

   \                                 In section SOFTPACK, align 4, keep-with-next
    164          uint32_t xdmac_get_software_transfer_status(Xdmac *xdmac)
    165          {
    166          	return xdmac->XDMAC_GSWS;
   \                     xdmac_get_software_transfer_status:
   \        0x0   0xE590'003C        LDR      R0,[R0, #+60]
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
    167          }
    168          

   \                                 In section SOFTPACK, align 4, keep-with-next
    169          void xdmac_software_flush_request(Xdmac *xdmac, uint8_t channel)
    170          {
   \                     xdmac_software_flush_request:
   \        0x0   0xE92D'4038        PUSH     {R3-R5,LR}
   \        0x4   0xE1A0'5001        MOV      R5,R1
   \        0x8   0xE1A0'4000        MOV      R4,R0
    171          	assert(channel < XDMAC_CHANNELS);
   \        0xC   0xE355'0010        CMP      R5,#+16
   \       0x10   0x3A00'0004        BCC      ??xdmac_software_flush_request_0
   \       0x14   0x....'....        LDR      R0,??DataTable29
   \       0x18   0xE3A0'20AB        MOV      R2,#+171
   \       0x1C   0xE280'1050        ADD      R1,R0,#+80
   \       0x20   0x....'....        BL       __aeabi_assert
   \       0x24   0x....'....        BL       __iar_EmptyStepPoint
    172          
    173          	xdmac->XDMAC_GSWF |= XDMAC_GSWF_SWF0 << channel;
   \                     ??xdmac_software_flush_request_0:
   \       0x28   0xE594'0040        LDR      R0,[R4, #+64]
   \       0x2C   0xE3A0'1001        MOV      R1,#+1
   \       0x30   0xE180'1511        ORR      R1,R0,R1, LSL R5
   \       0x34   0xE584'1040        STR      R1,[R4, #+64]
    174          }
   \       0x38   0xE8BD'8031        POP      {R0,R4,R5,PC}    ;; return
    175          

   \                                 In section SOFTPACK, align 4, keep-with-next
    176          void xdmac_enable_channel_it(Xdmac *xdmac, uint8_t channel, uint32_t int_mask)
    177          {
   \                     xdmac_enable_channel_it:
   \        0x0   0xE92D'4070        PUSH     {R4-R6,LR}
   \        0x4   0xE1A0'5001        MOV      R5,R1
   \        0x8   0xE1A0'4000        MOV      R4,R0
    178          	assert(channel < XDMAC_CHANNELS);
   \        0xC   0xE355'0010        CMP      R5,#+16
   \       0x10   0xE1A0'6002        MOV      R6,R2
   \       0x14   0x3A00'0004        BCC      ??xdmac_enable_channel_it_0
   \       0x18   0x....'....        LDR      R0,??DataTable29
   \       0x1C   0xE3A0'20B2        MOV      R2,#+178
   \       0x20   0xE280'1050        ADD      R1,R0,#+80
   \       0x24   0x....'....        BL       __aeabi_assert
   \       0x28   0x....'....        BL       __iar_EmptyStepPoint
    179          
    180          	xdmac->XDMAC_CH[channel].XDMAC_CIE = int_mask;
   \                     ??xdmac_enable_channel_it_0:
   \       0x2C   0xE084'0305        ADD      R0,R4,R5, LSL #+6
   \       0x30   0xE580'6050        STR      R6,[R0, #+80]
    181          }
   \       0x34   0xE8BD'8070        POP      {R4-R6,PC}       ;; return
    182          

   \                                 In section SOFTPACK, align 4, keep-with-next
    183          void xdmac_disable_channel_it(Xdmac *xdmac, uint8_t channel, uint32_t int_mask)
    184          {
   \                     xdmac_disable_channel_it:
   \        0x0   0xE92D'4070        PUSH     {R4-R6,LR}
   \        0x4   0xE1A0'5001        MOV      R5,R1
   \        0x8   0xE1A0'4000        MOV      R4,R0
    185          	assert(channel < XDMAC_CHANNELS);
   \        0xC   0xE355'0010        CMP      R5,#+16
   \       0x10   0xE1A0'6002        MOV      R6,R2
   \       0x14   0x3A00'0004        BCC      ??xdmac_disable_channel_it_0
   \       0x18   0x....'....        LDR      R0,??DataTable29
   \       0x1C   0xE3A0'20B9        MOV      R2,#+185
   \       0x20   0xE280'1050        ADD      R1,R0,#+80
   \       0x24   0x....'....        BL       __aeabi_assert
   \       0x28   0x....'....        BL       __iar_EmptyStepPoint
    186          
    187          	xdmac->XDMAC_CH[channel].XDMAC_CID = int_mask;
   \                     ??xdmac_disable_channel_it_0:
   \       0x2C   0xE084'0305        ADD      R0,R4,R5, LSL #+6
   \       0x30   0xE580'6054        STR      R6,[R0, #+84]
    188          }
   \       0x34   0xE8BD'8070        POP      {R4-R6,PC}       ;; return
    189          

   \                                 In section SOFTPACK, align 4, keep-with-next
    190          uint32_t xdmac_get_channel_it_mask(Xdmac *xdmac, uint8_t channel)
    191          {
   \                     xdmac_get_channel_it_mask:
   \        0x0   0xE92D'4038        PUSH     {R3-R5,LR}
   \        0x4   0xE1A0'5001        MOV      R5,R1
   \        0x8   0xE1A0'4000        MOV      R4,R0
    192          	assert(channel < XDMAC_CHANNELS);
   \        0xC   0xE355'0010        CMP      R5,#+16
   \       0x10   0x3A00'0004        BCC      ??xdmac_get_channel_it_mask_0
   \       0x14   0x....'....        LDR      R0,??DataTable29
   \       0x18   0xE3A0'20C0        MOV      R2,#+192
   \       0x1C   0xE280'1050        ADD      R1,R0,#+80
   \       0x20   0x....'....        BL       __aeabi_assert
   \       0x24   0x....'....        BL       __iar_EmptyStepPoint
    193          
    194          	return xdmac->XDMAC_CH[channel].XDMAC_CIM;
   \                     ??xdmac_get_channel_it_mask_0:
   \       0x28   0xE084'0305        ADD      R0,R4,R5, LSL #+6
   \       0x2C   0xE590'0058        LDR      R0,[R0, #+88]
   \       0x30   0xE8BD'8032        POP      {R1,R4,R5,PC}    ;; return
    195          }
    196          

   \                                 In section SOFTPACK, align 4, keep-with-next
    197          uint32_t xdmac_get_channel_isr(Xdmac *xdmac, uint8_t channel)
    198          {
   \                     xdmac_get_channel_isr:
   \        0x0   0xE92D'4038        PUSH     {R3-R5,LR}
   \        0x4   0xE1A0'5001        MOV      R5,R1
   \        0x8   0xE1A0'4000        MOV      R4,R0
    199          	assert(channel < XDMAC_CHANNELS);
   \        0xC   0xE355'0010        CMP      R5,#+16
   \       0x10   0x3A00'0004        BCC      ??xdmac_get_channel_isr_0
   \       0x14   0x....'....        LDR      R0,??DataTable29
   \       0x18   0xE3A0'20C7        MOV      R2,#+199
   \       0x1C   0xE280'1050        ADD      R1,R0,#+80
   \       0x20   0x....'....        BL       __aeabi_assert
   \       0x24   0x....'....        BL       __iar_EmptyStepPoint
    200          
    201          	return xdmac->XDMAC_CH[channel].XDMAC_CIS;
   \                     ??xdmac_get_channel_isr_0:
   \       0x28   0xE084'0305        ADD      R0,R4,R5, LSL #+6
   \       0x2C   0xE590'005C        LDR      R0,[R0, #+92]
   \       0x30   0xE8BD'8032        POP      {R1,R4,R5,PC}    ;; return
    202          }
    203          

   \                                 In section SOFTPACK, align 4, keep-with-next
    204          uint32_t xdmac_get_masked_channel_isr(Xdmac *xdmac, uint8_t channel)
    205          {
   \                     xdmac_get_masked_channel_isr:
   \        0x0   0xE92D'4038        PUSH     {R3-R5,LR}
   \        0x4   0xE1A0'5001        MOV      R5,R1
   \        0x8   0xE1A0'4000        MOV      R4,R0
    206          	assert(channel < XDMAC_CHANNELS);
   \        0xC   0xE355'0010        CMP      R5,#+16
   \       0x10   0x3A00'0004        BCC      ??xdmac_get_masked_channel_isr_0
   \       0x14   0x....'....        LDR      R0,??DataTable29
   \       0x18   0xE3A0'20CE        MOV      R2,#+206
   \       0x1C   0xE280'1050        ADD      R1,R0,#+80
   \       0x20   0x....'....        BL       __aeabi_assert
   \       0x24   0x....'....        BL       __iar_EmptyStepPoint
    207          
    208          	uint32_t mask = xdmac->XDMAC_CH[channel].XDMAC_CIM;
   \                     ??xdmac_get_masked_channel_isr_0:
   \       0x28   0xE084'0305        ADD      R0,R4,R5, LSL #+6
   \       0x2C   0xE590'1058        LDR      R1,[R0, #+88]
    209          
    210          	return xdmac->XDMAC_CH[channel].XDMAC_CIS & mask;
   \       0x30   0xE590'005C        LDR      R0,[R0, #+92]
   \       0x34   0xE001'0000        AND      R0,R1,R0
   \       0x38   0xE8BD'8032        POP      {R1,R4,R5,PC}    ;; return
    211          }
    212          

   \                                 In section SOFTPACK, align 4, keep-with-next
    213          void xdmac_set_src_addr(Xdmac *xdmac, uint8_t channel, const void *addr)
    214          {
   \                     xdmac_set_src_addr:
   \        0x0   0xE92D'4070        PUSH     {R4-R6,LR}
   \        0x4   0xE1A0'5001        MOV      R5,R1
   \        0x8   0xE1A0'4000        MOV      R4,R0
    215          	assert(channel < XDMAC_CHANNELS);
   \        0xC   0xE355'0010        CMP      R5,#+16
   \       0x10   0xE1A0'6002        MOV      R6,R2
   \       0x14   0x3A00'0004        BCC      ??xdmac_set_src_addr_0
   \       0x18   0x....'....        LDR      R0,??DataTable29
   \       0x1C   0xE3A0'20D7        MOV      R2,#+215
   \       0x20   0xE280'1050        ADD      R1,R0,#+80
   \       0x24   0x....'....        BL       __aeabi_assert
   \       0x28   0x....'....        BL       __iar_EmptyStepPoint
    216          
    217          	xdmac->XDMAC_CH[channel].XDMAC_CSA = (uint32_t)addr;
   \                     ??xdmac_set_src_addr_0:
   \       0x2C   0xE084'0305        ADD      R0,R4,R5, LSL #+6
   \       0x30   0xE580'6060        STR      R6,[R0, #+96]
    218          }
   \       0x34   0xE8BD'8070        POP      {R4-R6,PC}       ;; return
    219          

   \                                 In section SOFTPACK, align 4, keep-with-next
    220          void xdmac_set_dest_addr(Xdmac *xdmac, uint8_t channel, void *addr)
    221          {
   \                     xdmac_set_dest_addr:
   \        0x0   0xE92D'4070        PUSH     {R4-R6,LR}
   \        0x4   0xE1A0'5001        MOV      R5,R1
   \        0x8   0xE1A0'4000        MOV      R4,R0
    222          	assert(channel < XDMAC_CHANNELS);
   \        0xC   0xE355'0010        CMP      R5,#+16
   \       0x10   0xE1A0'6002        MOV      R6,R2
   \       0x14   0x3A00'0004        BCC      ??xdmac_set_dest_addr_0
   \       0x18   0x....'....        LDR      R0,??DataTable29
   \       0x1C   0xE3A0'20DE        MOV      R2,#+222
   \       0x20   0xE280'1050        ADD      R1,R0,#+80
   \       0x24   0x....'....        BL       __aeabi_assert
   \       0x28   0x....'....        BL       __iar_EmptyStepPoint
    223          
    224          	xdmac->XDMAC_CH[channel].XDMAC_CDA = (uint32_t)addr;
   \                     ??xdmac_set_dest_addr_0:
   \       0x2C   0xE084'0305        ADD      R0,R4,R5, LSL #+6
   \       0x30   0xE580'6064        STR      R6,[R0, #+100]
    225          }
   \       0x34   0xE8BD'8070        POP      {R4-R6,PC}       ;; return
    226          

   \                                 In section SOFTPACK, align 4, keep-with-next
    227          void xdmac_set_descriptor_addr(Xdmac *xdmac, uint8_t channel, void *addr,
    228          		uint32_t ndaif)
    229          {
   \                     xdmac_set_descriptor_addr:
   \        0x0   0xE92D'40F8        PUSH     {R3-R7,LR}
   \        0x4   0xE1A0'5001        MOV      R5,R1
   \        0x8   0xE1A0'4000        MOV      R4,R0
    230          	assert(channel < XDMAC_CHANNELS);
   \        0xC   0xE355'0010        CMP      R5,#+16
   \       0x10   0xE1A0'6002        MOV      R6,R2
   \       0x14   0xE1A0'7003        MOV      R7,R3
   \       0x18   0x3A00'0004        BCC      ??xdmac_set_descriptor_addr_0
   \       0x1C   0x....'....        LDR      R0,??DataTable29
   \       0x20   0xE3A0'20E6        MOV      R2,#+230
   \       0x24   0xE280'1050        ADD      R1,R0,#+80
   \       0x28   0x....'....        BL       __aeabi_assert
   \       0x2C   0x....'....        BL       __iar_EmptyStepPoint
    231          
    232          	xdmac->XDMAC_CH[channel].XDMAC_CNDA = (((uint32_t)addr) & 0xFFFFFFFC) | ndaif;
   \                     ??xdmac_set_descriptor_addr_0:
   \       0x30   0xE1A0'0126        LSR      R0,R6,#+2
   \       0x34   0xE084'1305        ADD      R1,R4,R5, LSL #+6
   \       0x38   0xE187'0100        ORR      R0,R7,R0, LSL #+2
   \       0x3C   0xE581'0068        STR      R0,[R1, #+104]
    233          }
   \       0x40   0xE8BD'80F1        POP      {R0,R4-R7,PC}    ;; return
    234          

   \                                 In section SOFTPACK, align 4, keep-with-next
    235          uint32_t xdmac_get_descriptor_addr(Xdmac *xdmac, uint8_t channel)
    236          {
   \                     xdmac_get_descriptor_addr:
   \        0x0   0xE92D'4038        PUSH     {R3-R5,LR}
   \        0x4   0xE1A0'5001        MOV      R5,R1
   \        0x8   0xE1A0'4000        MOV      R4,R0
    237          	assert(channel < XDMAC_CHANNELS);
   \        0xC   0xE355'0010        CMP      R5,#+16
   \       0x10   0x3A00'0004        BCC      ??xdmac_get_descriptor_addr_0
   \       0x14   0x....'....        LDR      R0,??DataTable29
   \       0x18   0xE3A0'20ED        MOV      R2,#+237
   \       0x1C   0xE280'1050        ADD      R1,R0,#+80
   \       0x20   0x....'....        BL       __aeabi_assert
   \       0x24   0x....'....        BL       __iar_EmptyStepPoint
    238          
    239          	return xdmac->XDMAC_CH[channel].XDMAC_CNDA & (~XDMAC_CNDA_NDAIF);
   \                     ??xdmac_get_descriptor_addr_0:
   \       0x28   0xE084'0305        ADD      R0,R4,R5, LSL #+6
   \       0x2C   0xE590'1068        LDR      R1,[R0, #+104]
   \       0x30   0xE3C1'0001        BIC      R0,R1,#0x1
   \       0x34   0xE8BD'8032        POP      {R1,R4,R5,PC}    ;; return
    240          }
    241          

   \                                 In section SOFTPACK, align 4, keep-with-next
    242          void xdmac_set_descriptor_control(Xdmac *xdmac, uint8_t channel,
    243          		uint32_t config)
    244          {
   \                     xdmac_set_descriptor_control:
   \        0x0   0xE92D'4070        PUSH     {R4-R6,LR}
   \        0x4   0xE1A0'5001        MOV      R5,R1
   \        0x8   0xE1A0'4000        MOV      R4,R0
    245          	assert(channel < XDMAC_CHANNELS);
   \        0xC   0xE355'0010        CMP      R5,#+16
   \       0x10   0xE1A0'6002        MOV      R6,R2
   \       0x14   0x3A00'0004        BCC      ??xdmac_set_descriptor_control_0
   \       0x18   0x....'....        LDR      R0,??DataTable29
   \       0x1C   0xE3A0'20F5        MOV      R2,#+245
   \       0x20   0xE280'1050        ADD      R1,R0,#+80
   \       0x24   0x....'....        BL       __aeabi_assert
   \       0x28   0x....'....        BL       __iar_EmptyStepPoint
    246          
    247          	xdmac->XDMAC_CH[channel].XDMAC_CNDC = config;
   \                     ??xdmac_set_descriptor_control_0:
   \       0x2C   0xE084'0305        ADD      R0,R4,R5, LSL #+6
   \       0x30   0xE580'606C        STR      R6,[R0, #+108]
    248          }
   \       0x34   0xE8BD'8070        POP      {R4-R6,PC}       ;; return
    249          

   \                                 In section SOFTPACK, align 4, keep-with-next
    250          void xdmac_set_microblock_control(Xdmac *xdmac, uint8_t channel,
    251          		uint32_t ublen)
    252          {
   \                     xdmac_set_microblock_control:
   \        0x0   0xE92D'4070        PUSH     {R4-R6,LR}
   \        0x4   0xE1A0'5001        MOV      R5,R1
   \        0x8   0xE1A0'4000        MOV      R4,R0
    253          	assert(channel < XDMAC_CHANNELS);
   \        0xC   0xE355'0010        CMP      R5,#+16
   \       0x10   0xE1A0'6002        MOV      R6,R2
   \       0x14   0x3A00'0004        BCC      ??xdmac_set_microblock_control_0
   \       0x18   0x....'....        LDR      R0,??DataTable29
   \       0x1C   0xE3A0'20FD        MOV      R2,#+253
   \       0x20   0xE280'1050        ADD      R1,R0,#+80
   \       0x24   0x....'....        BL       __aeabi_assert
   \       0x28   0x....'....        BL       __iar_EmptyStepPoint
    254          
    255          	xdmac->XDMAC_CH[channel].XDMAC_CUBC = ublen;
   \                     ??xdmac_set_microblock_control_0:
   \       0x2C   0xE084'0305        ADD      R0,R4,R5, LSL #+6
   \       0x30   0xE580'6070        STR      R6,[R0, #+112]
    256          }
   \       0x34   0xE8BD'8070        POP      {R4-R6,PC}       ;; return
    257          

   \                                 In section SOFTPACK, align 4, keep-with-next
    258          uint32_t xdmac_get_microblock_control(Xdmac *xdmac, uint8_t channel)
    259          {
   \                     xdmac_get_microblock_control:
   \        0x0   0xE92D'4038        PUSH     {R3-R5,LR}
   \        0x4   0xE1A0'5001        MOV      R5,R1
   \        0x8   0xE1A0'4000        MOV      R4,R0
    260          	assert(channel < XDMAC_CHANNELS);
   \        0xC   0xE355'0010        CMP      R5,#+16
   \       0x10   0x3A00'0004        BCC      ??xdmac_get_microblock_control_0
   \       0x14   0x....'....        LDR      R0,??DataTable29
   \       0x18   0xE3A0'2F41        MOV      R2,#+260
   \       0x1C   0xE280'1050        ADD      R1,R0,#+80
   \       0x20   0x....'....        BL       __aeabi_assert
   \       0x24   0x....'....        BL       __iar_EmptyStepPoint
    261          
    262          	return (xdmac->XDMAC_CH[channel].XDMAC_CUBC & XDMAC_CUBC_UBLEN_Msk);
   \                     ??xdmac_get_microblock_control_0:
   \       0x28   0xE084'0305        ADD      R0,R4,R5, LSL #+6
   \       0x2C   0xE590'1070        LDR      R1,[R0, #+112]
   \       0x30   0xE3C1'04FF        BIC      R0,R1,#0xFF000000
   \       0x34   0xE8BD'8032        POP      {R1,R4,R5,PC}    ;; return
    263          }
    264          

   \                                 In section SOFTPACK, align 4, keep-with-next
    265          void xdmac_set_block_control(Xdmac *xdmac, uint8_t channel, uint32_t blen)
    266          {
   \                     xdmac_set_block_control:
   \        0x0   0xE92D'4070        PUSH     {R4-R6,LR}
   \        0x4   0xE1A0'5001        MOV      R5,R1
   \        0x8   0xE1A0'4000        MOV      R4,R0
    267          	assert(channel < XDMAC_CHANNELS);
   \        0xC   0xE355'0010        CMP      R5,#+16
   \       0x10   0xE1A0'6002        MOV      R6,R2
   \       0x14   0x3A00'0004        BCC      ??xdmac_set_block_control_0
   \       0x18   0x....'....        LDR      R0,??DataTable29
   \       0x1C   0xE300'210B        MOVW     R2,#+267
   \       0x20   0xE280'1050        ADD      R1,R0,#+80
   \       0x24   0x....'....        BL       __aeabi_assert
   \       0x28   0x....'....        BL       __iar_EmptyStepPoint
    268          
    269          	xdmac->XDMAC_CH[channel].XDMAC_CBC = blen;
   \                     ??xdmac_set_block_control_0:
   \       0x2C   0xE084'0305        ADD      R0,R4,R5, LSL #+6
   \       0x30   0xE580'6074        STR      R6,[R0, #+116]
    270          }
   \       0x34   0xE8BD'8070        POP      {R4-R6,PC}       ;; return
    271          

   \                                 In section SOFTPACK, align 4, keep-with-next
    272          void xdmac_set_channel_config(Xdmac *xdmac, uint8_t channel, uint32_t config)
    273          {
   \                     xdmac_set_channel_config:
   \        0x0   0xE92D'4070        PUSH     {R4-R6,LR}
   \        0x4   0xE1A0'5001        MOV      R5,R1
   \        0x8   0xE1A0'4000        MOV      R4,R0
    274          	assert(channel < XDMAC_CHANNELS);
   \        0xC   0xE355'0010        CMP      R5,#+16
   \       0x10   0xE1A0'6002        MOV      R6,R2
   \       0x14   0x3A00'0004        BCC      ??xdmac_set_channel_config_0
   \       0x18   0x....'....        LDR      R0,??DataTable29
   \       0x1C   0xE300'2112        MOVW     R2,#+274
   \       0x20   0xE280'1050        ADD      R1,R0,#+80
   \       0x24   0x....'....        BL       __aeabi_assert
   \       0x28   0x....'....        BL       __iar_EmptyStepPoint
    275          
    276          	xdmac->XDMAC_CH[channel].XDMAC_CC = config;
   \                     ??xdmac_set_channel_config_0:
   \       0x2C   0xE084'0305        ADD      R0,R4,R5, LSL #+6
   \       0x30   0xE580'6078        STR      R6,[R0, #+120]
    277          }
   \       0x34   0xE8BD'8070        POP      {R4-R6,PC}       ;; return
    278          

   \                                 In section SOFTPACK, align 4, keep-with-next
    279          uint32_t xdmac_get_channel_config(Xdmac *xdmac, uint8_t channel)
    280          {
   \                     xdmac_get_channel_config:
   \        0x0   0xE92D'4038        PUSH     {R3-R5,LR}
   \        0x4   0xE1A0'5001        MOV      R5,R1
   \        0x8   0xE1A0'4000        MOV      R4,R0
    281          	assert(channel < XDMAC_CHANNELS);
   \        0xC   0xE355'0010        CMP      R5,#+16
   \       0x10   0x3A00'0004        BCC      ??xdmac_get_channel_config_0
   \       0x14   0x....'....        LDR      R0,??DataTable29
   \       0x18   0xE300'2119        MOVW     R2,#+281
   \       0x1C   0xE280'1050        ADD      R1,R0,#+80
   \       0x20   0x....'....        BL       __aeabi_assert
   \       0x24   0x....'....        BL       __iar_EmptyStepPoint
    282          
    283          	return xdmac->XDMAC_CH[channel].XDMAC_CC;
   \                     ??xdmac_get_channel_config_0:
   \       0x28   0xE084'0305        ADD      R0,R4,R5, LSL #+6
   \       0x2C   0xE590'0078        LDR      R0,[R0, #+120]
   \       0x30   0xE8BD'8032        POP      {R1,R4,R5,PC}    ;; return
    284          }
    285          

   \                                 In section SOFTPACK, align 4, keep-with-next
    286          void xdmac_set_data_stride_mem_pattern(Xdmac *xdmac, uint8_t channel,
    287          			       uint32_t dds_msp)
    288          {
   \                     xdmac_set_data_stride_mem_pattern:
   \        0x0   0xE92D'4070        PUSH     {R4-R6,LR}
   \        0x4   0xE1A0'5001        MOV      R5,R1
   \        0x8   0xE1A0'4000        MOV      R4,R0
    289          	assert(channel < XDMAC_CHANNELS);
   \        0xC   0xE355'0010        CMP      R5,#+16
   \       0x10   0xE1A0'6002        MOV      R6,R2
   \       0x14   0x3A00'0004        BCC      ??xdmac_set_data_stride_mem_pattern_0
   \       0x18   0x....'....        LDR      R0,??DataTable29
   \       0x1C   0xE300'2121        MOVW     R2,#+289
   \       0x20   0xE280'1050        ADD      R1,R0,#+80
   \       0x24   0x....'....        BL       __aeabi_assert
   \       0x28   0x....'....        BL       __iar_EmptyStepPoint
    290          
    291          	xdmac->XDMAC_CH[channel].XDMAC_CDS_MSP = dds_msp;
   \                     ??xdmac_set_data_stride_mem_pattern_0:
   \       0x2C   0xE084'0305        ADD      R0,R4,R5, LSL #+6
   \       0x30   0xE580'607C        STR      R6,[R0, #+124]
    292          }
   \       0x34   0xE8BD'8070        POP      {R4-R6,PC}       ;; return
    293          

   \                                 In section SOFTPACK, align 4, keep-with-next
    294          void xdmac_set_src_microblock_stride(Xdmac *xdmac, uint8_t channel,
    295          		uint32_t subs)
    296          {
   \                     xdmac_set_src_microblock_stride:
   \        0x0   0xE92D'4070        PUSH     {R4-R6,LR}
   \        0x4   0xE1A0'5001        MOV      R5,R1
   \        0x8   0xE1A0'4000        MOV      R4,R0
    297          	assert(channel < XDMAC_CHANNELS);
   \        0xC   0xE355'0010        CMP      R5,#+16
   \       0x10   0xE1A0'6002        MOV      R6,R2
   \       0x14   0x3A00'0004        BCC      ??xdmac_set_src_microblock_stride_0
   \       0x18   0x....'....        LDR      R0,??DataTable29
   \       0x1C   0xE300'2129        MOVW     R2,#+297
   \       0x20   0xE280'1050        ADD      R1,R0,#+80
   \       0x24   0x....'....        BL       __aeabi_assert
   \       0x28   0x....'....        BL       __iar_EmptyStepPoint
    298          
    299          	xdmac->XDMAC_CH[channel].XDMAC_CSUS = subs;
   \                     ??xdmac_set_src_microblock_stride_0:
   \       0x2C   0xE084'0305        ADD      R0,R4,R5, LSL #+6
   \       0x30   0xE580'6080        STR      R6,[R0, #+128]
    300          }
   \       0x34   0xE8BD'8070        POP      {R4-R6,PC}       ;; return
    301          

   \                                 In section SOFTPACK, align 4, keep-with-next
    302          void xdmac_set_dest_microblock_stride(Xdmac *xdmac, uint8_t channel,
    303          		uint32_t dubs)
    304          {
   \                     xdmac_set_dest_microblock_stride:
   \        0x0   0xE92D'4070        PUSH     {R4-R6,LR}
   \        0x4   0xE1A0'5001        MOV      R5,R1
   \        0x8   0xE1A0'4000        MOV      R4,R0
    305          	assert(channel < XDMAC_CHANNELS);
   \        0xC   0xE355'0010        CMP      R5,#+16
   \       0x10   0xE1A0'6002        MOV      R6,R2
   \       0x14   0x3A00'0004        BCC      ??xdmac_set_dest_microblock_stride_0
   \       0x18   0x....'....        LDR      R0,??DataTable29
   \       0x1C   0xE300'2131        MOVW     R2,#+305
   \       0x20   0xE280'1050        ADD      R1,R0,#+80
   \       0x24   0x....'....        BL       __aeabi_assert
   \       0x28   0x....'....        BL       __iar_EmptyStepPoint
    306          
    307          	xdmac->XDMAC_CH[channel].XDMAC_CDUS = dubs;
   \                     ??xdmac_set_dest_microblock_stride_0:
   \       0x2C   0xE084'0305        ADD      R0,R4,R5, LSL #+6
   \       0x30   0xE580'6084        STR      R6,[R0, #+132]
    308          }
   \       0x34   0xE8BD'8070        POP      {R4-R6,PC}       ;; return
    309          

   \                                 In section SOFTPACK, align 4, keep-with-next
    310          uint32_t xdmac_get_channel_dest_addr(Xdmac *xdmac, uint8_t channel)
    311          {
   \                     xdmac_get_channel_dest_addr:
   \        0x0   0xE92D'4038        PUSH     {R3-R5,LR}
   \        0x4   0xE1A0'5001        MOV      R5,R1
   \        0x8   0xE1A0'4000        MOV      R4,R0
    312          	assert(channel < XDMAC_CHANNELS);
   \        0xC   0xE355'0010        CMP      R5,#+16
   \       0x10   0x3A00'0004        BCC      ??xdmac_get_channel_dest_addr_0
   \       0x14   0x....'....        LDR      R0,??DataTable29
   \       0x18   0xE3A0'2F4E        MOV      R2,#+312
   \       0x1C   0xE280'1050        ADD      R1,R0,#+80
   \       0x20   0x....'....        BL       __aeabi_assert
   \       0x24   0x....'....        BL       __iar_EmptyStepPoint
    313          
    314          	return xdmac->XDMAC_CH[channel].XDMAC_CDA;
   \                     ??xdmac_get_channel_dest_addr_0:
   \       0x28   0xE084'0305        ADD      R0,R4,R5, LSL #+6
   \       0x2C   0xE590'0064        LDR      R0,[R0, #+100]
   \       0x30   0xE8BD'8032        POP      {R1,R4,R5,PC}    ;; return
    315          }
    316          

   \                                 In section SOFTPACK, align 4, keep-with-next
    317          void xdmac_fifo_flush(Xdmac *xdmac, uint8_t channel)
    318          {
   \                     xdmac_fifo_flush:
   \        0x0   0xE92D'4038        PUSH     {R3-R5,LR}
   \        0x4   0xE1A0'5001        MOV      R5,R1
   \        0x8   0xE1A0'4000        MOV      R4,R0
    319          	assert(channel < XDMAC_CHANNELS);
   \        0xC   0xE355'0010        CMP      R5,#+16
   \       0x10   0x3A00'0004        BCC      ??xdmac_fifo_flush_0
   \       0x14   0x....'....        LDR      R0,??DataTable29
   \       0x18   0xE300'213F        MOVW     R2,#+319
   \       0x1C   0xE280'1050        ADD      R1,R0,#+80
   \       0x20   0x....'....        BL       __aeabi_assert
   \       0x24   0x....'....        BL       __iar_EmptyStepPoint
    320          
    321          	xdmac->XDMAC_GSWF = (XDMAC_GSWF_SWF0 << channel);
   \                     ??xdmac_fifo_flush_0:
   \       0x28   0xE3A0'0001        MOV      R0,#+1
   \       0x2C   0xE1A0'0510        LSL      R0,R0,R5
   \       0x30   0xE584'0040        STR      R0,[R4, #+64]
    322          	//while ((xdmac->XDMAC_CH[channel].XDMAC_CIS & XDMAC_CIS_FIS) == 0);
    323          }
   \       0x34   0xE8BD'8031        POP      {R0,R4,R5,PC}    ;; return

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable29:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x63 0x68          DC8 0x63, 0x68, 0x61, 0x6E, 0x6E, 0x65, 0x6C, 0x20

   \              0x61 0x6E    

   \              0x6E 0x65    

   \              0x6C 0x20
   \        0x8   0x3C 0x20          DC8 0x3C, 0x20, 0x28, 0x73, 0x69, 0x7A, 0x65, 0x6F

   \              0x28 0x73    

   \              0x69 0x7A    

   \              0x65 0x6F
   \       0x10   0x66 0x20          DC8 0x66, 0x20, 0x28, 0x28, 0x28, 0x28, 0x58, 0x64

   \              0x28 0x28    

   \              0x28 0x28    

   \              0x58 0x64
   \       0x18   0x6D 0x61          DC8 0x6D, 0x61, 0x63, 0x2A, 0x29, 0x30, 0x29, 0x2D

   \              0x63 0x2A    

   \              0x29 0x30    

   \              0x29 0x2D
   \       0x20   0x3E 0x58          DC8 0x3E, 0x58, 0x44, 0x4D, 0x41, 0x43, 0x5F, 0x43

   \              0x44 0x4D    

   \              0x41 0x43    

   \              0x5F 0x43
   \       0x28   0x48 0x29          DC8 0x48, 0x29, 0x29, 0x20, 0x2F, 0x20, 0x73, 0x69

   \              0x29 0x20    

   \              0x2F 0x20    

   \              0x73 0x69
   \       0x30   0x7A 0x65          DC8 0x7A, 0x65, 0x6F, 0x66, 0x28, 0x2A, 0x28, 0x28

   \              0x6F 0x66    

   \              0x28 0x2A    

   \              0x28 0x28
   \       0x38   0x28 0x58          DC8 0x28, 0x58, 0x64, 0x6D, 0x61, 0x63, 0x2A, 0x29

   \              0x64 0x6D    

   \              0x61 0x63    

   \              0x2A 0x29
   \       0x40   0x30 0x29          DC8 0x30, 0x29, 0x2D, 0x3E, 0x58, 0x44, 0x4D, 0x41

   \              0x2D 0x3E    

   \              0x58 0x44    

   \              0x4D 0x41
   \       0x48   0x43 0x5F          DC8 0x43, 0x5F, 0x43, 0x48, 0x29, 0x29, 0x29, 0

   \              0x43 0x48    

   \              0x29 0x29    

   \              0x29 0x00
   \       0x50   0x43 0x3A          DC8 0x43, 0x3A, 0x5C, 0x77, 0x6F, 0x72, 0x6B, 0x5C

   \              0x5C 0x77    

   \              0x6F 0x72    

   \              0x6B 0x5C
   \       0x58   0x41 0x74          DC8 0x41, 0x74, 0x6D, 0x65, 0x6C, 0x53, 0x6F, 0x66

   \              0x6D 0x65    

   \              0x6C 0x53    

   \              0x6F 0x66
   \       0x60   0x74 0x50          DC8 0x74, 0x50, 0x41, 0x63, 0x6B, 0x5C, 0x61, 0x74

   \              0x41 0x63    

   \              0x6B 0x5C    

   \              0x61 0x74
   \       0x68   0x6D 0x65          DC8 0x6D, 0x65, 0x6C, 0x2D, 0x73, 0x6F, 0x66, 0x74

   \              0x6C 0x2D    

   \              0x73 0x6F    

   \              0x66 0x74
   \       0x70   0x77 0x61          DC8 0x77, 0x61, 0x72, 0x65, 0x2D, 0x70, 0x61, 0x63

   \              0x72 0x65    

   \              0x2D 0x70    

   \              0x61 0x63
   \       0x78   0x6B 0x61          DC8 0x6B, 0x61, 0x67, 0x65, 0x2D, 0x32, 0x2E, 0x31

   \              0x67 0x65    

   \              0x2D 0x32    

   \              0x2E 0x31
   \       0x80   0x37 0x5C          DC8 0x37, 0x5C, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72

   \              0x64 0x72    

   \              0x69 0x76    

   \              0x65 0x72
   \       0x88   0x73 0x5C          DC8 0x73, 0x5C, 0x64, 0x6D, 0x61, 0x5C, 0x78, 0x64

   \              0x64 0x6D    

   \              0x61 0x5C    

   \              0x78 0x64
   \       0x90   0x6D 0x61          DC8 0x6D, 0x61, 0x63, 0x2E, 0x63, 0

   \              0x63 0x2E    

   \              0x63 0x00
   \       0x96   0x00 0x00          DC8 0, 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   xdmac_disable_channel
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
      16   xdmac_disable_channel_it
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
       0   xdmac_disable_channels
       0   xdmac_disable_global_it
      16   xdmac_enable_channel
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
      16   xdmac_enable_channel_it
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
       0   xdmac_enable_channels
       0   xdmac_enable_global_it
      16   xdmac_fifo_flush
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
       0   xdmac_get_arbiter
      16   xdmac_get_channel_config
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
      16   xdmac_get_channel_dest_addr
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
      16   xdmac_get_channel_isr
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
      16   xdmac_get_channel_it_mask
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
       0   xdmac_get_config
      16   xdmac_get_descriptor_addr
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
       0   xdmac_get_global_channel_status
       0   xdmac_get_global_isr
       0   xdmac_get_global_it_mask
      16   xdmac_get_masked_channel_isr
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
       0   xdmac_get_masked_global_isr
      16   xdmac_get_microblock_control
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
       0   xdmac_get_software_transfer_status
       0   xdmac_get_type
      16   xdmac_resume_read_write_channel
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
      16   xdmac_set_block_control
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
      16   xdmac_set_channel_config
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
      16   xdmac_set_data_stride_mem_pattern
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
      24   xdmac_set_descriptor_addr
        24   -> __aeabi_assert
        24   -> __iar_EmptyStepPoint
      16   xdmac_set_descriptor_control
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
      16   xdmac_set_dest_addr
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
      16   xdmac_set_dest_microblock_stride
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
      16   xdmac_set_microblock_control
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
      16   xdmac_set_src_addr
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
      16   xdmac_set_src_microblock_stride
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
      16   xdmac_software_flush_request
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
      16   xdmac_software_transfer_request
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
      16   xdmac_suspend_channel
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
      16   xdmac_suspend_read_channel
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
      16   xdmac_suspend_read_write_channel
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
      16   xdmac_suspend_write_channel
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable29
     152  ?_0
      56  xdmac_disable_channel
      56  xdmac_disable_channel_it
       8  xdmac_disable_channels
       8  xdmac_disable_global_it
      60  xdmac_enable_channel
      56  xdmac_enable_channel_it
       8  xdmac_enable_channels
       8  xdmac_enable_global_it
      56  xdmac_fifo_flush
       8  xdmac_get_arbiter
      52  xdmac_get_channel_config
      52  xdmac_get_channel_dest_addr
      52  xdmac_get_channel_isr
      52  xdmac_get_channel_it_mask
       8  xdmac_get_config
      56  xdmac_get_descriptor_addr
       8  xdmac_get_global_channel_status
       8  xdmac_get_global_isr
       8  xdmac_get_global_it_mask
      60  xdmac_get_masked_channel_isr
      16  xdmac_get_masked_global_isr
      56  xdmac_get_microblock_control
       8  xdmac_get_software_transfer_status
       8  xdmac_get_type
      60  xdmac_resume_read_write_channel
      56  xdmac_set_block_control
      56  xdmac_set_channel_config
      56  xdmac_set_data_stride_mem_pattern
      68  xdmac_set_descriptor_addr
      56  xdmac_set_descriptor_control
      56  xdmac_set_dest_addr
      56  xdmac_set_dest_microblock_stride
      56  xdmac_set_microblock_control
      56  xdmac_set_src_addr
      56  xdmac_set_src_microblock_stride
      60  xdmac_software_flush_request
      60  xdmac_software_transfer_request
      56  xdmac_suspend_channel
      60  xdmac_suspend_read_channel
      60  xdmac_suspend_read_write_channel
      60  xdmac_suspend_write_channel

 
   152 bytes in section .rodata
 1'760 bytes in section SOFTPACK
 
 1'760 bytes of CODE  memory
   152 bytes of CONST memory

Errors: none
Warnings: none
