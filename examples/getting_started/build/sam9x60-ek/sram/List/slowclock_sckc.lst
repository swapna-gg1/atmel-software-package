###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.1.245/W32 for ARM         24/Mar/2021  13:23:15
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\peripherals\slowclock_sckc.c
#    Command line      =
#        -f C:\Users\c40450\AppData\Local\Temp\EW57E2.tmp
#        (C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\peripherals\slowclock_sckc.c
#        -D "SOFTPACK_VERSION=\"2.17\"" -D TRACE_LEVEL=5 -D VARIANT_SRAM -D
#        CONFIG_ARCH_ARMV5TE -D CONFIG_ARCH_ARM -D CONFIG_SOC_SAM9X60 -D
#        CONFIG_CHIP_SAM9X60 -D CONFIG_BOARD_SAM9X60_EK -D CONFIG_HAVE_AIC5 -D
#        CONFIG_HAVE_FLEXCOM -D CONFIG_HAVE_PIO3 -D CONFIG_HAVE_PIT -D
#        CONFIG_HAVE_SMC -D CONFIG_HAVE_SDRAMC -D CONFIG_HAVE_MPDDRC -D
#        CONFIG_HAVE_MPDDRC_DATA_PATH -D CONFIG_HAVE_MPDDRC_IO_CALIBRATION -D
#        CONFIG_HAVE_MPDDRC_DDR2 -D CONFIG_HAVE_ADC_LOW_RES -D
#        CONFIG_HAVE_PMC_FAST_STARTUP -D CONFIG_HAVE_PMC_GENERATED_CLOCKS -D
#        CONFIG_HAVE_SCKC -D CONFIG_HAVE_NFD0_ON_D16 -D CONFIG_HAVE_XDMAC -D
#        CONFIG_HAVE_PWMC -D CONFIG_HAVE_DDR2_W972GG6KB -D
#        CONFIG_HAVE_RSTC_EXTERNAL_RESET -D CONFIG_HAVE_RSTC_INDEPENDENT_RESET
#        -D CONFIG_HAVE_RTT -D CONFIG_HAVE_SHDWC -D CONFIG_HAVE_LED -D
#        CONFIG_HAVE_MMU -D CONFIG_HAVE_L1CACHE -D CONFIG_HAVE_OTPC -D
#        CONFIG_HAVE_DBGU -D CONFIG_HAVE_SERIALD_DBGU -D CONFIG_HAVE_USART -D
#        CONFIG_HAVE_USART_FIFO -D CONFIG_HAVE_DWDT --preprocess
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\build\sam9x60-ek\sram\List
#        -lC
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\build\sam9x60-ek\sram\List
#        --diag_suppress Pa050 -o
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\build\sam9x60-ek\sram\Obj
#        --debug --endian=little --cpu=ARM926EJ-S -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\arch\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\utils\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\target\common\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\target\sam9x60\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\drivers\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\..\..\lib\
#        --section .text=SOFTPACK --cpu_mode arm -Oh)
#    Locale            =  C
#    List file         =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\build\sam9x60-ek\sram\List\slowclock_sckc.lst
#    Object file       =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\getting_started\build\sam9x60-ek\sram\Obj\slowclock_sckc.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\peripherals\slowclock_sckc.c
      1          /* ----------------------------------------------------------------------------
      2           *         SAM Software Package License
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2015, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          #include "chip.h"
     31          
     32          #include "peripherals/slowclock.h"
     33          
     34          /*----------------------------------------------------------------------------
     35           *        Exported functions
     36           *----------------------------------------------------------------------------*/
     37          

   \                                 In section SOFTPACK, align 4, keep-with-next
     38          RAMCODE bool slowclock_is_internal(enum _slowclock_domain domain)
     39          {
     40          	return (SCKC->SCKC_CR & SCKC_CR_OSCSEL) != SCKC_CR_OSCSEL;
   \                     slowclock_is_internal:
   \        0x0   0xE3E0'00AF        MVN      R0,#+175
   \        0x4   0xE3C0'0F40        BIC      R0,R0,#0x100
   \        0x8   0xE590'1000        LDR      R1,[R0, #+0]
   \        0xC   0xE1A0'2C21        LSR      R2,R1,#+24
   \       0x10   0xE202'3001        AND      R3,R2,#0x1
   \       0x14   0xE223'0001        EOR      R0,R3,#0x1
   \       0x18   0xE12F'FF1E        BX       LR               ;; return
     41          }
     42          

   \                                 In section SOFTPACK, align 4, keep-with-next
     43          RAMCODE void slowclock_select_internal(enum _slowclock_domain domain)
     44          {
     45          	volatile int count;
     46          
     47          	if (slowclock_is_internal(domain))
   \                     slowclock_select_internal:
   \        0x0   0xE3E0'00AF        MVN      R0,#+175
   \        0x4   0xE24D'D004        SUB      SP,SP,#+4
   \        0x8   0xE3C0'0F40        BIC      R0,R0,#0x100
   \        0xC   0xE590'1000        LDR      R1,[R0, #+0]
   \       0x10   0xE311'0740        TST      R1,#0x1000000
   \       0x14   0x0A00'000F        BEQ      ??slowclock_select_internal_0
     48          		return;
     49          
     50          #ifdef SCKC_CR_RCEN
     51          	/* enable external OSC 32 kHz */
     52          	SCKC->SCKC_CR |= SCKC_CR_RCEN;
     53          	/* Wait 32,768 Hz Startup Time for clock stabilization (software loop) */
     54          	for (count = 0; count < 0x1000; count++);
     55          #endif
     56          
     57          	/* switch from extenal OSC 32kHz to internal RC 32 kHz */
     58          	/* switch slow clock source to internal OSC 32 kHz */
     59          	SCKC->SCKC_CR = (SCKC->SCKC_CR & ~SCKC_CR_OSCSEL) | SCKC_CR_OSCSEL_RC;
   \       0x18   0xE590'1000        LDR      R1,[R0, #+0]
     60          
     61          	/* Wait 5 slow clock cycles for internal resynchronization */
     62          	for (count = 0; count < 0x1000; count++);
   \       0x1C   0xE3A0'3000        MOV      R3,#+0
   \       0x20   0xE3C1'2740        BIC      R2,R1,#0x1000000
   \       0x24   0xE580'2000        STR      R2,[R0, #+0]
   \       0x28   0xEA00'0001        B        ??slowclock_select_internal_1
   \                     ??slowclock_select_internal_2:
   \       0x2C   0xE59D'2000        LDR      R2,[SP, #+0]
   \       0x30   0xE282'3001        ADD      R3,R2,#+1
   \                     ??slowclock_select_internal_1:
   \       0x34   0xE58D'3000        STR      R3,[SP, #+0]
   \       0x38   0xE59D'2000        LDR      R2,[SP, #+0]
   \       0x3C   0xE352'0D40        CMP      R2,#+4096
   \       0x40   0xBAFF'FFF9        BLT      ??slowclock_select_internal_2
     63          
     64          #ifdef SCKC_CR_OSC32EN
     65          	if ((SCKC->SCKC_CR & SCKC_CR_OSC32EN) == SCKC_CR_OSC32EN)
   \       0x44   0xE590'1000        LDR      R1,[R0, #+0]
   \       0x48   0xE311'0002        TST      R1,#0x2
     66          		SCKC->SCKC_CR &= ~SCKC_CR_OSC32EN;
   \       0x4C   0x1590'1000        LDRNE    R1,[R0, #+0]
   \       0x50   0x13C1'2002        BICNE    R2,R1,#0x2
   \       0x54   0x1580'2000        STRNE    R2,[R0, #+0]
     67          #endif
     68          }
   \                     ??slowclock_select_internal_0:
   \       0x58   0xE28D'D004        ADD      SP,SP,#+4
   \       0x5C   0xE12F'FF1E        BX       LR               ;; return
     69          

   \                                 In section SOFTPACK, align 4, keep-with-next
     70          RAMCODE void slowclock_select_external(enum _slowclock_domain domain)
     71          {
     72          	volatile int count;
     73          
     74          	if (!slowclock_is_internal(domain))
   \                     slowclock_select_external:
   \        0x0   0xE3E0'00AF        MVN      R0,#+175
   \        0x4   0xE24D'D004        SUB      SP,SP,#+4
   \        0x8   0xE3C0'0F40        BIC      R0,R0,#0x100
   \        0xC   0xE590'1000        LDR      R1,[R0, #+0]
   \       0x10   0xE311'0740        TST      R1,#0x1000000
   \       0x14   0x1A00'0016        BNE      ??slowclock_select_external_0
     75          		return;
     76          
     77          #ifdef SCKC_CR_OSC32EN
     78          	/* enable external OSC 32 kHz */
     79          	SCKC->SCKC_CR |= SCKC_CR_OSC32EN;
   \       0x18   0xE590'1000        LDR      R1,[R0, #+0]
     80          	/* Wait 32,768 Hz Startup Time for clock stabilization (software loop) */
     81          	for (count = 0; count < 0x1000; count++);
   \       0x1C   0xE3A0'3000        MOV      R3,#+0
   \       0x20   0xE381'2002        ORR      R2,R1,#0x2
   \       0x24   0xE580'2000        STR      R2,[R0, #+0]
   \       0x28   0xEA00'0001        B        ??slowclock_select_external_1
   \                     ??slowclock_select_external_2:
   \       0x2C   0xE59D'2000        LDR      R2,[SP, #+0]
   \       0x30   0xE282'3001        ADD      R3,R2,#+1
   \                     ??slowclock_select_external_1:
   \       0x34   0xE58D'3000        STR      R3,[SP, #+0]
   \       0x38   0xE59D'2000        LDR      R2,[SP, #+0]
   \       0x3C   0xE352'0D40        CMP      R2,#+4096
   \       0x40   0xBAFF'FFF9        BLT      ??slowclock_select_external_2
     82          #endif
     83          
     84          	/* switch from internal RC 32kHz to external OSC 32 kHz */
     85          	SCKC->SCKC_CR = (SCKC->SCKC_CR & ~SCKC_CR_OSCSEL) | SCKC_CR_OSCSEL_XTAL;
   \       0x44   0xE590'1000        LDR      R1,[R0, #+0]
   \       0x48   0xE381'2740        ORR      R2,R1,#0x1000000
   \       0x4C   0xE580'2000        STR      R2,[R0, #+0]
     86          
     87          	/* Wait 5 slow clock cycles for internal resynchronization */
     88          	for (count = 0; count < 0x1000; count++);
   \       0x50   0xE3A0'0000        MOV      R0,#+0
   \       0x54   0xE58D'0000        STR      R0,[SP, #+0]
   \       0x58   0xEA00'0002        B        ??slowclock_select_external_3
   \                     ??slowclock_select_external_4:
   \       0x5C   0xE59D'0000        LDR      R0,[SP, #+0]
   \       0x60   0xE280'2001        ADD      R2,R0,#+1
   \       0x64   0xE58D'2000        STR      R2,[SP, #+0]
   \                     ??slowclock_select_external_3:
   \       0x68   0xE59D'1000        LDR      R1,[SP, #+0]
   \       0x6C   0xE351'0D40        CMP      R1,#+4096
   \       0x70   0xBAFF'FFF9        BLT      ??slowclock_select_external_4
     89          
     90          #ifdef SCKC_CR_RCEN
     91          	if ((SCKC->SCKC_CR & SCKC_CR_RCEN) == SCKC_CR_RCEN)
     92          		SCKC->SCKC_CR &= ~SCKC_CR_RCEN;
     93          #endif
     94          }
   \                     ??slowclock_select_external_0:
   \       0x74   0xE28D'D004        ADD      SP,SP,#+4
   \       0x78   0xE12F'FF1E        BX       LR               ;; return
     95          

   \                                 In section SOFTPACK, align 4, keep-with-next
     96          uint32_t slowclock_get_clock(enum _slowclock_domain domain)
     97          {
     98          	if (slowclock_is_internal(domain))
   \                     slowclock_get_clock:
   \        0x0   0xE3E0'00AF        MVN      R0,#+175
   \        0x4   0xE3C0'0F40        BIC      R0,R0,#0x100
   \        0x8   0xE590'0000        LDR      R0,[R0, #+0]
   \        0xC   0xE310'0740        TST      R0,#0x1000000
     99          		return 32000;
   \       0x10   0x03A0'0C7D        MOVEQ    R0,#+32000
    100          	else
    101          		return 32768;
   \       0x14   0x13A0'0C80        MOVNE    R0,#+32768
   \       0x18   0xE12F'FF1E        BX       LR               ;; return
    102          }
    103          
    104          

   \                                 In section SOFTPACK, align 4, keep-with-next
    105          RAMCODE void slowclock_set_bypass(bool bypass)
    106          {
    107          #ifdef SCKC_CR_OSC32BYP
    108          	uint32_t mask = bypass ? SCKC_CR_OSC32BYP : SCKC_CR_OSC32EN;
    109          
    110          	/* set bypass or not */
    111          	SCKC->SCKC_CR = (SCKC->SCKC_CR & ~(SCKC_CR_OSC32BYP | SCKC_CR_OSC32EN)) | mask;
   \                     slowclock_set_bypass:
   \        0x0   0xE3E0'10AF        MVN      R1,#+175
   \        0x4   0xE3C1'1F40        BIC      R1,R1,#0x100
   \        0x8   0xE591'2000        LDR      R2,[R1, #+0]
   \        0xC   0xE350'0000        CMP      R0,#+0
   \       0x10   0x13A0'0004        MOVNE    R0,#+4
   \       0x14   0x03A0'0002        MOVEQ    R0,#+2
   \       0x18   0xE3C2'3006        BIC      R3,R2,#0x6
   \       0x1C   0xE180'0003        ORR      R0,R0,R3
   \       0x20   0xE581'0000        STR      R0,[R1, #+0]
    112          #endif
    113          }
   \       0x24   0xE12F'FF1E        BX       LR               ;; return

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   slowclock_get_clock
       0   slowclock_is_internal
       4   slowclock_select_external
       4   slowclock_select_internal
       0   slowclock_set_bypass


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      28  slowclock_get_clock
      28  slowclock_is_internal
     124  slowclock_select_external
      96  slowclock_select_internal
      40  slowclock_set_bypass

 
 316 bytes in section SOFTPACK
 
 316 bytes of CODE memory

Errors: none
Warnings: none
