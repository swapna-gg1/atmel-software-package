###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.1.245/W32 for ARM         06/May/2020  06:12:21
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\dma\dma_xdmac.c
#    Command line      =
#        -f C:\Users\c40450\AppData\Local\Temp\EW3BB6.tmp
#        (C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\dma\dma_xdmac.c
#        -D "SOFTPACK_VERSION=\"2.17\"" -D TRACE_LEVEL=5 -D VARIANT_SRAM -D
#        CONFIG_ARCH_ARMV7A -D CONFIG_ARCH_ARM -D CONFIG_SOC_SAMA5D2 -D
#        CONFIG_CHIP_SAMA5D27 -D CONFIG_PACKAGE_289PIN -D
#        CONFIG_BOARD_SAMA5D27_SOM1_EK -D CONFIG_HAVE_AIC5 -D
#        CONFIG_HAVE_FLEXCOM -D CONFIG_HAVE_PIO4 -D CONFIG_HAVE_PIO4_SECURE -D
#        CONFIG_HAVE_NFC -D CONFIG_HAVE_PIT -D CONFIG_HAVE_SMC -D
#        CONFIG_HAVE_SMC_SCRAMBLING -D CONFIG_HAVE_GMAC_QUEUES -D
#        CONFIG_HAVE_MPDDRC -D CONFIG_HAVE_MPDDRC_DATA_PATH -D
#        CONFIG_HAVE_MPDDRC_IO_CALIBRATION -D CONFIG_HAVE_MPDDRC_DDR2 -D
#        CONFIG_HAVE_MPDDRC_LPDDR2 -D CONFIG_HAVE_MPDDRC_DDR3 -D
#        CONFIG_HAVE_MPDDRC_LPDDR3 -D CONFIG_HAVE_ADC_SETTLING_TIME -D
#        CONFIG_HAVE_ADC_DIFF_INPUT -D CONFIG_HAVE_ADC_SEQ_R2 -D
#        CONFIG_HAVE_PMC_FAST_STARTUP -D CONFIG_HAVE_PMC_GENERATED_CLOCKS -D
#        CONFIG_HAVE_PMC_AUDIO_CLOCK -D CONFIG_HAVE_PMC_PLLADIV2 -D
#        CONFIG_HAVE_PMC_H32MXDIV -D CONFIG_HAVE_PMC_UPLL_BIAS -D
#        CONFIG_HAVE_SCKC -D CONFIG_HAVE_PWMC_DMA -D
#        CONFIG_HAVE_PWMC_SPREAD_SPECTRUM -D CONFIG_HAVE_PWMC_EXTERNAL_TRIGGER
#        -D CONFIG_HAVE_PWMC_FAULT_PROT_HIZ -D CONFIG_HAVE_PWMC_STEPPER_MOTOR
#        -D CONFIG_HAVE_PWMC_CMP_UNIT -D CONFIG_HAVE_PWMC_SYNC_MODE -D
#        CONFIG_HAVE_PWMC_OOV -D CONFIG_HAVE_PWMC_FMODE -D CONFIG_HAVE_PWMC_WP
#        -D CONFIG_HAVE_PWMC_DTIME -D CONFIG_HAVE_PWMC_ELINE -D
#        CONFIG_HAVE_SFRBU -D CONFIG_HAVE_L2CC -D CONFIG_HAVE_SAIC -D
#        CONFIG_HAVE_XDMAC -D CONFIG_HAVE_XDMAC_DATA_WIDTH_DWORD -D
#        CONFIG_HAVE_SECUMOD -D CONFIG_HAVE_SFC -D CONFIG_HAVE_PWMC -D
#        CONFIG_HAVE_SECURE_MATRIX -D CONFIG_HAVE_DDR2_W971GG6SB -D
#        CONFIG_HAVE_RSTC_CONFIGURABLE_USER_RESET -D CONFIG_HAVE_TC_FAULT_MODE
#        -D CONFIG_HAVE_TC_DMA_MODE -D CONFIG_HAVE_RTC_CALIBRATION -D
#        CONFIG_HAVE_RTC_MODE_PERSIAN -D CONFIG_HAVE_RTC_MODE_UTC -D
#        CONFIG_HAVE_RTC_TAMPER -D CONFIG_HAVE_SHDWC -D CONFIG_HAVE_LED -D
#        CONFIG_HAVE_MMU -D CONFIG_HAVE_L1CACHE -D CONFIG_HAVE_L2CACHE -D
#        CONFIG_HAVE_UART -D CONFIG_HAVE_SERIALD_UART -D CONFIG_HAVE_USART -D
#        CONFIG_HAVE_USART_FIFO --preprocess
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\coremark\build\sama5d27-som1-ek\sram\List
#        -lC
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\coremark\build\sama5d27-som1-ek\sram\List
#        --diag_suppress Pa050 -o
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\coremark\build\sama5d27-som1-ek\sram\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-A5 -e --fpu=VFPv4_D16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\coremark\..\..\arch\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\coremark\..\..\utils\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\coremark\..\..\target\common\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\coremark\..\..\target\sama5d2\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\coremark\..\..\drivers\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\coremark\..\..\lib\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\coremark\coremark\
#        --section .text=SOFTPACK --cpu_mode arm -On)
#    Locale            =  C
#    List file         =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\coremark\build\sama5d27-som1-ek\sram\List\dma_xdmac.lst
#    Object file       =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\coremark\build\sama5d27-som1-ek\sram\Obj\dma_xdmac.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\dma\dma_xdmac.c
      1          /* ----------------------------------------------------------------------------
      2           *         SAM Software Package License
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2015, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          /*----------------------------------------------------------------------------
     31           *        Includes
     32           *----------------------------------------------------------------------------*/
     33          
     34          #include <assert.h>
     35          
     36          #include "callback.h"
     37          #include "compiler.h"
     38          #include "dma/dma.h"
     39          #include "dma/dma_xdmac.h"
     40          #include "errno.h"
     41          #include "irq/irq.h"
     42          #include "peripherals/pmc.h"
     43          
     44          /*----------------------------------------------------------------------------
     45           *        Local definitions
     46           *----------------------------------------------------------------------------*/
     47          
     48          /* Compatibility for devices with no secure matrix */
     49          #ifndef XDMAC_CC_PROT_UNSEC
     50          #define XDMAC_CC_PROT_UNSEC 0
     51          #endif
     52          
     53          /*----------------------------------------------------------------------------
     54           *        Exported functions
     55           *----------------------------------------------------------------------------*/
     56          
     57          /**
     58           * \brief Enable clock of the DMA peripheral, Enable the peripheral,
     59           * setup configuration register for transfer.
     60           * \param channel Channel pointer
     61           */

   \                                 In section SOFTPACK, align 4, keep-with-next
     62          int dma_prepare_channel(struct _dma_channel* channel)
     63          {
   \                     dma_prepare_channel:
   \        0x0   0xE92D'4038        PUSH     {R3-R5,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
     64          	Xdmac* xdmac = channel->hw;
   \        0x8   0xE594'5000        LDR      R5,[R4, #+0]
     65          
     66          	if (channel->state == DMA_STATE_FREE)
   \        0xC   0xE5D4'0014        LDRB     R0,[R4, #+20]
   \       0x10   0xE350'0000        CMP      R0,#+0
   \       0x14   0x1A00'0001        BNE      ??dma_prepare_channel_0
     67          		return -EPERM;
   \       0x18   0xE3E0'0042        MVN      R0,#+66
   \       0x1C   0xEA00'003F        B        ??dma_prepare_channel_1
     68          	else if (channel->state == DMA_STATE_STARTED)
   \                     ??dma_prepare_channel_0:
   \       0x20   0xE5D4'0014        LDRB     R0,[R4, #+20]
   \       0x24   0xE350'0002        CMP      R0,#+2
   \       0x28   0x1A00'0001        BNE      ??dma_prepare_channel_2
     69          		return -EBUSY;
   \       0x2C   0xE3E0'0009        MVN      R0,#+9
   \       0x30   0xEA00'003A        B        ??dma_prepare_channel_1
     70          
     71          	/* Clear status */
     72          	xdmac_get_global_channel_status(xdmac);
   \                     ??dma_prepare_channel_2:
   \       0x34   0xE1B0'0005        MOVS     R0,R5
   \       0x38   0x....'....        BL       xdmac_get_global_channel_status
     73          	xdmac_get_global_isr(xdmac);
   \       0x3C   0xE1B0'0005        MOVS     R0,R5
   \       0x40   0x....'....        BL       xdmac_get_global_isr
     74          
     75          	/* Enable clock of the DMA peripheral */
     76          	pmc_configure_peripheral(get_xdmac_id_from_addr(xdmac), NULL, true);
   \       0x44   0xE1B0'0005        MOVS     R0,R5
   \       0x48   0x....'....        BL       get_xdmac_id_from_addr
   \       0x4C   0xE3A0'2001        MOV      R2,#+1
   \       0x50   0xE3A0'1000        MOV      R1,#+0
   \       0x54   0x....'....        BL       pmc_configure_peripheral
     77          
     78          	/* Clear status */
     79          	xdmac_get_channel_isr(xdmac, channel->id);
   \       0x58   0xE594'1004        LDR      R1,[R4, #+4]
   \       0x5C   0xE6EF'1071        UXTB     R1,R1
   \       0x60   0xE1B0'0005        MOVS     R0,R5
   \       0x64   0x....'....        BL       xdmac_get_channel_isr
     80          
     81          	/* Disables XDMAC interrupt for the given channel */
     82          	xdmac_disable_global_it(xdmac, 1 << channel->id);
   \       0x68   0xE3A0'0001        MOV      R0,#+1
   \       0x6C   0xE594'1004        LDR      R1,[R4, #+4]
   \       0x70   0xE1B0'1110        LSLS     R1,R0,R1
   \       0x74   0xE1B0'0005        MOVS     R0,R5
   \       0x78   0x....'....        BL       xdmac_disable_global_it
     83          	xdmac_disable_channel_it(xdmac, channel->id, -1);
   \       0x7C   0xE3E0'2000        MVN      R2,#+0
   \       0x80   0xE594'1004        LDR      R1,[R4, #+4]
   \       0x84   0xE6EF'1071        UXTB     R1,R1
   \       0x88   0xE1B0'0005        MOVS     R0,R5
   \       0x8C   0x....'....        BL       xdmac_disable_channel_it
     84          
     85          	/* Disable the given dma channel */
     86          	xdmac_disable_channel(xdmac, channel->id);
   \       0x90   0xE594'1004        LDR      R1,[R4, #+4]
   \       0x94   0xE6EF'1071        UXTB     R1,R1
   \       0x98   0xE1B0'0005        MOVS     R0,R5
   \       0x9C   0x....'....        BL       xdmac_disable_channel
     87          	xdmac_set_src_addr(xdmac, channel->id, 0);
   \       0xA0   0xE3A0'2000        MOV      R2,#+0
   \       0xA4   0xE594'1004        LDR      R1,[R4, #+4]
   \       0xA8   0xE6EF'1071        UXTB     R1,R1
   \       0xAC   0xE1B0'0005        MOVS     R0,R5
   \       0xB0   0x....'....        BL       xdmac_set_src_addr
     88          	xdmac_set_dest_addr(xdmac, channel->id, 0);
   \       0xB4   0xE3A0'2000        MOV      R2,#+0
   \       0xB8   0xE594'1004        LDR      R1,[R4, #+4]
   \       0xBC   0xE6EF'1071        UXTB     R1,R1
   \       0xC0   0xE1B0'0005        MOVS     R0,R5
   \       0xC4   0x....'....        BL       xdmac_set_dest_addr
     89          	xdmac_set_block_control(xdmac, channel->id, 0);
   \       0xC8   0xE3A0'2000        MOV      R2,#+0
   \       0xCC   0xE594'1004        LDR      R1,[R4, #+4]
   \       0xD0   0xE6EF'1071        UXTB     R1,R1
   \       0xD4   0xE1B0'0005        MOVS     R0,R5
   \       0xD8   0x....'....        BL       xdmac_set_block_control
     90          	xdmac_set_channel_config(xdmac, channel->id, XDMAC_CC_PROT_UNSEC);
   \       0xDC   0xE3A0'2020        MOV      R2,#+32
   \       0xE0   0xE594'1004        LDR      R1,[R4, #+4]
   \       0xE4   0xE6EF'1071        UXTB     R1,R1
   \       0xE8   0xE1B0'0005        MOVS     R0,R5
   \       0xEC   0x....'....        BL       xdmac_set_channel_config
     91          	xdmac_set_descriptor_addr(xdmac, channel->id, 0, 0);
   \       0xF0   0xE3A0'3000        MOV      R3,#+0
   \       0xF4   0xE3A0'2000        MOV      R2,#+0
   \       0xF8   0xE594'1004        LDR      R1,[R4, #+4]
   \       0xFC   0xE6EF'1071        UXTB     R1,R1
   \      0x100   0xE1B0'0005        MOVS     R0,R5
   \      0x104   0x....'....        BL       xdmac_set_descriptor_addr
     92          	xdmac_set_descriptor_control(xdmac, channel->id, 0);
   \      0x108   0xE3A0'2000        MOV      R2,#+0
   \      0x10C   0xE594'1004        LDR      R1,[R4, #+4]
   \      0x110   0xE6EF'1071        UXTB     R1,R1
   \      0x114   0xE1B0'0005        MOVS     R0,R5
   \      0x118   0x....'....        BL       xdmac_set_descriptor_control
     93          
     94          	return 0;
   \      0x11C   0xE3A0'0000        MOV      R0,#+0
   \                     ??dma_prepare_channel_1:
   \      0x120   0xE8BD'8032        POP      {R1,R4,R5,PC}    ;; return
     95          }
     96          

   \                                 In section SOFTPACK, align 4, keep-with-next
     97          int xdmacd_configure_transfer(struct _dma_channel* channel,
     98          			      struct _xdmacd_cfg *cfg,
     99          			      uint32_t desc_cntrl,
    100          			      void *desc_addr)
    101          {
   \                     xdmacd_configure_transfer:
   \        0x0   0xE92D'43F8        PUSH     {R3-R9,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
   \        0x8   0xE1B0'5001        MOVS     R5,R1
   \        0xC   0xE1B0'6002        MOVS     R6,R2
   \       0x10   0xE1B0'7003        MOVS     R7,R3
    102          	if (channel->state == DMA_STATE_FREE)
   \       0x14   0xE5D4'0014        LDRB     R0,[R4, #+20]
   \       0x18   0xE350'0000        CMP      R0,#+0
   \       0x1C   0x1A00'0001        BNE      ??xdmacd_configure_transfer_0
    103          		return -EPERM;
   \       0x20   0xE3E0'0042        MVN      R0,#+66
   \       0x24   0xEA00'0097        B        ??xdmacd_configure_transfer_1
    104          	else if (channel->state == DMA_STATE_STARTED)
   \                     ??xdmacd_configure_transfer_0:
   \       0x28   0xE5D4'0014        LDRB     R0,[R4, #+20]
   \       0x2C   0xE350'0002        CMP      R0,#+2
   \       0x30   0x1A00'0001        BNE      ??xdmacd_configure_transfer_2
    105          		return -EBUSY;
   \       0x34   0xE3E0'0009        MVN      R0,#+9
   \       0x38   0xEA00'0092        B        ??xdmacd_configure_transfer_1
    106          
    107          	Xdmac* xdmac = channel->hw;
   \                     ??xdmacd_configure_transfer_2:
   \       0x3C   0xE594'8000        LDR      R8,[R4, #+0]
    108          	const uint32_t first_view = desc_cntrl & XDMAC_CNDC_NDVIEW_Msk;
   \       0x40   0xE216'9018        ANDS     R9,R6,#0x18
    109          
    110          	cfg->cfg &= ~XDMAC_CC_PERID_Msk;
   \       0x44   0xE595'001C        LDR      R0,[R5, #+28]
   \       0x48   0xE3D0'047F        BICS     R0,R0,#0x7F000000
   \       0x4C   0xE585'001C        STR      R0,[R5, #+28]
    111          	if ((cfg->cfg & XDMAC_CC_TYPE_PER_TRAN) == XDMAC_CC_TYPE_PER_TRAN) {
   \       0x50   0xE5D5'001C        LDRB     R0,[R5, #+28]
   \       0x54   0xE310'0001        TST      R0,#0x1
   \       0x58   0x0A00'0010        BEQ      ??xdmacd_configure_transfer_3
    112          		if ((cfg->cfg & XDMAC_CC_DSYNC) == XDMAC_CC_DSYNC_PER2MEM) {
   \       0x5C   0xE5D5'001C        LDRB     R0,[R5, #+28]
   \       0x60   0xE310'0010        TST      R0,#0x10
   \       0x64   0x1A00'0006        BNE      ??xdmacd_configure_transfer_4
    113          			cfg->cfg |= XDMAC_CC_PERID(channel->src_rxif);
   \       0x68   0xE595'001C        LDR      R0,[R5, #+28]
   \       0x6C   0xE5D4'1011        LDRB     R1,[R4, #+17]
   \       0x70   0xE3A0'247F        MOV      R2,#+2130706432
   \       0x74   0xE012'1C01        ANDS     R1,R2,R1, LSL #+24
   \       0x78   0xE191'0000        ORRS     R0,R1,R0
   \       0x7C   0xE585'001C        STR      R0,[R5, #+28]
   \       0x80   0xEA00'0009        B        ??xdmacd_configure_transfer_5
    114          		} else {
    115          			cfg->cfg |= XDMAC_CC_PERID(channel->dest_txif);
   \                     ??xdmacd_configure_transfer_4:
   \       0x84   0xE595'001C        LDR      R0,[R5, #+28]
   \       0x88   0xE5D4'1012        LDRB     R1,[R4, #+18]
   \       0x8C   0xE3A0'247F        MOV      R2,#+2130706432
   \       0x90   0xE012'1C01        ANDS     R1,R2,R1, LSL #+24
   \       0x94   0xE191'0000        ORRS     R0,R1,R0
   \       0x98   0xE585'001C        STR      R0,[R5, #+28]
   \       0x9C   0xEA00'0002        B        ??xdmacd_configure_transfer_5
    116          		}
    117          	} else {
    118          		/* Use PERID mask as 'unused peripheral number' for MEM2MEM */
    119          		cfg->cfg |= XDMAC_CC_PERID_Msk;
   \                     ??xdmacd_configure_transfer_3:
   \       0xA0   0xE595'001C        LDR      R0,[R5, #+28]
   \       0xA4   0xE390'047F        ORRS     R0,R0,#0x7F000000
   \       0xA8   0xE585'001C        STR      R0,[R5, #+28]
    120          	}
    121          
    122          	/* Clear status */
    123          	xdmac_get_global_isr(xdmac);
   \                     ??xdmacd_configure_transfer_5:
   \       0xAC   0xE1B0'0008        MOVS     R0,R8
   \       0xB0   0x....'....        BL       xdmac_get_global_isr
    124          	xdmac_get_channel_isr(xdmac, channel->id);
   \       0xB4   0xE594'1004        LDR      R1,[R4, #+4]
   \       0xB8   0xE6EF'1071        UXTB     R1,R1
   \       0xBC   0xE1B0'0008        MOVS     R0,R8
   \       0xC0   0x....'....        BL       xdmac_get_channel_isr
    125          
    126          	if ((desc_cntrl & XDMAC_CNDC_NDE) == XDMAC_CNDC_NDE_DSCR_FETCH_EN) {
   \       0xC4   0xE316'0001        TST      R6,#0x1
   \       0xC8   0x0A00'0030        BEQ      ??xdmacd_configure_transfer_6
    127          		/* Linked List is enabled */
    128          		if (first_view <= XDMAC_CNDC_NDVIEW_NDV2) {
   \       0xCC   0xE359'0011        CMP      R9,#+17
   \       0xD0   0x2A00'0013        BCS      ??xdmacd_configure_transfer_7
    129          			xdmac_set_block_control(xdmac, channel->id, cfg->bc);
   \       0xD4   0xE595'2004        LDR      R2,[R5, #+4]
   \       0xD8   0xE594'1004        LDR      R1,[R4, #+4]
   \       0xDC   0xE6EF'1071        UXTB     R1,R1
   \       0xE0   0xE1B0'0008        MOVS     R0,R8
   \       0xE4   0x....'....        BL       xdmac_set_block_control
    130          			xdmac_set_data_stride_mem_pattern(xdmac, channel->id, cfg->ds);
   \       0xE8   0xE595'2008        LDR      R2,[R5, #+8]
   \       0xEC   0xE594'1004        LDR      R1,[R4, #+4]
   \       0xF0   0xE6EF'1071        UXTB     R1,R1
   \       0xF4   0xE1B0'0008        MOVS     R0,R8
   \       0xF8   0x....'....        BL       xdmac_set_data_stride_mem_pattern
    131          			xdmac_set_src_microblock_stride(xdmac, channel->id, cfg->sus);
   \       0xFC   0xE595'200C        LDR      R2,[R5, #+12]
   \      0x100   0xE594'1004        LDR      R1,[R4, #+4]
   \      0x104   0xE6EF'1071        UXTB     R1,R1
   \      0x108   0xE1B0'0008        MOVS     R0,R8
   \      0x10C   0x....'....        BL       xdmac_set_src_microblock_stride
    132          			xdmac_set_dest_microblock_stride(xdmac, channel->id, cfg->dus);
   \      0x110   0xE595'2010        LDR      R2,[R5, #+16]
   \      0x114   0xE594'1004        LDR      R1,[R4, #+4]
   \      0x118   0xE6EF'1071        UXTB     R1,R1
   \      0x11C   0xE1B0'0008        MOVS     R0,R8
   \      0x120   0x....'....        BL       xdmac_set_dest_microblock_stride
    133          		}
    134          		xdmac_set_channel_config(xdmac, channel->id, cfg->cfg);
   \                     ??xdmacd_configure_transfer_7:
   \      0x124   0xE595'201C        LDR      R2,[R5, #+28]
   \      0x128   0xE594'1004        LDR      R1,[R4, #+4]
   \      0x12C   0xE6EF'1071        UXTB     R1,R1
   \      0x130   0xE1B0'0008        MOVS     R0,R8
   \      0x134   0x....'....        BL       xdmac_set_channel_config
    135          		xdmac_set_descriptor_addr(xdmac, channel->id, desc_addr, 0);
   \      0x138   0xE3A0'3000        MOV      R3,#+0
   \      0x13C   0xE1B0'2007        MOVS     R2,R7
   \      0x140   0xE594'1004        LDR      R1,[R4, #+4]
   \      0x144   0xE6EF'1071        UXTB     R1,R1
   \      0x148   0xE1B0'0008        MOVS     R0,R8
   \      0x14C   0x....'....        BL       xdmac_set_descriptor_addr
    136          		xdmac_set_descriptor_control(xdmac, channel->id, desc_cntrl);
   \      0x150   0xE1B0'2006        MOVS     R2,R6
   \      0x154   0xE594'1004        LDR      R1,[R4, #+4]
   \      0x158   0xE6EF'1071        UXTB     R1,R1
   \      0x15C   0xE1B0'0008        MOVS     R0,R8
   \      0x160   0x....'....        BL       xdmac_set_descriptor_control
    137          		xdmac_disable_channel_it(xdmac, channel->id, XDMAC_CID_BID
    138          					 | XDMAC_CID_LID | XDMAC_CID_DID
    139          					 | XDMAC_CID_FID | XDMAC_CID_RBEID
    140          					 | XDMAC_CID_WBEID | XDMAC_CID_ROID);
   \      0x164   0xE3A0'207F        MOV      R2,#+127
   \      0x168   0xE594'1004        LDR      R1,[R4, #+4]
   \      0x16C   0xE6EF'1071        UXTB     R1,R1
   \      0x170   0xE1B0'0008        MOVS     R0,R8
   \      0x174   0x....'....        BL       xdmac_disable_channel_it
    141          		xdmac_enable_channel_it(xdmac, channel->id, XDMAC_CIE_LIE);
   \      0x178   0xE3A0'2002        MOV      R2,#+2
   \      0x17C   0xE594'1004        LDR      R1,[R4, #+4]
   \      0x180   0xE6EF'1071        UXTB     R1,R1
   \      0x184   0xE1B0'0008        MOVS     R0,R8
   \      0x188   0x....'....        BL       xdmac_enable_channel_it
   \      0x18C   0xEA00'003C        B        ??xdmacd_configure_transfer_8
    142          	} else {
    143          		/* Linked List is disabled. */
    144          		xdmac_set_src_addr(xdmac, channel->id, cfg->sa);
   \                     ??xdmacd_configure_transfer_6:
   \      0x190   0xE595'2014        LDR      R2,[R5, #+20]
   \      0x194   0xE594'1004        LDR      R1,[R4, #+4]
   \      0x198   0xE6EF'1071        UXTB     R1,R1
   \      0x19C   0xE1B0'0008        MOVS     R0,R8
   \      0x1A0   0x....'....        BL       xdmac_set_src_addr
    145          		xdmac_set_dest_addr(xdmac, channel->id, cfg->da);
   \      0x1A4   0xE595'2018        LDR      R2,[R5, #+24]
   \      0x1A8   0xE594'1004        LDR      R1,[R4, #+4]
   \      0x1AC   0xE6EF'1071        UXTB     R1,R1
   \      0x1B0   0xE1B0'0008        MOVS     R0,R8
   \      0x1B4   0x....'....        BL       xdmac_set_dest_addr
    146          		xdmac_set_microblock_control(xdmac, channel->id, cfg->ubc);
   \      0x1B8   0xE595'2000        LDR      R2,[R5, #+0]
   \      0x1BC   0xE594'1004        LDR      R1,[R4, #+4]
   \      0x1C0   0xE6EF'1071        UXTB     R1,R1
   \      0x1C4   0xE1B0'0008        MOVS     R0,R8
   \      0x1C8   0x....'....        BL       xdmac_set_microblock_control
    147          		xdmac_set_block_control(xdmac, channel->id, cfg->bc);
   \      0x1CC   0xE595'2004        LDR      R2,[R5, #+4]
   \      0x1D0   0xE594'1004        LDR      R1,[R4, #+4]
   \      0x1D4   0xE6EF'1071        UXTB     R1,R1
   \      0x1D8   0xE1B0'0008        MOVS     R0,R8
   \      0x1DC   0x....'....        BL       xdmac_set_block_control
    148          		xdmac_set_data_stride_mem_pattern(xdmac, channel->id, cfg->ds);
   \      0x1E0   0xE595'2008        LDR      R2,[R5, #+8]
   \      0x1E4   0xE594'1004        LDR      R1,[R4, #+4]
   \      0x1E8   0xE6EF'1071        UXTB     R1,R1
   \      0x1EC   0xE1B0'0008        MOVS     R0,R8
   \      0x1F0   0x....'....        BL       xdmac_set_data_stride_mem_pattern
    149          		xdmac_set_src_microblock_stride(xdmac, channel->id, cfg->sus);
   \      0x1F4   0xE595'200C        LDR      R2,[R5, #+12]
   \      0x1F8   0xE594'1004        LDR      R1,[R4, #+4]
   \      0x1FC   0xE6EF'1071        UXTB     R1,R1
   \      0x200   0xE1B0'0008        MOVS     R0,R8
   \      0x204   0x....'....        BL       xdmac_set_src_microblock_stride
    150          		xdmac_set_dest_microblock_stride(xdmac, channel->id, cfg->dus);
   \      0x208   0xE595'2010        LDR      R2,[R5, #+16]
   \      0x20C   0xE594'1004        LDR      R1,[R4, #+4]
   \      0x210   0xE6EF'1071        UXTB     R1,R1
   \      0x214   0xE1B0'0008        MOVS     R0,R8
   \      0x218   0x....'....        BL       xdmac_set_dest_microblock_stride
    151          		xdmac_set_channel_config(xdmac, channel->id, cfg->cfg);
   \      0x21C   0xE595'201C        LDR      R2,[R5, #+28]
   \      0x220   0xE594'1004        LDR      R1,[R4, #+4]
   \      0x224   0xE6EF'1071        UXTB     R1,R1
   \      0x228   0xE1B0'0008        MOVS     R0,R8
   \      0x22C   0x....'....        BL       xdmac_set_channel_config
    152          		xdmac_set_descriptor_addr(xdmac, channel->id, 0, 0);
   \      0x230   0xE3A0'3000        MOV      R3,#+0
   \      0x234   0xE3A0'2000        MOV      R2,#+0
   \      0x238   0xE594'1004        LDR      R1,[R4, #+4]
   \      0x23C   0xE6EF'1071        UXTB     R1,R1
   \      0x240   0xE1B0'0008        MOVS     R0,R8
   \      0x244   0x....'....        BL       xdmac_set_descriptor_addr
    153          		xdmac_set_descriptor_control(xdmac, channel->id, 0);
   \      0x248   0xE3A0'2000        MOV      R2,#+0
   \      0x24C   0xE594'1004        LDR      R1,[R4, #+4]
   \      0x250   0xE6EF'1071        UXTB     R1,R1
   \      0x254   0xE1B0'0008        MOVS     R0,R8
   \      0x258   0x....'....        BL       xdmac_set_descriptor_control
    154          		xdmac_disable_channel_it(xdmac, channel->id, XDMAC_CID_LID);
   \      0x25C   0xE3A0'2002        MOV      R2,#+2
   \      0x260   0xE594'1004        LDR      R1,[R4, #+4]
   \      0x264   0xE6EF'1071        UXTB     R1,R1
   \      0x268   0xE1B0'0008        MOVS     R0,R8
   \      0x26C   0x....'....        BL       xdmac_disable_channel_it
    155          		xdmac_enable_channel_it(xdmac, channel->id, XDMAC_CIE_BIE
    156          					| XDMAC_CIE_LIE | XDMAC_CIE_DIE
    157          					| XDMAC_CIE_FIE | XDMAC_CIE_RBIE
    158          					| XDMAC_CIE_WBIE | XDMAC_CIE_ROIE);
   \      0x270   0xE3A0'207F        MOV      R2,#+127
   \      0x274   0xE594'1004        LDR      R1,[R4, #+4]
   \      0x278   0xE6EF'1071        UXTB     R1,R1
   \      0x27C   0xE1B0'0008        MOVS     R0,R8
   \      0x280   0x....'....        BL       xdmac_enable_channel_it
    159          	}
    160          	return 0;
   \                     ??xdmacd_configure_transfer_8:
   \      0x284   0xE3A0'0000        MOV      R0,#+0
   \                     ??xdmacd_configure_transfer_1:
   \      0x288   0xE8BD'83F2        POP      {R1,R4-R9,PC}    ;; return
    161          }
    162          

   \                                 In section SOFTPACK, align 4, keep-with-next
    163          void dma_irq_handler(uint32_t source, void* user_arg)
    164          {
   \                     dma_irq_handler:
   \        0x0   0xE92D'4FF3        PUSH     {R0,R1,R4-R11,LR}
   \        0x4   0xE24D'D004        SUB      SP,SP,#+4
    165          	uint32_t chan, gis, gcs;
    166          	struct _dma_controller* ctrl = (struct _dma_controller*)user_arg;
   \        0x8   0xE59D'0008        LDR      R0,[SP, #+8]
   \        0xC   0xE58D'0000        STR      R0,[SP, #+0]
    167          	Xdmac* xdmac = ctrl->hw;
   \       0x10   0xE59D'0000        LDR      R0,[SP, #+0]
   \       0x14   0xE590'4004        LDR      R4,[R0, #+4]
    168          
    169          	gis = xdmac_get_global_isr(xdmac);
   \       0x18   0xE1B0'0004        MOVS     R0,R4
   \       0x1C   0x....'....        BL       xdmac_get_global_isr
   \       0x20   0xE1B0'5000        MOVS     R5,R0
    170          	if ((gis & ((1ull << DMA_CHANNELS) - 1)) == 0)
   \       0x24   0xE1B0'0805        LSLS     R0,R5,#+16
   \       0x28   0xE1B0'0820        LSRS     R0,R0,#+16
   \       0x2C   0xE6FF'0070        UXTH     R0,R0
   \       0x30   0xE350'0000        CMP      R0,#+0
   \       0x34   0x0A00'003A        BEQ      ??dma_irq_handler_0
    171          		return;
    172          
    173          	gcs = xdmac_get_global_channel_status(xdmac);
   \                     ??dma_irq_handler_1:
   \       0x38   0xE1B0'0004        MOVS     R0,R4
   \       0x3C   0x....'....        BL       xdmac_get_global_channel_status
   \       0x40   0xE1B0'6000        MOVS     R6,R0
    174          	for (chan = 0; chan < DMA_CHANNELS; chan++) {
   \       0x44   0xE3A0'7000        MOV      R7,#+0
   \       0x48   0xE1B0'8007        MOVS     R8,R7
   \                     ??dma_irq_handler_2:
   \       0x4C   0xE358'0010        CMP      R8,#+16
   \       0x50   0x2A00'0033        BCS      ??dma_irq_handler_3
    175          		struct _dma_channel* channel = &ctrl->channels[chan];
   \       0x54   0xE59D'0000        LDR      R0,[SP, #+0]
   \       0x58   0xE068'1188        RSB      R1,R8,R8, LSL #+3
   \       0x5C   0xE090'0101        ADDS     R0,R0,R1, LSL #+2
   \       0x60   0xE290'9008        ADDS     R9,R0,#+8
    176          		bool exec = false;
   \       0x64   0xE1B0'A007        MOVS     R10,R7
    177          
    178          		if (!(gis & (1 << chan)))
   \       0x68   0xE3A0'0001        MOV      R0,#+1
   \       0x6C   0xE110'0835        TST      R0,R5, LSR R8
   \       0x70   0x0A00'0029        BEQ      ??dma_irq_handler_4
    179          			continue;
    180          		if (channel->state == DMA_STATE_FREE)
   \                     ??dma_irq_handler_5:
   \       0x74   0xE5D9'0014        LDRB     R0,[R9, #+20]
   \       0x78   0xE350'0000        CMP      R0,#+0
   \       0x7C   0x0A00'0026        BEQ      ??dma_irq_handler_4
    181          			continue;
    182          
    183          		if (!(gcs & (1 << chan))) {
   \                     ??dma_irq_handler_6:
   \       0x80   0xE3A0'0001        MOV      R0,#+1
   \       0x84   0xE110'0836        TST      R0,R6, LSR R8
   \       0x88   0x1A00'001C        BNE      ??dma_irq_handler_7
    184          			uint32_t cis = xdmac_get_channel_isr(xdmac, chan);
   \       0x8C   0xE1B0'1008        MOVS     R1,R8
   \       0x90   0xE6EF'1071        UXTB     R1,R1
   \       0x94   0xE1B0'0004        MOVS     R0,R4
   \       0x98   0x....'....        BL       xdmac_get_channel_isr
   \       0x9C   0xE1B0'B000        MOVS     R11,R0
    185          
    186          			if (cis & XDMAC_CIS_BIS) {
   \       0xA0   0xE31B'0001        TST      R11,#0x1
   \       0xA4   0x0A00'0009        BEQ      ??dma_irq_handler_8
    187          				if (!(xdmac_get_channel_it_mask(xdmac, chan) & XDMAC_CIM_LIM)) {
   \       0xA8   0xE1B0'1008        MOVS     R1,R8
   \       0xAC   0xE6EF'1071        UXTB     R1,R1
   \       0xB0   0xE1B0'0004        MOVS     R0,R4
   \       0xB4   0x....'....        BL       xdmac_get_channel_it_mask
   \       0xB8   0xE310'0002        TST      R0,#0x2
   \       0xBC   0x1A00'0003        BNE      ??dma_irq_handler_8
    188          					channel->state = DMA_STATE_DONE;
   \       0xC0   0xE3A0'0003        MOV      R0,#+3
   \       0xC4   0xE5C9'0014        STRB     R0,[R9, #+20]
    189          					exec = 1;
   \       0xC8   0xE3A0'0001        MOV      R0,#+1
   \       0xCC   0xE1B0'A000        MOVS     R10,R0
    190          				}
    191          			}
    192          
    193          			if (cis & XDMAC_CIS_LIS) {
   \                     ??dma_irq_handler_8:
   \       0xD0   0xE31B'0002        TST      R11,#0x2
   \       0xD4   0x0A00'0003        BEQ      ??dma_irq_handler_9
    194          				channel->state = DMA_STATE_DONE;
   \       0xD8   0xE3A0'0003        MOV      R0,#+3
   \       0xDC   0xE5C9'0014        STRB     R0,[R9, #+20]
    195          				exec = 1;
   \       0xE0   0xE3A0'0001        MOV      R0,#+1
   \       0xE4   0xE1B0'A000        MOVS     R10,R0
    196          			}
    197          
    198          			if (cis & XDMAC_CIS_DIS) {
   \                     ??dma_irq_handler_9:
   \       0xE8   0xE31B'0004        TST      R11,#0x4
   \       0xEC   0x0A00'0003        BEQ      ??dma_irq_handler_7
    199          				channel->state = DMA_STATE_DONE;
   \       0xF0   0xE3A0'0003        MOV      R0,#+3
   \       0xF4   0xE5C9'0014        STRB     R0,[R9, #+20]
    200          				exec = 1;
   \       0xF8   0xE3A0'0001        MOV      R0,#+1
   \       0xFC   0xE1B0'A000        MOVS     R10,R0
    201          			}
    202          		}
    203          
    204          		/* Execute callback */
    205          		if (exec)
   \                     ??dma_irq_handler_7:
   \      0x100   0xE1B0'000A        MOVS     R0,R10
   \      0x104   0xE6EF'0070        UXTB     R0,R0
   \      0x108   0xE350'0000        CMP      R0,#+0
   \      0x10C   0x0A00'0002        BEQ      ??dma_irq_handler_4
    206          			callback_call(&channel->callback, NULL);
   \      0x110   0xE3A0'1000        MOV      R1,#+0
   \      0x114   0xE299'0008        ADDS     R0,R9,#+8
   \      0x118   0x....'....        BL       callback_call
    207          	}
   \                     ??dma_irq_handler_4:
   \      0x11C   0xE298'8001        ADDS     R8,R8,#+1
   \      0x120   0xEAFF'FFC9        B        ??dma_irq_handler_2
    208          }
   \                     ??dma_irq_handler_3:
   \                     ??dma_irq_handler_0:
   \      0x124   0xE8BD'8FF7        POP      {R0-R2,R4-R11,PC}  ;; return

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      48   dma_irq_handler
        48   -> callback_call
        48   -> xdmac_get_channel_isr
        48   -> xdmac_get_channel_it_mask
        48   -> xdmac_get_global_channel_status
        48   -> xdmac_get_global_isr
      16   dma_prepare_channel
        16   -> get_xdmac_id_from_addr
        16   -> pmc_configure_peripheral
        16   -> xdmac_disable_channel
        16   -> xdmac_disable_channel_it
        16   -> xdmac_disable_global_it
        16   -> xdmac_get_channel_isr
        16   -> xdmac_get_global_channel_status
        16   -> xdmac_get_global_isr
        16   -> xdmac_set_block_control
        16   -> xdmac_set_channel_config
        16   -> xdmac_set_descriptor_addr
        16   -> xdmac_set_descriptor_control
        16   -> xdmac_set_dest_addr
        16   -> xdmac_set_src_addr
      32   xdmacd_configure_transfer
        32   -> xdmac_disable_channel_it
        32   -> xdmac_enable_channel_it
        32   -> xdmac_get_channel_isr
        32   -> xdmac_get_global_isr
        32   -> xdmac_set_block_control
        32   -> xdmac_set_channel_config
        32   -> xdmac_set_data_stride_mem_pattern
        32   -> xdmac_set_descriptor_addr
        32   -> xdmac_set_descriptor_control
        32   -> xdmac_set_dest_addr
        32   -> xdmac_set_dest_microblock_stride
        32   -> xdmac_set_microblock_control
        32   -> xdmac_set_src_addr
        32   -> xdmac_set_src_microblock_stride


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     296  dma_irq_handler
     292  dma_prepare_channel
     652  xdmacd_configure_transfer

 
 1'240 bytes in section SOFTPACK
 
 1'240 bytes of CODE memory

Errors: none
Warnings: none
