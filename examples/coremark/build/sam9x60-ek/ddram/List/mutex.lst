###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.1.245/W32 for ARM         30/Apr/2020  11:05:18
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\arch\arm\mutex.c
#    Command line      =
#        -f C:\Users\c40450\AppData\Local\Temp\EW3146.tmp
#        (C:\work\AtmelSoftPAck\atmel-software-package-2.17\arch\arm\mutex.c -D
#        "SOFTPACK_VERSION=\"2.17\"" -D TRACE_LEVEL=5 -D VARIANT_DDRAM -D
#        CONFIG_ARCH_ARMV5TE -D CONFIG_ARCH_ARM -D CONFIG_SOC_SAM9X60 -D
#        CONFIG_CHIP_SAM9X60 -D CONFIG_BOARD_SAM9X60_EK -D CONFIG_HAVE_AIC5 -D
#        CONFIG_HAVE_FLEXCOM -D CONFIG_HAVE_PIO3 -D CONFIG_HAVE_PIT -D
#        CONFIG_HAVE_SMC -D CONFIG_HAVE_SDRAMC -D CONFIG_HAVE_MPDDRC -D
#        CONFIG_HAVE_MPDDRC_DATA_PATH -D CONFIG_HAVE_MPDDRC_IO_CALIBRATION -D
#        CONFIG_HAVE_MPDDRC_DDR2 -D CONFIG_HAVE_ADC_LOW_RES -D
#        CONFIG_HAVE_PMC_FAST_STARTUP -D CONFIG_HAVE_PMC_GENERATED_CLOCKS -D
#        CONFIG_HAVE_SCKC -D CONFIG_HAVE_NFD0_ON_D16 -D CONFIG_HAVE_XDMAC -D
#        CONFIG_HAVE_PWMC -D CONFIG_HAVE_DDR2_W972GG6KB -D
#        CONFIG_HAVE_RSTC_EXTERNAL_RESET -D CONFIG_HAVE_RSTC_INDEPENDENT_RESET
#        -D CONFIG_HAVE_RTT -D CONFIG_HAVE_SHDWC -D CONFIG_HAVE_LED -D
#        CONFIG_HAVE_MMU -D CONFIG_HAVE_L1CACHE -D CONFIG_HAVE_OTPC -D
#        CONFIG_HAVE_DBGU -D CONFIG_HAVE_SERIALD_DBGU -D CONFIG_HAVE_USART -D
#        CONFIG_HAVE_USART_FIFO -D CONFIG_HAVE_DWDT --preprocess
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\coremark\build\sam9x60-ek\ddram\List
#        -lC
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\coremark\build\sam9x60-ek\ddram\List
#        --diag_suppress Pa050 -o
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\coremark\build\sam9x60-ek\ddram\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=ARM926EJ-S -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\coremark\..\..\arch\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\coremark\..\..\utils\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\coremark\..\..\target\common\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\coremark\..\..\target\sam9x60\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\coremark\..\..\drivers\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\coremark\..\..\lib\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\coremark\coremark\
#        --section .text=SOFTPACK --cpu_mode arm -On)
#    Locale            =  C
#    List file         =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\coremark\build\sam9x60-ek\ddram\List\mutex.lst
#    Object file       =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\coremark\build\sam9x60-ek\ddram\Obj\mutex.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\work\AtmelSoftPAck\atmel-software-package-2.17\arch\arm\mutex.c
      1          /* ----------------------------------------------------------------------------
      2           *         SAM Software Package License
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2015, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          #include "barriers.h"

   \                                 In section SOFTPACK, align 4, keep-with-next
   \   static __interwork __softfp void dmb(void)
   \                     `dmb`:
   \        0x0   0xE12F'FF1E        BX       LR               ;; return
     31          #include "chip.h"
     32          #include "mutex.h"
     33          #include "cpuidle.h"

   \                                 In section SOFTPACK, align 4, keep-with-next
   \   static __interwork __softfp void cpu_idle(void)
   \                     cpu_idle:
   \        0x0   0xE3A0'0000        MOV      R0,#+0
   \        0x4   0xEE07'0F9A        mcr p15, 0, R0, c7, c10, 4
   \        0x8   0xE3A0'0000        MOV      R0,#+0
   \        0xC   0xEE07'0F90        mcr p15, 0, R0, c7, c0, 4
   \       0x10   0xE12F'FF1E        BX       LR               ;; return
     34          
     35          #include <stdint.h>
     36          #include <stdbool.h>
     37          
     38          #define MUTEX_LOCKED   1
     39          #define MUTEX_UNLOCKED 0
     40          

   \                                 In section SOFTPACK, align 4, keep-with-next
     41          void mutex_lock(mutex_t* mutex)
     42          {
   \                     mutex_lock:
   \        0x0   0xE92D'4010        PUSH     {R4,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
     43          	while (!mutex_try_lock(mutex)) {
   \                     ??mutex_lock_0:
   \        0x8   0xE1B0'0004        MOVS     R0,R4
   \        0xC   0x....'....        BL       mutex_try_lock
   \       0x10   0xE350'0000        CMP      R0,#+0
   \       0x14   0x1A00'0001        BNE      ??mutex_lock_1
     44          		cpu_idle();
   \       0x18   0x....'....        BL       cpu_idle
   \       0x1C   0xEAFF'FFF9        B        ??mutex_lock_0
     45          	}
     46          }
   \                     ??mutex_lock_1:
   \       0x20   0xE8BD'8010        POP      {R4,PC}          ;; return
     47          
     48          #if defined(CONFIG_ARCH_ARMV7A) || defined(CONFIG_ARCH_ARMV7M)
     49          
     50          bool mutex_try_lock(mutex_t* mutex)
     51          {
     52          	uint32_t value;
     53          	while (true)
     54          	{
     55          		// Read the current mutex value and tag the mutex address for exclusive access by the executing processor
     56          		__asm volatile("ldrex %0, [%1]" : "=r"(value) : "r"(mutex));
     57          		if (value != MUTEX_UNLOCKED)
     58          			return false;
     59          		// Provided the executing processor still has exclusive access to the mutex address, lock it now
     60          		__asm volatile("strex %0, %1, [%2]" : "=&r"(value) : "r"(MUTEX_LOCKED), "r"(mutex));
     61          		if (value == 0) /* Check if strex was ok */
     62          			break;
     63          	}
     64          	dmb();
     65          	return true;
     66          }
     67          
     68          #elif defined(CONFIG_ARCH_ARMV5TE)
     69          

   \                                 In section SOFTPACK, align 4, keep-with-next
     70          bool mutex_try_lock(mutex_t* mutex)
     71          {
     72          	uint32_t value;
     73          	asm("swp %0, %1, [%2]" : "=&r"(value) : "r"(MUTEX_LOCKED), "r"(mutex));
   \                     mutex_try_lock:
   \        0x0   0xE3A0'2001        MOV      R2,#+1
   \        0x4   0xE100'1092        swp R1, R2, [R0]
     74          	return value == MUTEX_UNLOCKED;
   \        0x8   0xE351'0000        CMP      R1,#+0
   \        0xC   0x1A00'0001        BNE      ??mutex_try_lock_0
   \       0x10   0xE3A0'0001        MOV      R0,#+1
   \       0x14   0xEA00'0000        B        ??mutex_try_lock_1
   \                     ??mutex_try_lock_0:
   \       0x18   0xE3A0'0000        MOV      R0,#+0
   \                     ??mutex_try_lock_1:
   \       0x1C   0xE210'00FF        ANDS     R0,R0,#0xFF      ;; Zero extend
   \       0x20   0xE12F'FF1E        BX       LR               ;; return
     75          }
     76          
     77          #endif
     78          

   \                                 In section SOFTPACK, align 4, keep-with-next
     79          void mutex_unlock(mutex_t* mutex)
     80          {
   \                     mutex_unlock:
   \        0x0   0xE92D'4010        PUSH     {R4,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
     81          	dmb();
   \        0x8   0x....'....        BL       `dmb`
     82          	*mutex = MUTEX_UNLOCKED;
   \        0xC   0xE3A0'0000        MOV      R0,#+0
   \       0x10   0xE584'0000        STR      R0,[R4, #+0]
     83          }
   \       0x14   0xE8BD'8010        POP      {R4,PC}          ;; return
     84          

   \                                 In section SOFTPACK, align 4, keep-with-next
     85          bool mutex_is_locked(const mutex_t* mutex)
     86          {
     87          	return *mutex != MUTEX_UNLOCKED;
   \                     mutex_is_locked:
   \        0x0   0xE590'0000        LDR      R0,[R0, #+0]
   \        0x4   0xE350'0000        CMP      R0,#+0
   \        0x8   0x0A00'0001        BEQ      ??mutex_is_locked_0
   \        0xC   0xE3A0'0001        MOV      R0,#+1
   \       0x10   0xEA00'0000        B        ??mutex_is_locked_1
   \                     ??mutex_is_locked_0:
   \       0x14   0xE3A0'0000        MOV      R0,#+0
   \                     ??mutex_is_locked_1:
   \       0x18   0xE210'00FF        ANDS     R0,R0,#0xFF      ;; Zero extend
   \       0x1C   0xE12F'FF1E        BX       LR               ;; return
     88          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   cpu_idle
       0   dmb
       0   mutex_is_locked
       8   mutex_lock
         8   -> cpu_idle
         8   -> mutex_try_lock
       0   mutex_try_lock
       8   mutex_unlock
         8   -> dmb


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      20  cpu_idle
       4  dmb
      32  mutex_is_locked
      36  mutex_lock
      36  mutex_try_lock
      24  mutex_unlock

 
 152 bytes in section SOFTPACK
 
 152 bytes of CODE memory

Errors: none
Warnings: none
