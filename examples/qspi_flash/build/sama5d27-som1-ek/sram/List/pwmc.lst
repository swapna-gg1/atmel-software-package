###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.1.245/W32 for ARM         18/Feb/2021  16:03:17
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode                    
#    Endian                   =  little
#    Source file              =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\peripherals\pwmc.c
#    Command line             =
#        -f C:\Users\c40450\AppData\Local\Temp\EWAC9C.tmp
#        (C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\peripherals\pwmc.c
#        -D "SOFTPACK_VERSION=\"2.17\"" -D TRACE_LEVEL=5 -D VARIANT_SRAM -D
#        CONFIG_ARCH_ARMV7A -D CONFIG_ARCH_ARM -D CONFIG_SOC_SAMA5D2 -D
#        CONFIG_CHIP_SAMA5D27 -D CONFIG_PACKAGE_289PIN -D
#        CONFIG_BOARD_SAMA5D27_SOM1_EK -D CONFIG_HAVE_AIC5 -D
#        CONFIG_HAVE_FLEXCOM -D CONFIG_HAVE_PIO4 -D CONFIG_HAVE_PIO4_SECURE -D
#        CONFIG_HAVE_QSPI -D CONFIG_HAVE_QSPI_DMA -D CONFIG_HAVE_NFC -D
#        CONFIG_HAVE_PIT -D CONFIG_HAVE_SMC -D CONFIG_HAVE_SMC_SCRAMBLING -D
#        CONFIG_HAVE_GMAC_QUEUES -D CONFIG_HAVE_MPDDRC -D
#        CONFIG_HAVE_MPDDRC_DATA_PATH -D CONFIG_HAVE_MPDDRC_IO_CALIBRATION -D
#        CONFIG_HAVE_MPDDRC_DDR2 -D CONFIG_HAVE_MPDDRC_LPDDR2 -D
#        CONFIG_HAVE_MPDDRC_DDR3 -D CONFIG_HAVE_MPDDRC_LPDDR3 -D
#        CONFIG_HAVE_ADC_SETTLING_TIME -D CONFIG_HAVE_ADC_DIFF_INPUT -D
#        CONFIG_HAVE_ADC_SEQ_R2 -D CONFIG_HAVE_PMC_FAST_STARTUP -D
#        CONFIG_HAVE_PMC_GENERATED_CLOCKS -D CONFIG_HAVE_PMC_AUDIO_CLOCK -D
#        CONFIG_HAVE_PMC_PLLADIV2 -D CONFIG_HAVE_PMC_H32MXDIV -D
#        CONFIG_HAVE_PMC_UPLL_BIAS -D CONFIG_HAVE_SCKC -D CONFIG_HAVE_PWMC_DMA
#        -D CONFIG_HAVE_PWMC_SPREAD_SPECTRUM -D
#        CONFIG_HAVE_PWMC_EXTERNAL_TRIGGER -D CONFIG_HAVE_PWMC_FAULT_PROT_HIZ
#        -D CONFIG_HAVE_PWMC_STEPPER_MOTOR -D CONFIG_HAVE_PWMC_CMP_UNIT -D
#        CONFIG_HAVE_PWMC_SYNC_MODE -D CONFIG_HAVE_PWMC_OOV -D
#        CONFIG_HAVE_PWMC_FMODE -D CONFIG_HAVE_PWMC_WP -D
#        CONFIG_HAVE_PWMC_DTIME -D CONFIG_HAVE_PWMC_ELINE -D CONFIG_HAVE_SFRBU
#        -D CONFIG_HAVE_L2CC -D CONFIG_HAVE_SAIC -D CONFIG_HAVE_XDMAC -D
#        CONFIG_HAVE_XDMAC_DATA_WIDTH_DWORD -D CONFIG_HAVE_TRNG -D
#        CONFIG_HAVE_SECUMOD -D CONFIG_HAVE_SFC -D CONFIG_HAVE_PWMC -D
#        CONFIG_HAVE_SECURE_MATRIX -D CONFIG_HAVE_DDR2_W971GG6SB -D
#        CONFIG_HAVE_RSTC_CONFIGURABLE_USER_RESET -D CONFIG_HAVE_TC_FAULT_MODE
#        -D CONFIG_HAVE_TC_DMA_MODE -D CONFIG_HAVE_RTC_CALIBRATION -D
#        CONFIG_HAVE_RTC_MODE_PERSIAN -D CONFIG_HAVE_RTC_MODE_UTC -D
#        CONFIG_HAVE_RTC_TAMPER -D CONFIG_HAVE_SHDWC -D CONFIG_HAVE_SPI -D
#        CONFIG_HAVE_SPI_FIFO -D CONFIG_HAVE_SPI_NOR -D CONFIG_HAVE_MMU -D
#        CONFIG_HAVE_L1CACHE -D CONFIG_HAVE_L2CACHE -D CONFIG_HAVE_SPI_BUS -D
#        CONFIG_HAVE_UART -D CONFIG_HAVE_SERIALD_UART -D CONFIG_HAVE_USART -D
#        CONFIG_HAVE_USART_FIFO --preprocess
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\qspi_flash\build\sama5d27-som1-ek\sram\List
#        -lC
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\qspi_flash\build\sama5d27-som1-ek\sram\List
#        --diag_suppress Pa050 -o
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\qspi_flash\build\sama5d27-som1-ek\sram\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-A5 -e --fpu=VFPv4_D16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\qspi_flash\..\..\arch\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\qspi_flash\..\..\utils\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\qspi_flash\..\..\target\common\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\qspi_flash\..\..\target\sama5d2\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\qspi_flash\..\..\drivers\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\qspi_flash\..\..\lib\
#        --section .text=SOFTPACK --cpu_mode arm -On)
#    Locale                   =  C
#    List file                =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\qspi_flash\build\sama5d27-som1-ek\sram\List\pwmc.lst
#    Object file              =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\qspi_flash\build\sama5d27-som1-ek\sram\Obj\pwmc.o
#    Runtime model:              
#      __SystemLibrary        =  DLib
#      __dlib_file_descriptor =  0
#      __dlib_version         =  6
#      __iar_require _Printf  =  flags,int_specials,widths
#
###############################################################################

C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\peripherals\pwmc.c
      1          /* ----------------------------------------------------------------------------
      2           *         SAM Software Package License
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2016, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          /** \addtogroup pwm_module Working with PWM
     31           * \section Purpose
     32           * The PWM driver provides the interface to configure and use the PWM
     33           * peripheral.
     34           *
     35           * The PWM macrocell controls square output waveforms of 4 channels.
     36           * Characteristics of output waveforms such as period, duty-cycle can be configured.\n
     37           *
     38           * Before enabling the channels, they must have been configured first.
     39           * The main settings include:
     40           * <ul>
     41           * <li>Configuration of the clock generator.</li>
     42           * <li>Selection of the clock for each channel.</li>
     43           * <li>Configuration of output waveform characteristics, such as period, duty-cycle etc.</li>
     44           * </ul>
     45           *
     46           * After the channels is enabled, the user must use respective update registers
     47           * to change the wave characteristics to prevent unexpected output waveform.
     48           * i.e. PWM_CUPDx register should be used if user want to change duty-cycle
     49           * when the channel is enabled.
     50           *
     51           * \section Usage
     52           * <ul>
     53           * <li>  Configure PWM clock using pwmc_configure_clocks().
     54           * <li>  Enable & disable given PWM channel using pwmc_enable_channel() and pwmc_disable_channel().
     55           * <li>  Enable & disable interrupt of given PWM channel using pwmc_enable_channel_it()
     56           * and pwmc_disable_channel_it().
     57           * <li>  Set feature of the given PWM channel's output signal using pwmc_set_period()
     58           * and pwmc_set_duty_cycle().
     59           * </li>
     60           * </ul>
     61           *
     62           * For more accurate information, please look at the PWM section of the
     63           * Datasheet.
     64           *
     65           * Related files :\n
     66           * \ref pwmc.c\n
     67           * \ref pwmc.h.\n
     68           */
     69          /*@{*/
     70          /*@}*/
     71          
     72          /**
     73           * \file
     74           *
     75           * Implementation of the Pulse Width Modulation Controller (PWM) peripheral.
     76           *
     77           */
     78          
     79          /*----------------------------------------------------------------------------
     80           *        Headers
     81           *----------------------------------------------------------------------------*/
     82          
     83          #include <assert.h>
     84          #include <stdint.h>
     85          #include <string.h>
     86          
     87          #include "callback.h"
     88          #include "chip.h"
     89          #include "dma/dma.h"
     90          #include "mm/cache.h"
     91          #include "peripherals/pwmc.h"
     92          #include "trace.h"
     93          
     94          /*----------------------------------------------------------------------------
     95           *        Local variables
     96           *----------------------------------------------------------------------------*/
     97          
     98          #ifdef CONFIG_HAVE_PWMC_DMA

   \                                 In section .bss, align 4
     99          static struct _dma_channel* pwm_dma_channel = NULL;
   \                     pwm_dma_channel:
   \        0x0                      DS8 4

   \                                 In section .bss, align 4
    100          static struct _callback pwmc_cb;
   \                     pwmc_cb:
   \        0x0                      DS8 8
    101          #endif /* CONFIG_HAVE_PWMC_DMA */
    102          
    103          /*----------------------------------------------------------------------------
    104           *        Exported functions
    105           *----------------------------------------------------------------------------*/
    106          

   \                                 In section SOFTPACK, align 4, keep-with-next
    107          void pwmc_configure_clocks(Pwm *pwm, uint32_t mode)
    108          {
    109          	pwm->PWM_CLK = mode;
   \                     pwmc_configure_clocks:
   \        0x0   0xE580'1000        STR      R1,[R0, #+0]
    110          }
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
    111          

   \                                 In section SOFTPACK, align 4, keep-with-next
    112          void pwmc_enable_channel(Pwm *pwm, uint8_t channel)
    113          {
    114          	pwm->PWM_ENA = 0x1ul << channel;
   \                     pwmc_enable_channel:
   \        0x0   0xE3A0'2001        MOV      R2,#+1
   \        0x4   0xE1B0'2112        LSLS     R2,R2,R1
   \        0x8   0xE580'2004        STR      R2,[R0, #+4]
    115          }
   \        0xC   0xE12F'FF1E        BX       LR               ;; return
    116          

   \                                 In section SOFTPACK, align 4, keep-with-next
    117          void pwmc_disable_channel(Pwm *pwm, uint8_t channel)
    118          {
    119          	pwm->PWM_DIS = 0x1ul << channel;
   \                     pwmc_disable_channel:
   \        0x0   0xE3A0'2001        MOV      R2,#+1
   \        0x4   0xE1B0'2112        LSLS     R2,R2,R1
   \        0x8   0xE580'2008        STR      R2,[R0, #+8]
    120          }
   \        0xC   0xE12F'FF1E        BX       LR               ;; return
    121          

   \                                 In section SOFTPACK, align 4, keep-with-next
    122          void pwmc_enable_channel_it(Pwm *pwm, uint8_t channel)
    123          {
    124          	pwm->PWM_IER1 = 0x1ul << channel;
   \                     pwmc_enable_channel_it:
   \        0x0   0xE3A0'2001        MOV      R2,#+1
   \        0x4   0xE1B0'2112        LSLS     R2,R2,R1
   \        0x8   0xE580'2010        STR      R2,[R0, #+16]
    125          }
   \        0xC   0xE12F'FF1E        BX       LR               ;; return
    126          

   \                                 In section SOFTPACK, align 4, keep-with-next
    127          void pwmc_disable_channel_it(Pwm *pwm, uint8_t channel)
    128          {
    129          	pwm->PWM_IDR1 = 0x1ul << channel;
   \                     pwmc_disable_channel_it:
   \        0x0   0xE3A0'2001        MOV      R2,#+1
   \        0x4   0xE1B0'2112        LSLS     R2,R2,R1
   \        0x8   0xE580'2014        STR      R2,[R0, #+20]
    130          }
   \        0xC   0xE12F'FF1E        BX       LR               ;; return
    131          

   \                                 In section SOFTPACK, align 4, keep-with-next
    132          uint32_t pwmc_get_it_status1(Pwm *pwm)
    133          {
    134          	return pwm->PWM_ISR1;
   \                     pwmc_get_it_status1:
   \        0x0   0xE590'001C        LDR      R0,[R0, #+28]
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
    135          }
    136          

   \                                 In section SOFTPACK, align 4, keep-with-next
    137          void pwmc_enable_it(Pwm *pwm, uint32_t sources1, uint32_t sources2)
    138          {
    139          	pwm->PWM_IER1 = sources1;
   \                     pwmc_enable_it:
   \        0x0   0xE580'1010        STR      R1,[R0, #+16]
    140          #ifdef CONFIG_HAVE_PWMC_CMP_UNIT
    141          	pwm->PWM_IER2 = sources2;
   \        0x4   0xE580'2034        STR      R2,[R0, #+52]
    142          #endif
    143          }
   \        0x8   0xE12F'FF1E        BX       LR               ;; return
    144          

   \                                 In section SOFTPACK, align 4, keep-with-next
    145          void pwmc_disable_it(Pwm *pwm, uint32_t sources1, uint32_t sources2)
    146          {
    147          	pwm->PWM_IDR1 = sources1;
   \                     pwmc_disable_it:
   \        0x0   0xE580'1014        STR      R1,[R0, #+20]
    148          #ifdef CONFIG_HAVE_PWMC_CMP_UNIT
    149          	pwm->PWM_IDR2 = sources2;
   \        0x4   0xE580'2038        STR      R2,[R0, #+56]
    150          #endif
    151          }
   \        0x8   0xE12F'FF1E        BX       LR               ;; return
    152          
    153          #ifdef CONFIG_HAVE_PWMC_CMP_UNIT

   \                                 In section SOFTPACK, align 4, keep-with-next
    154          uint32_t pwmc_get_it_status2(Pwm *pwm)
    155          {
    156          	return pwm->PWM_ISR2;
   \                     pwmc_get_it_status2:
   \        0x0   0xE590'0040        LDR      R0,[R0, #+64]
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
    157          }
    158          

   \                                 In section SOFTPACK, align 4, keep-with-next
    159          void pwmc_configure_comparison_unit(Pwm *pwm, uint32_t x,
    160          		uint32_t value, uint32_t mode)
    161          {
   \                     pwmc_configure_comparison_unit:
   \        0x0   0xE92D'40F8        PUSH     {R3-R7,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
   \        0x8   0xE1B0'5001        MOVS     R5,R1
   \        0xC   0xE1B0'6002        MOVS     R6,R2
   \       0x10   0xE1B0'7003        MOVS     R7,R3
    162          	assert(x < 8);
   \       0x14   0xE355'0008        CMP      R5,#+8
   \       0x18   0x3A00'0004        BCC      ??pwmc_configure_comparison_unit_0
   \       0x1C   0xE3A0'20A2        MOV      R2,#+162
   \       0x20   0x....'....        LDR      R1,??DataTable15_2
   \       0x24   0x....'....        LDR      R0,??DataTable15_3
   \       0x28   0x....'....        BL       __aeabi_assert
   \       0x2C   0x....'....        BL       __iar_EmptyStepPoint
    163          
    164          	/* If channel is disabled, write to CMPxM & CMPxV */
    165          	if ((pwm->PWM_SR & (1 << 0)) == 0) {
   \                     ??pwmc_configure_comparison_unit_0:
   \       0x30   0xE594'000C        LDR      R0,[R4, #+12]
   \       0x34   0xE310'0001        TST      R0,#0x1
   \       0x38   0x1A00'0006        BNE      ??pwmc_configure_comparison_unit_1
    166          		pwm->PWM_CMP[x].PWM_CMPM = mode;
   \       0x3C   0xE1B0'0205        LSLS     R0,R5,#+4
   \       0x40   0xE094'0000        ADDS     R0,R4,R0
   \       0x44   0xE580'7138        STR      R7,[R0, #+312]
    167          		pwm->PWM_CMP[x].PWM_CMPV = value;
   \       0x48   0xE1B0'0205        LSLS     R0,R5,#+4
   \       0x4C   0xE094'0000        ADDS     R0,R4,R0
   \       0x50   0xE580'6130        STR      R6,[R0, #+304]
   \       0x54   0xEA00'0005        B        ??pwmc_configure_comparison_unit_2
    168          	} else {
    169          		/* Otherwise use update register */
    170          		pwm->PWM_CMP[x].PWM_CMPMUPD = mode;
   \                     ??pwmc_configure_comparison_unit_1:
   \       0x58   0xE1B0'0205        LSLS     R0,R5,#+4
   \       0x5C   0xE094'0000        ADDS     R0,R4,R0
   \       0x60   0xE580'713C        STR      R7,[R0, #+316]
    171          		pwm->PWM_CMP[x].PWM_CMPVUPD = value;
   \       0x64   0xE1B0'0205        LSLS     R0,R5,#+4
   \       0x68   0xE094'0000        ADDS     R0,R4,R0
   \       0x6C   0xE580'6134        STR      R6,[R0, #+308]
    172          	}
    173          }
   \                     ??pwmc_configure_comparison_unit_2:
   \       0x70   0xE8BD'80F1        POP      {R0,R4-R7,PC}    ;; return
    174          
    175          #endif /* CONFIG_HAVE_PWMC_CMP_UNIT */
    176          

   \                                 In section SOFTPACK, align 4, keep-with-next
    177          void pwmc_configure_channel(Pwm *pwm, uint8_t channel, uint32_t mode)
    178          {
   \                     pwmc_configure_channel:
   \        0x0   0xE92D'4070        PUSH     {R4-R6,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
   \        0x8   0xE1B0'6001        MOVS     R6,R1
   \        0xC   0xE1B0'5002        MOVS     R5,R2
    179          	assert(channel < ARRAY_SIZE(pwm->PWM_CH));
   \       0x10   0xE1B0'0006        MOVS     R0,R6
   \       0x14   0xE6EF'0070        UXTB     R0,R0
   \       0x18   0xE350'0004        CMP      R0,#+4
   \       0x1C   0x3A00'0004        BCC      ??pwmc_configure_channel_0
   \       0x20   0xE3A0'20B3        MOV      R2,#+179
   \       0x24   0x....'....        LDR      R1,??DataTable15_2
   \       0x28   0x....'....        LDR      R0,??DataTable15_4
   \       0x2C   0x....'....        BL       __aeabi_assert
   \       0x30   0x....'....        BL       __iar_EmptyStepPoint
    180          
    181          	trace_debug("pwm: set channel %u with mode 0x%08x\n\r", \
    182          			(unsigned)channel, (unsigned)mode);
   \                     ??pwmc_configure_channel_0:
   \       0x34   0x....'....        LDR      R0,??DataTable15_5
   \       0x38   0xE590'0000        LDR      R0,[R0, #+0]
   \       0x3C   0xE350'0005        CMP      R0,#+5
   \       0x40   0x3A00'0004        BCC      ??pwmc_configure_channel_1
   \       0x44   0xE1B0'2005        MOVS     R2,R5
   \       0x48   0xE1B0'1006        MOVS     R1,R6
   \       0x4C   0xE6EF'1071        UXTB     R1,R1
   \       0x50   0x....'....        LDR      R0,??DataTable15_6
   \       0x54   0x....'....        BL       printf
    183          
    184          #ifdef PWM_CMUPD0_CPOLUP
    185          	if ((pwm->PWM_SR & (1 << channel)) == 0)
   \                     ??pwmc_configure_channel_1:
   \       0x58   0xE594'000C        LDR      R0,[R4, #+12]
   \       0x5C   0xE3A0'1001        MOV      R1,#+1
   \       0x60   0xE111'0630        TST      R1,R0, LSR R6
   \       0x64   0x1A00'0005        BNE      ??pwmc_configure_channel_2
    186          		pwm->PWM_CH[channel].PWM_CMR = mode;
   \       0x68   0xE1B0'0006        MOVS     R0,R6
   \       0x6C   0xE6EF'0070        UXTB     R0,R0
   \       0x70   0xE1B0'0280        LSLS     R0,R0,#+5
   \       0x74   0xE094'0000        ADDS     R0,R4,R0
   \       0x78   0xE580'5200        STR      R5,[R0, #+512]
   \       0x7C   0xEA00'000E        B        ??pwmc_configure_channel_3
    187          	else {
    188          		switch (channel) {
   \                     ??pwmc_configure_channel_2:
   \       0x80   0xE1B0'0006        MOVS     R0,R6
   \       0x84   0xE6EF'0070        UXTB     R0,R0
   \       0x88   0xE350'0000        CMP      R0,#+0
   \       0x8C   0x0A00'0003        BEQ      ??pwmc_configure_channel_4
   \       0x90   0xE350'0002        CMP      R0,#+2
   \       0x94   0x0A00'0005        BEQ      ??pwmc_configure_channel_5
   \       0x98   0x3A00'0002        BCC      ??pwmc_configure_channel_6
   \       0x9C   0xEA00'0005        B        ??pwmc_configure_channel_7
    189          			case 0:
    190          				pwm->PWM_CMUPD0 = mode;
   \                     ??pwmc_configure_channel_4:
   \       0xA0   0xE584'5400        STR      R5,[R4, #+1024]
    191          				break;
   \       0xA4   0xEA00'0004        B        ??pwmc_configure_channel_3
    192          			case 1:
    193          				pwm->PWM_CMUPD1 = mode;
   \                     ??pwmc_configure_channel_6:
   \       0xA8   0xE584'5420        STR      R5,[R4, #+1056]
    194          				break;
   \       0xAC   0xEA00'0002        B        ??pwmc_configure_channel_3
    195          			case 2:
    196          				pwm->PWM_CMUPD2 = mode;
   \                     ??pwmc_configure_channel_5:
   \       0xB0   0xE584'5440        STR      R5,[R4, #+1088]
    197          				break;
   \       0xB4   0xEA00'0000        B        ??pwmc_configure_channel_3
    198          			case 3:
    199          			default:
    200          				pwm->PWM_CMUPD3 = mode;
   \                     ??pwmc_configure_channel_7:
   \       0xB8   0xE584'5460        STR      R5,[R4, #+1120]
    201          				break;
    202          		}
    203          	}
    204          #else
    205          	pwm->PWM_CH[channel].PWM_CMR = mode;
    206          #endif
    207          }
   \                     ??pwmc_configure_channel_3:
   \       0xBC   0xE8BD'8070        POP      {R4-R6,PC}       ;; return
    208          

   \                                 In section SOFTPACK, align 4, keep-with-next
    209          void pwmc_set_period(Pwm *pwm, uint8_t channel, uint16_t period)
    210          {
   \                     pwmc_set_period:
   \        0x0   0xE92D'4070        PUSH     {R4-R6,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
   \        0x8   0xE1B0'5001        MOVS     R5,R1
   \        0xC   0xE1B0'6002        MOVS     R6,R2
    211          	assert(channel < ARRAY_SIZE(pwm->PWM_CH));
   \       0x10   0xE1B0'0005        MOVS     R0,R5
   \       0x14   0xE6EF'0070        UXTB     R0,R0
   \       0x18   0xE350'0004        CMP      R0,#+4
   \       0x1C   0x3A00'0004        BCC      ??pwmc_set_period_0
   \       0x20   0xE3A0'20D3        MOV      R2,#+211
   \       0x24   0x....'....        LDR      R1,??DataTable15_2
   \       0x28   0x....'....        LDR      R0,??DataTable15_4
   \       0x2C   0x....'....        BL       __aeabi_assert
   \       0x30   0x....'....        BL       __iar_EmptyStepPoint
    212          
    213          	/* If channel is disabled, write to CPRD */
    214          	if ((pwm->PWM_SR & (1 << channel)) == 0) {
   \                     ??pwmc_set_period_0:
   \       0x34   0xE594'000C        LDR      R0,[R4, #+12]
   \       0x38   0xE3A0'1001        MOV      R1,#+1
   \       0x3C   0xE111'0530        TST      R1,R0, LSR R5
   \       0x40   0x1A00'0007        BNE      ??pwmc_set_period_1
    215          		pwm->PWM_CH[channel].PWM_CPRD = period;
   \       0x44   0xE1B0'0006        MOVS     R0,R6
   \       0x48   0xE6FF'0070        UXTH     R0,R0
   \       0x4C   0xE1B0'1005        MOVS     R1,R5
   \       0x50   0xE6EF'1071        UXTB     R1,R1
   \       0x54   0xE1B0'1281        LSLS     R1,R1,#+5
   \       0x58   0xE094'1001        ADDS     R1,R4,R1
   \       0x5C   0xE581'020C        STR      R0,[R1, #+524]
   \       0x60   0xEA00'0006        B        ??pwmc_set_period_2
    216          	}
    217          	/* Otherwise use update register */
    218          	else {
    219          #ifdef PWM_CMR_CPD
    220          		pwm->PWM_CH[channel].PWM_CMR |= PWM_CMR_CPD;
    221          		pwm->PWM_CH[channel].PWM_CUPD = period;
    222          #else
    223          		pwm->PWM_CH[channel].PWM_CPRDUPD = period;
   \                     ??pwmc_set_period_1:
   \       0x64   0xE1B0'0006        MOVS     R0,R6
   \       0x68   0xE6FF'0070        UXTH     R0,R0
   \       0x6C   0xE1B0'1005        MOVS     R1,R5
   \       0x70   0xE6EF'1071        UXTB     R1,R1
   \       0x74   0xE1B0'1281        LSLS     R1,R1,#+5
   \       0x78   0xE094'1001        ADDS     R1,R4,R1
   \       0x7C   0xE581'0210        STR      R0,[R1, #+528]
    224          #endif
    225          	}
    226          }
   \                     ??pwmc_set_period_2:
   \       0x80   0xE8BD'8070        POP      {R4-R6,PC}       ;; return
    227          

   \                                 In section SOFTPACK, align 4, keep-with-next
    228          void pwmc_set_duty_cycle(Pwm *pwm, uint8_t channel, uint16_t duty)
    229          {
   \                     pwmc_set_duty_cycle:
   \        0x0   0xE92D'4070        PUSH     {R4-R6,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
   \        0x8   0xE1B0'5001        MOVS     R5,R1
   \        0xC   0xE1B0'6002        MOVS     R6,R2
    230          	assert(channel < ARRAY_SIZE(pwm->PWM_CH));
   \       0x10   0xE1B0'0005        MOVS     R0,R5
   \       0x14   0xE6EF'0070        UXTB     R0,R0
   \       0x18   0xE350'0004        CMP      R0,#+4
   \       0x1C   0x3A00'0004        BCC      ??pwmc_set_duty_cycle_0
   \       0x20   0xE3A0'20E6        MOV      R2,#+230
   \       0x24   0x....'....        LDR      R1,??DataTable15_2
   \       0x28   0x....'....        LDR      R0,??DataTable15_4
   \       0x2C   0x....'....        BL       __aeabi_assert
   \       0x30   0x....'....        BL       __iar_EmptyStepPoint
    231          	assert(pwm->PWM_CH[channel].PWM_CPRD >= duty);
   \                     ??pwmc_set_duty_cycle_0:
   \       0x34   0xE1B0'0005        MOVS     R0,R5
   \       0x38   0xE6EF'0070        UXTB     R0,R0
   \       0x3C   0xE1B0'0280        LSLS     R0,R0,#+5
   \       0x40   0xE094'0000        ADDS     R0,R4,R0
   \       0x44   0xE590'020C        LDR      R0,[R0, #+524]
   \       0x48   0xE1B0'1006        MOVS     R1,R6
   \       0x4C   0xE6FF'1071        UXTH     R1,R1
   \       0x50   0xE150'0001        CMP      R0,R1
   \       0x54   0x2A00'0004        BCS      ??pwmc_set_duty_cycle_1
   \       0x58   0xE3A0'20E7        MOV      R2,#+231
   \       0x5C   0x....'....        LDR      R1,??DataTable15_2
   \       0x60   0x....'....        LDR      R0,??DataTable15_7
   \       0x64   0x....'....        BL       __aeabi_assert
   \       0x68   0x....'....        BL       __iar_EmptyStepPoint
    232          
    233          	/* If channel is disabled, write to CDTY */
    234          	if ((pwm->PWM_SR & (1 << channel)) == 0) {
   \                     ??pwmc_set_duty_cycle_1:
   \       0x6C   0xE594'000C        LDR      R0,[R4, #+12]
   \       0x70   0xE3A0'1001        MOV      R1,#+1
   \       0x74   0xE111'0530        TST      R1,R0, LSR R5
   \       0x78   0x1A00'0007        BNE      ??pwmc_set_duty_cycle_2
    235          		pwm->PWM_CH[channel].PWM_CDTY = duty;
   \       0x7C   0xE1B0'0006        MOVS     R0,R6
   \       0x80   0xE6FF'0070        UXTH     R0,R0
   \       0x84   0xE1B0'1005        MOVS     R1,R5
   \       0x88   0xE6EF'1071        UXTB     R1,R1
   \       0x8C   0xE1B0'1281        LSLS     R1,R1,#+5
   \       0x90   0xE094'1001        ADDS     R1,R4,R1
   \       0x94   0xE581'0204        STR      R0,[R1, #+516]
   \       0x98   0xEA00'0006        B        ??pwmc_set_duty_cycle_3
    236          	}
    237          	/* Otherwise use update register */
    238          	else {
    239          #ifdef PWM_CMR_CPD
    240          		pwm->PWM_CH[channel].PWM_CMR &= ~PWM_CMR_CPD;
    241          		pwm->PWM_CH[channel].PWM_CUPD = duty;
    242          #else
    243          		pwm->PWM_CH[channel].PWM_CDTYUPD = duty;
   \                     ??pwmc_set_duty_cycle_2:
   \       0x9C   0xE1B0'0006        MOVS     R0,R6
   \       0xA0   0xE6FF'0070        UXTH     R0,R0
   \       0xA4   0xE1B0'1005        MOVS     R1,R5
   \       0xA8   0xE6EF'1071        UXTB     R1,R1
   \       0xAC   0xE1B0'1281        LSLS     R1,R1,#+5
   \       0xB0   0xE094'1001        ADDS     R1,R4,R1
   \       0xB4   0xE581'0208        STR      R0,[R1, #+520]
    244          #endif
    245          	}
    246          }
   \                     ??pwmc_set_duty_cycle_3:
   \       0xB8   0xE8BD'8070        POP      {R4-R6,PC}       ;; return
    247          
    248          #ifdef CONFIG_HAVE_PWMC_SYNC_MODE

   \                                 In section SOFTPACK, align 4, keep-with-next
    249          void pwmc_configure_sync_channels(Pwm *pwm, uint32_t mode)
    250          {
   \                     pwmc_configure_sync_channels:
   \        0x0   0xE92D'40F8        PUSH     {R3-R7,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
   \        0x8   0xE1B0'5001        MOVS     R5,R1
    251          #ifndef NDEBUG
    252          	uint32_t sync_bits = mode & (PWM_SCM_SYNC0 | PWM_SCM_SYNC1 \
    253          				     | PWM_SCM_SYNC2 | PWM_SCM_SYNC3);
   \        0xC   0xE215'600F        ANDS     R6,R5,#0xF
    254          #ifdef CONFIG_HAVE_PWMC_DMA
    255          	trace_debug("pwm: SYNC CHs bitmap 0x%x, Update Mode %u, " \
    256          		    "DMA Request Mode %u, Request Comparison Selection %u\n\r",
    257          		    (unsigned)sync_bits,
    258          		    (unsigned)((mode & PWM_SCM_UPDM_Msk) >> PWM_SCM_UPDM_Pos), \
    259          		    (unsigned)(0 != (mode & PWM_SCM_PTRM)),		\
    260          		    (unsigned)((mode & PWM_SCM_PTRCS_Msk) >> PWM_SCM_PTRCS_Pos));
   \       0x10   0x....'....        LDR      R0,??DataTable15_5
   \       0x14   0xE590'0000        LDR      R0,[R0, #+0]
   \       0x18   0xE350'0005        CMP      R0,#+5
   \       0x1C   0x3A00'0007        BCC      ??pwmc_configure_sync_channels_0
   \       0x20   0xE7E2'0AD5        UBFX     R0,R5,#+21,#+3
   \       0x24   0xE58D'0000        STR      R0,[SP, #+0]
   \       0x28   0xE1B0'0A25        LSRS     R0,R5,#+20
   \       0x2C   0xE210'3001        ANDS     R3,R0,#0x1
   \       0x30   0xE7E1'2855        UBFX     R2,R5,#+16,#+2
   \       0x34   0xE1B0'1006        MOVS     R1,R6
   \       0x38   0x....'....        LDR      R0,??DataTable15_8
   \       0x3C   0x....'....        BL       printf
    261          #else
    262          	trace_debug("pwm: SYNC CHs bitmap 0x%x, Update Mode %u, " ,
    263          		    (unsigned)sync_bits,
    264          		    (unsigned)((mode & PWM_SCM_UPDM_Msk) >> PWM_SCM_UPDM_Pos));
    265          #endif
    266          
    267          	/* Defining a channel as a synchronous channel while it is an asynchronous
    268          	channel (by writing the bit SYNCx to '1' while it was at '0') is allowed
    269          	only if the channel is disabled at this time (CHIDx = 0 in PWM_SR). In the
    270          	same way, defining a channel as an asynchronous channel while it is a
    271          	synchronous channel (by writing the SYNCx bit to '0' while it was '1') is
    272          	allowed only if the channel is disabled at this time. */
    273          	uint32_t pwm_sr = pwm->PWM_SR;
   \                     ??pwmc_configure_sync_channels_0:
   \       0x40   0xE594'700C        LDR      R7,[R4, #+12]
    274          	assert((pwm_sr & (pwm->PWM_SCM ^ sync_bits)) == 0);
   \       0x44   0xE594'0020        LDR      R0,[R4, #+32]
   \       0x48   0xE036'0000        EORS     R0,R6,R0
   \       0x4C   0xE110'0007        TST      R0,R7
   \       0x50   0x0A00'0004        BEQ      ??pwmc_configure_sync_channels_1
   \       0x54   0xE300'2112        MOVW     R2,#+274
   \       0x58   0x....'....        LDR      R1,??DataTable15_2
   \       0x5C   0x....'....        LDR      R0,??DataTable15_9
   \       0x60   0x....'....        BL       __aeabi_assert
   \       0x64   0x....'....        BL       __iar_EmptyStepPoint
    275          	/* Mode3 does not exist */
    276          	assert(((mode & PWM_SCM_UPDM_Msk) >> PWM_SCM_UPDM_Pos) != 3);
   \                     ??pwmc_configure_sync_channels_1:
   \       0x68   0xE7E1'0855        UBFX     R0,R5,#+16,#+2
   \       0x6C   0xE350'0003        CMP      R0,#+3
   \       0x70   0x1A00'0004        BNE      ??pwmc_configure_sync_channels_2
   \       0x74   0xE3A0'2F45        MOV      R2,#+276
   \       0x78   0x....'....        LDR      R1,??DataTable15_2
   \       0x7C   0x....'....        LDR      R0,??DataTable15_10
   \       0x80   0x....'....        BL       __aeabi_assert
   \       0x84   0x....'....        BL       __iar_EmptyStepPoint
    277          #ifndef CONFIG_HAVE_PWMC_DMA
    278          	/* Mode2 does not exist if PWM does not support DMA */
    279          	assert(((mode & PWM_SCM_UPDM_Msk) >> PWM_SCM_UPDM_Pos) != 2);
    280          #endif
    281          #endif
    282          	pwm->PWM_SCM = mode;
   \                     ??pwmc_configure_sync_channels_2:
   \       0x88   0xE584'5020        STR      R5,[R4, #+32]
    283          }
   \       0x8C   0xE8BD'80F1        POP      {R0,R4-R7,PC}    ;; return
    284          

   \                                 In section SOFTPACK, align 4, keep-with-next
    285          void pwmc_set_sync_channels_update_unlock(Pwm *pwm)
    286          {
    287          	pwm->PWM_SCUC = PWM_SCUC_UPDULOCK;
   \                     pwmc_set_sync_channels_update_unlock:
   \        0x0   0xE3A0'1001        MOV      R1,#+1
   \        0x4   0xE580'1028        STR      R1,[R0, #+40]
    288          }
   \        0x8   0xE12F'FF1E        BX       LR               ;; return
    289          

   \                                 In section SOFTPACK, align 4, keep-with-next
    290          void pwmc_set_sync_channels_update_period(Pwm *pwm,
    291          		uint8_t counter, uint8_t period)
    292          {
    293          	pwm->PWM_SCUP = PWM_SCUP_UPRCNT(counter) | PWM_SCUP_UPR(period);
   \                     pwmc_set_sync_channels_update_period:
   \        0x0   0xE1B0'3001        MOVS     R3,R1
   \        0x4   0xE6EF'3073        UXTB     R3,R3
   \        0x8   0xE3A0'C0F0        MOV      R12,#+240
   \        0xC   0xE01C'3203        ANDS     R3,R12,R3, LSL #+4
   \       0x10   0xE1B0'C002        MOVS     R12,R2
   \       0x14   0xE6EF'C07C        UXTB     R12,R12
   \       0x18   0xE21C'C00F        ANDS     R12,R12,#0xF
   \       0x1C   0xE19C'3003        ORRS     R3,R12,R3
   \       0x20   0xE580'302C        STR      R3,[R0, #+44]
    294          }
   \       0x24   0xE12F'FF1E        BX       LR               ;; return
    295          

   \                                 In section SOFTPACK, align 4, keep-with-next
    296          void pwmc_set_sync_channels_update_period_update(Pwm *pwm, uint8_t period)
    297          {
    298          	pwm->PWM_SCUPUPD = PWM_SCUPUPD_UPRUPD(period);
   \                     pwmc_set_sync_channels_update_period_update:
   \        0x0   0xE1B0'2001        MOVS     R2,R1
   \        0x4   0xE6EF'2072        UXTB     R2,R2
   \        0x8   0xE212'200F        ANDS     R2,R2,#0xF
   \        0xC   0xE580'2030        STR      R2,[R0, #+48]
    299          }
   \       0x10   0xE12F'FF1E        BX       LR               ;; return
    300          #endif /* CONFIG_HAVE_PWMC_SYNC_MODE */
    301          
    302          #ifdef CONFIG_HAVE_PWMC_DMA

   \                                 In section SOFTPACK, align 4, keep-with-next
    303          static int _pwm_dma_callback_wrapper(void* arg, void* arg2)
    304          {
   \                     _pwm_dma_callback_wrapper:
   \        0x0   0xE92D'4070        PUSH     {R4-R6,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
   \        0x8   0xE1B0'5001        MOVS     R5,R1
    305          	struct _dma_channel* dma_channel = (struct _dma_channel*)arg;
   \        0xC   0xE1B0'6004        MOVS     R6,R4
    306          
    307          	if (dma_is_transfer_done(dma_channel)) {
   \       0x10   0xE1B0'0006        MOVS     R0,R6
   \       0x14   0x....'....        BL       dma_is_transfer_done
   \       0x18   0xE350'0000        CMP      R0,#+0
   \       0x1C   0x0A00'0004        BEQ      ??_pwm_dma_callback_wrapper_0
    308          		dma_free_channel(dma_channel);
   \       0x20   0xE1B0'0006        MOVS     R0,R6
   \       0x24   0x....'....        BL       dma_free_channel
    309          		callback_call(&pwmc_cb, NULL);
   \       0x28   0xE3A0'1000        MOV      R1,#+0
   \       0x2C   0x....'....        LDR      R0,??DataTable15_11
   \       0x30   0x....'....        BL       callback_call
    310          	}
    311          
    312          	return 0;
   \                     ??_pwm_dma_callback_wrapper_0:
   \       0x34   0xE3A0'0000        MOV      R0,#+0
   \       0x38   0xE8BD'8070        POP      {R4-R6,PC}       ;; return
    313          }
    314          

   \                                 In section SOFTPACK, align 4, keep-with-next
    315          void pwmc_set_dma_finished_callback(Pwm *pwm, struct _callback* cb)
    316          {
   \                     pwmc_set_dma_finished_callback:
   \        0x0   0xE92D'40F8        PUSH     {R3-R7,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
   \        0x8   0xE1B0'5001        MOVS     R5,R1
    317          	uint32_t id = get_pwm_id_from_addr(pwm);
   \        0xC   0xE1B0'0004        MOVS     R0,R4
   \       0x10   0x....'....        BL       get_pwm_id_from_addr
   \       0x14   0xE1B0'6000        MOVS     R6,R0
    318          
    319          	if (!pwm_dma_channel) {
   \       0x18   0x....'....        LDR      R7,??DataTable15_12
   \       0x1C   0xE597'0000        LDR      R0,[R7, #+0]
   \       0x20   0xE350'0000        CMP      R0,#+0
   \       0x24   0x1A00'000C        BNE      ??pwmc_set_dma_finished_callback_0
    320          		pwm_dma_channel = dma_allocate_channel(DMA_PERIPH_MEMORY, id);
   \       0x28   0xE1B0'1006        MOVS     R1,R6
   \       0x2C   0xE6EF'1071        UXTB     R1,R1
   \       0x30   0xE3A0'00FF        MOV      R0,#+255
   \       0x34   0x....'....        BL       dma_allocate_channel
   \       0x38   0xE587'0000        STR      R0,[R7, #+0]
    321          		assert(pwm_dma_channel);
   \       0x3C   0xE597'0000        LDR      R0,[R7, #+0]
   \       0x40   0xE350'0000        CMP      R0,#+0
   \       0x44   0x1A00'0004        BNE      ??pwmc_set_dma_finished_callback_0
   \       0x48   0xE300'2141        MOVW     R2,#+321
   \       0x4C   0x....'....        LDR      R1,??DataTable15_2
   \       0x50   0x....'....        LDR      R0,??DataTable15_13
   \       0x54   0x....'....        BL       __aeabi_assert
   \       0x58   0x....'....        BL       __iar_EmptyStepPoint
    322          	}
    323          	callback_copy(&pwmc_cb, cb);
   \                     ??pwmc_set_dma_finished_callback_0:
   \       0x5C   0xE1B0'1005        MOVS     R1,R5
   \       0x60   0x....'....        LDR      R0,??DataTable15_11
   \       0x64   0x....'....        BL       callback_copy
    324          }
   \       0x68   0xE8BD'80F1        POP      {R0,R4-R7,PC}    ;; return
    325          

   \                                 In section SOFTPACK, align 4, keep-with-next
    326          void pwmc_dma_duty_cycle(Pwm* pwm, uint16_t *duty, uint32_t size)
    327          {
   \                     pwmc_dma_duty_cycle:
   \        0x0   0xE92D'47F0        PUSH     {R4-R10,LR}
   \        0x4   0xE24D'D020        SUB      SP,SP,#+32
   \        0x8   0xE1B0'4000        MOVS     R4,R0
   \        0xC   0xE1B0'5001        MOVS     R5,R1
   \       0x10   0xE1B0'6002        MOVS     R6,R2
    328          	struct _callback _cb;
    329          	struct _dma_cfg dma_cfg;
    330          	struct _dma_transfer_cfg cfg;
    331          
    332          	assert(pwm_dma_channel);
   \       0x14   0x....'....        LDR      R7,??DataTable15_12
   \       0x18   0xE597'0000        LDR      R0,[R7, #+0]
   \       0x1C   0xE350'0000        CMP      R0,#+0
   \       0x20   0x1A00'0004        BNE      ??pwmc_dma_duty_cycle_0
   \       0x24   0xE3A0'2F53        MOV      R2,#+332
   \       0x28   0x....'....        LDR      R1,??DataTable15_2
   \       0x2C   0x....'....        LDR      R0,??DataTable15_13
   \       0x30   0x....'....        BL       __aeabi_assert
   \       0x34   0x....'....        BL       __iar_EmptyStepPoint
    333          	memset(&cfg, 0, sizeof(cfg));
   \                     ??pwmc_dma_duty_cycle_0:
   \       0x38   0xE3A0'800C        MOV      R8,#+12
   \       0x3C   0xE3A0'9000        MOV      R9,#+0
   \       0x40   0xE1B0'A00D        MOVS     R10,SP
   \       0x44   0xE1B0'2009        MOVS     R2,R9
   \       0x48   0xE1B0'1008        MOVS     R1,R8
   \       0x4C   0xE1B0'000A        MOVS     R0,R10
   \       0x50   0x....'....        BL       __aeabi_memset
   \       0x54   0xE1B0'000A        MOVS     R0,R10
    334          	cfg.saddr = (void*)duty;
   \       0x58   0xE58D'5000        STR      R5,[SP, #+0]
    335          	cfg.daddr = (void*)&pwm->PWM_DMAR;
   \       0x5C   0xE294'0024        ADDS     R0,R4,#+36
   \       0x60   0xE58D'0004        STR      R0,[SP, #+4]
    336          	cfg.len = size;
   \       0x64   0xE58D'6008        STR      R6,[SP, #+8]
    337          	dma_cfg.incr_saddr = true;
   \       0x68   0xE3A0'0001        MOV      R0,#+1
   \       0x6C   0xE5CD'0014        STRB     R0,[SP, #+20]
    338          	dma_cfg.incr_daddr = false;
   \       0x70   0xE3A0'0000        MOV      R0,#+0
   \       0x74   0xE5CD'0015        STRB     R0,[SP, #+21]
    339          	dma_cfg.loop = false;
   \       0x78   0xE5CD'0016        STRB     R0,[SP, #+22]
    340          	dma_cfg.data_width = DMA_DATA_WIDTH_HALF_WORD;
   \       0x7C   0xE3A0'1001        MOV      R1,#+1
   \       0x80   0xE58D'100C        STR      R1,[SP, #+12]
    341          	dma_cfg.chunk_size = DMA_CHUNK_SIZE_1;
   \       0x84   0xE58D'0010        STR      R0,[SP, #+16]
    342          	dma_reset_channel(pwm_dma_channel);
   \       0x88   0xE597'0000        LDR      R0,[R7, #+0]
   \       0x8C   0x....'....        BL       dma_reset_channel
    343          	dma_configure_transfer(pwm_dma_channel, &dma_cfg, &cfg, 1);
   \       0x90   0xE3A0'3001        MOV      R3,#+1
   \       0x94   0xE1B0'200D        MOVS     R2,SP
   \       0x98   0xE28D'100C        ADD      R1,SP,#+12
   \       0x9C   0xE597'0000        LDR      R0,[R7, #+0]
   \       0xA0   0x....'....        BL       dma_configure_transfer
    344          	callback_set(&_cb, _pwm_dma_callback_wrapper, pwm_dma_channel);
   \       0xA4   0xE597'2000        LDR      R2,[R7, #+0]
   \       0xA8   0x....'....        ADR      R1,_pwm_dma_callback_wrapper
   \       0xAC   0xE28D'0018        ADD      R0,SP,#+24
   \       0xB0   0x....'....        BL       callback_set
    345          	dma_set_callback(pwm_dma_channel, &_cb);
   \       0xB4   0xE28D'1018        ADD      R1,SP,#+24
   \       0xB8   0xE597'0000        LDR      R0,[R7, #+0]
   \       0xBC   0x....'....        BL       dma_set_callback
    346          
    347          	cache_clean_region(duty, size);
   \       0xC0   0xE1B0'1006        MOVS     R1,R6
   \       0xC4   0xE1B0'0005        MOVS     R0,R5
   \       0xC8   0x....'....        BL       cache_clean_region
    348          	dma_start_transfer(pwm_dma_channel);
   \       0xCC   0xE597'0000        LDR      R0,[R7, #+0]
   \       0xD0   0x....'....        BL       dma_start_transfer
    349          }
   \       0xD4   0xE28D'D020        ADD      SP,SP,#+32
   \       0xD8   0xE8BD'87F0        POP      {R4-R10,PC}      ;; return
    350          
    351          #endif /* CONFIG_HAVE_PWMC_DMA */
    352          
    353          #ifdef CONFIG_HAVE_PWMC_OOV

   \                                 In section SOFTPACK, align 4, keep-with-next
    354          void pwmc_output_override(Pwm *pwm, uint8_t channel,
    355          		uint8_t is_pwmh, uint8_t level, uint8_t sync)
    356          {
   \                     pwmc_output_override:
   \        0x0   0xE92D'41FC        PUSH     {R2-R8,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
   \        0x8   0xE1B0'7001        MOVS     R7,R1
   \        0xC   0xE1B0'5002        MOVS     R5,R2
   \       0x10   0xE1B0'6003        MOVS     R6,R3
   \       0x14   0xE5DD'8020        LDRB     R8,[SP, #+32]
    357          	volatile uint32_t tmp;
    358          	uint32_t mask;
    359          
    360          	assert(channel < ARRAY_SIZE(pwm->PWM_CH));
   \       0x18   0xE1B0'0007        MOVS     R0,R7
   \       0x1C   0xE6EF'0070        UXTB     R0,R0
   \       0x20   0xE350'0004        CMP      R0,#+4
   \       0x24   0x3A00'0004        BCC      ??pwmc_output_override_0
   \       0x28   0xE3A0'2F5A        MOV      R2,#+360
   \       0x2C   0x....'....        LDR      R1,??DataTable15_2
   \       0x30   0x....'....        LDR      R0,??DataTable15_4
   \       0x34   0x....'....        BL       __aeabi_assert
   \       0x38   0x....'....        BL       __iar_EmptyStepPoint
    361          
    362          	trace_debug("pwm: CH%u PWM%c output overridden to %u\n\r",
    363          			(unsigned)channel, (0 != is_pwmh) ? 'H' : 'L', (unsigned)level);
   \                     ??pwmc_output_override_0:
   \       0x3C   0x....'....        LDR      R0,??DataTable15_5
   \       0x40   0xE590'0000        LDR      R0,[R0, #+0]
   \       0x44   0xE350'0005        CMP      R0,#+5
   \       0x48   0x3A00'000C        BCC      ??pwmc_output_override_1
   \       0x4C   0xE1B0'0005        MOVS     R0,R5
   \       0x50   0xE6EF'0070        UXTB     R0,R0
   \       0x54   0xE350'0000        CMP      R0,#+0
   \       0x58   0x0A00'0001        BEQ      ??pwmc_output_override_2
   \       0x5C   0xE3A0'2048        MOV      R2,#+72
   \       0x60   0xEA00'0000        B        ??pwmc_output_override_3
   \                     ??pwmc_output_override_2:
   \       0x64   0xE3A0'204C        MOV      R2,#+76
   \                     ??pwmc_output_override_3:
   \       0x68   0xE1B0'3006        MOVS     R3,R6
   \       0x6C   0xE6EF'3073        UXTB     R3,R3
   \       0x70   0xE1B0'1007        MOVS     R1,R7
   \       0x74   0xE6EF'1071        UXTB     R1,R1
   \       0x78   0x....'....        LDR      R0,??DataTable15_14
   \       0x7C   0x....'....        BL       printf
    364          
    365          	if (0 == is_pwmh)
   \                     ??pwmc_output_override_1:
   \       0x80   0xE1B0'0005        MOVS     R0,R5
   \       0x84   0xE6EF'0070        UXTB     R0,R0
   \       0x88   0xE350'0000        CMP      R0,#+0
   \       0x8C   0x1A00'0002        BNE      ??pwmc_output_override_4
    366          		mask = PWM_OSS_OSSH0 << channel;
   \       0x90   0xE3A0'0001        MOV      R0,#+1
   \       0x94   0xE1B0'0710        LSLS     R0,R0,R7
   \       0x98   0xEA00'0001        B        ??pwmc_output_override_5
    367          	else
    368          		mask = PWM_OSS_OSSL0 << channel;
   \                     ??pwmc_output_override_4:
   \       0x9C   0xE3A0'0B40        MOV      R0,#+65536
   \       0xA0   0xE1B0'0710        LSLS     R0,R0,R7
    369          
    370          	tmp = pwm->PWM_OOV;
   \                     ??pwmc_output_override_5:
   \       0xA4   0xE594'1044        LDR      R1,[R4, #+68]
   \       0xA8   0xE58D'1000        STR      R1,[SP, #+0]
    371          	if (0 == level)
   \       0xAC   0xE1B0'1006        MOVS     R1,R6
   \       0xB0   0xE6EF'1071        UXTB     R1,R1
   \       0xB4   0xE351'0000        CMP      R1,#+0
   \       0xB8   0x1A00'0003        BNE      ??pwmc_output_override_6
    372          		tmp &= ~mask;
   \       0xBC   0xE59D'1000        LDR      R1,[SP, #+0]
   \       0xC0   0xE1D1'1000        BICS     R1,R1,R0
   \       0xC4   0xE58D'1000        STR      R1,[SP, #+0]
   \       0xC8   0xEA00'0002        B        ??pwmc_output_override_7
    373          	else
    374          		tmp |= mask;
   \                     ??pwmc_output_override_6:
   \       0xCC   0xE59D'1000        LDR      R1,[SP, #+0]
   \       0xD0   0xE190'1001        ORRS     R1,R0,R1
   \       0xD4   0xE58D'1000        STR      R1,[SP, #+0]
    375          	pwm->PWM_OOV = tmp;
   \                     ??pwmc_output_override_7:
   \       0xD8   0xE59D'1000        LDR      R1,[SP, #+0]
   \       0xDC   0xE584'1044        STR      R1,[R4, #+68]
    376          
    377          	/* If channel is disabled, write to OSS */
    378          	if (((pwm->PWM_SR & (1 << channel)) == 0) || (0 != sync))
   \       0xE0   0xE594'100C        LDR      R1,[R4, #+12]
   \       0xE4   0xE3A0'2001        MOV      R2,#+1
   \       0xE8   0xE112'0731        TST      R2,R1, LSR R7
   \       0xEC   0x0A00'0003        BEQ      ??pwmc_output_override_8
   \       0xF0   0xE1B0'1008        MOVS     R1,R8
   \       0xF4   0xE6EF'1071        UXTB     R1,R1
   \       0xF8   0xE351'0000        CMP      R1,#+0
   \       0xFC   0x0A00'0001        BEQ      ??pwmc_output_override_9
    379          		pwm->PWM_OSS = mask;
   \                     ??pwmc_output_override_8:
   \      0x100   0xE584'004C        STR      R0,[R4, #+76]
   \      0x104   0xEA00'0000        B        ??pwmc_output_override_10
    380          	/* Otherwise use update register */
    381          	else
    382          		pwm->PWM_OSSUPD = mask;
   \                     ??pwmc_output_override_9:
   \      0x108   0xE584'0054        STR      R0,[R4, #+84]
    383          }
   \                     ??pwmc_output_override_10:
   \      0x10C   0xE8BD'81F3        POP      {R0,R1,R4-R8,PC}  ;; return
    384          

   \                                 In section SOFTPACK, align 4, keep-with-next
    385          void pwmc_disable_output_override(Pwm *pwm, uint8_t channel,
    386          		uint8_t is_pwmh, uint8_t sync)
    387          {
   \                     pwmc_disable_output_override:
   \        0x0   0xE92D'40F8        PUSH     {R3-R7,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
   \        0x8   0xE1B0'5001        MOVS     R5,R1
   \        0xC   0xE1B0'6002        MOVS     R6,R2
   \       0x10   0xE1B0'7003        MOVS     R7,R3
    388          	uint32_t mask;
    389          
    390          	assert(channel < ARRAY_SIZE(pwm->PWM_CH));
   \       0x14   0xE1B0'0005        MOVS     R0,R5
   \       0x18   0xE6EF'0070        UXTB     R0,R0
   \       0x1C   0xE350'0004        CMP      R0,#+4
   \       0x20   0x3A00'0004        BCC      ??pwmc_disable_output_override_0
   \       0x24   0xE300'2186        MOVW     R2,#+390
   \       0x28   0x....'....        LDR      R1,??DataTable15_2
   \       0x2C   0x....'....        LDR      R0,??DataTable15_4
   \       0x30   0x....'....        BL       __aeabi_assert
   \       0x34   0x....'....        BL       __iar_EmptyStepPoint
    391          
    392          	trace_debug("pwm: CH%u PWM%c output override disabled\n\r",
    393          			(unsigned)channel, (0 != is_pwmh) ? 'H' : 'L');
   \                     ??pwmc_disable_output_override_0:
   \       0x38   0x....'....        LDR      R0,??DataTable15_5
   \       0x3C   0xE590'0000        LDR      R0,[R0, #+0]
   \       0x40   0xE350'0005        CMP      R0,#+5
   \       0x44   0x3A00'000A        BCC      ??pwmc_disable_output_override_1
   \       0x48   0xE1B0'0006        MOVS     R0,R6
   \       0x4C   0xE6EF'0070        UXTB     R0,R0
   \       0x50   0xE350'0000        CMP      R0,#+0
   \       0x54   0x0A00'0001        BEQ      ??pwmc_disable_output_override_2
   \       0x58   0xE3A0'2048        MOV      R2,#+72
   \       0x5C   0xEA00'0000        B        ??pwmc_disable_output_override_3
   \                     ??pwmc_disable_output_override_2:
   \       0x60   0xE3A0'204C        MOV      R2,#+76
   \                     ??pwmc_disable_output_override_3:
   \       0x64   0xE1B0'1005        MOVS     R1,R5
   \       0x68   0xE6EF'1071        UXTB     R1,R1
   \       0x6C   0x....'....        LDR      R0,??DataTable15_15
   \       0x70   0x....'....        BL       printf
    394          
    395          	if (0 == is_pwmh)
   \                     ??pwmc_disable_output_override_1:
   \       0x74   0xE1B0'0006        MOVS     R0,R6
   \       0x78   0xE6EF'0070        UXTB     R0,R0
   \       0x7C   0xE350'0000        CMP      R0,#+0
   \       0x80   0x1A00'0002        BNE      ??pwmc_disable_output_override_4
    396          		mask = PWM_OSS_OSSH0 << channel;
   \       0x84   0xE3A0'0001        MOV      R0,#+1
   \       0x88   0xE1B0'0510        LSLS     R0,R0,R5
   \       0x8C   0xEA00'0001        B        ??pwmc_disable_output_override_5
    397          	else
    398          		mask = PWM_OSS_OSSL0 << channel;
   \                     ??pwmc_disable_output_override_4:
   \       0x90   0xE3A0'0B40        MOV      R0,#+65536
   \       0x94   0xE1B0'0510        LSLS     R0,R0,R5
    399          
    400          	/* If channel is disabled, write to OSS */
    401          	if (((pwm->PWM_SR & (1 << channel)) == 0) || (0 != sync))
   \                     ??pwmc_disable_output_override_5:
   \       0x98   0xE594'100C        LDR      R1,[R4, #+12]
   \       0x9C   0xE3A0'2001        MOV      R2,#+1
   \       0xA0   0xE112'0531        TST      R2,R1, LSR R5
   \       0xA4   0x0A00'0003        BEQ      ??pwmc_disable_output_override_6
   \       0xA8   0xE1B0'1007        MOVS     R1,R7
   \       0xAC   0xE6EF'1071        UXTB     R1,R1
   \       0xB0   0xE351'0000        CMP      R1,#+0
   \       0xB4   0x0A00'0001        BEQ      ??pwmc_disable_output_override_7
    402          		pwm->PWM_OSC = mask;
   \                     ??pwmc_disable_output_override_6:
   \       0xB8   0xE584'0050        STR      R0,[R4, #+80]
   \       0xBC   0xEA00'0000        B        ??pwmc_disable_output_override_8
    403          	/* Otherwise use update register */
    404          	else
    405          		pwm->PWM_OSCUPD = mask;
   \                     ??pwmc_disable_output_override_7:
   \       0xC0   0xE584'0058        STR      R0,[R4, #+88]
    406          }
   \                     ??pwmc_disable_output_override_8:
   \       0xC4   0xE8BD'80F1        POP      {R0,R4-R7,PC}    ;; return
    407          
    408          #endif /* CONFIG_HAVE_PWMC_OOV */
    409          
    410          #ifdef CONFIG_HAVE_PWMC_DTIME

   \                                 In section SOFTPACK, align 4, keep-with-next
    411          void pwmc_output_dead_time(Pwm *pwm, uint8_t channel,
    412          		uint16_t time_h, uint16_t time_l)
    413          {
   \                     pwmc_output_dead_time:
   \        0x0   0xE92D'43F8        PUSH     {R3-R9,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
   \        0x8   0xE1B0'5001        MOVS     R5,R1
   \        0xC   0xE1B0'6002        MOVS     R6,R2
   \       0x10   0xE1B0'7003        MOVS     R7,R3
    414          	uint32_t dead_time;
    415          
    416          	assert(channel < ARRAY_SIZE(pwm->PWM_CH));
   \       0x14   0xE1B0'0005        MOVS     R0,R5
   \       0x18   0xE6EF'0070        UXTB     R0,R0
   \       0x1C   0xE350'0004        CMP      R0,#+4
   \       0x20   0x3A00'0004        BCC      ??pwmc_output_dead_time_0
   \       0x24   0xE3A0'2F68        MOV      R2,#+416
   \       0x28   0x....'....        LDR      R1,??DataTable15_2
   \       0x2C   0x....'....        LDR      R0,??DataTable15_4
   \       0x30   0x....'....        BL       __aeabi_assert
   \       0x34   0x....'....        BL       __iar_EmptyStepPoint
    417          
    418          	trace_debug("pwm: CH%u output dead time H: %u, L: %u\n\r",
    419          			(unsigned)channel, (unsigned)time_h, (unsigned)time_l);
   \                     ??pwmc_output_dead_time_0:
   \       0x38   0x....'....        LDR      R0,??DataTable15_5
   \       0x3C   0xE590'0000        LDR      R0,[R0, #+0]
   \       0x40   0xE350'0005        CMP      R0,#+5
   \       0x44   0x3A00'0007        BCC      ??pwmc_output_dead_time_1
   \       0x48   0xE1B0'3007        MOVS     R3,R7
   \       0x4C   0xE6FF'3073        UXTH     R3,R3
   \       0x50   0xE1B0'2006        MOVS     R2,R6
   \       0x54   0xE6FF'2072        UXTH     R2,R2
   \       0x58   0xE1B0'1005        MOVS     R1,R5
   \       0x5C   0xE6EF'1071        UXTB     R1,R1
   \       0x60   0x....'....        LDR      R0,??DataTable15_16
   \       0x64   0x....'....        BL       printf
    420          
    421          #ifndef NDEBUG
    422          	uint32_t pwm_cprd = pwm->PWM_CH[channel].PWM_CPRD;
   \                     ??pwmc_output_dead_time_1:
   \       0x68   0xE1B0'0005        MOVS     R0,R5
   \       0x6C   0xE6EF'0070        UXTB     R0,R0
   \       0x70   0xE1B0'0280        LSLS     R0,R0,#+5
   \       0x74   0xE094'0000        ADDS     R0,R4,R0
   \       0x78   0xE590'820C        LDR      R8,[R0, #+524]
    423          	uint32_t pwm_cdty = pwm->PWM_CH[channel].PWM_CDTY;
   \       0x7C   0xE1B0'0005        MOVS     R0,R5
   \       0x80   0xE6EF'0070        UXTB     R0,R0
   \       0x84   0xE1B0'0280        LSLS     R0,R0,#+5
   \       0x88   0xE094'0000        ADDS     R0,R4,R0
   \       0x8C   0xE590'9204        LDR      R9,[R0, #+516]
    424          	assert(pwm_cprd - pwm_cdty >= time_h);
   \       0x90   0xE058'0009        SUBS     R0,R8,R9
   \       0x94   0xE1B0'1006        MOVS     R1,R6
   \       0x98   0xE6FF'1071        UXTH     R1,R1
   \       0x9C   0xE150'0001        CMP      R0,R1
   \       0xA0   0x2A00'0004        BCS      ??pwmc_output_dead_time_2
   \       0xA4   0xE3A0'2F6A        MOV      R2,#+424
   \       0xA8   0x....'....        LDR      R1,??DataTable15_2
   \       0xAC   0x....'....        LDR      R0,??DataTable15_17
   \       0xB0   0x....'....        BL       __aeabi_assert
   \       0xB4   0x....'....        BL       __iar_EmptyStepPoint
    425          	assert(pwm_cdty >= time_l);
   \                     ??pwmc_output_dead_time_2:
   \       0xB8   0xE1B0'0007        MOVS     R0,R7
   \       0xBC   0xE6FF'0070        UXTH     R0,R0
   \       0xC0   0xE159'0000        CMP      R9,R0
   \       0xC4   0x2A00'0004        BCS      ??pwmc_output_dead_time_3
   \       0xC8   0xE300'21A9        MOVW     R2,#+425
   \       0xCC   0x....'....        LDR      R1,??DataTable15_2
   \       0xD0   0x....'....        LDR      R0,??DataTable15_18
   \       0xD4   0x....'....        BL       __aeabi_assert
   \       0xD8   0x....'....        BL       __iar_EmptyStepPoint
    426          #endif
    427          
    428          	dead_time = PWM_DT_DTH(time_h) | PWM_DT_DTL(time_l);
   \                     ??pwmc_output_dead_time_3:
   \       0xDC   0xE1B0'0006        MOVS     R0,R6
   \       0xE0   0xE6FF'0070        UXTH     R0,R0
   \       0xE4   0xE1B0'1007        MOVS     R1,R7
   \       0xE8   0xE6FF'1071        UXTH     R1,R1
   \       0xEC   0xE190'0801        ORRS     R0,R0,R1, LSL #+16
    429          
    430          	/* If channel is disabled, write to DT */
    431          	if ((pwm->PWM_SR & (1 << channel)) == 0)
   \       0xF0   0xE594'100C        LDR      R1,[R4, #+12]
   \       0xF4   0xE3A0'2001        MOV      R2,#+1
   \       0xF8   0xE112'0531        TST      R2,R1, LSR R5
   \       0xFC   0x1A00'0005        BNE      ??pwmc_output_dead_time_4
    432          		pwm->PWM_CH[channel].PWM_DT = dead_time;
   \      0x100   0xE1B0'1005        MOVS     R1,R5
   \      0x104   0xE6EF'1071        UXTB     R1,R1
   \      0x108   0xE1B0'1281        LSLS     R1,R1,#+5
   \      0x10C   0xE094'1001        ADDS     R1,R4,R1
   \      0x110   0xE581'0218        STR      R0,[R1, #+536]
   \      0x114   0xEA00'0004        B        ??pwmc_output_dead_time_5
    433          	/* Otherwise use update register */
    434          	else
    435          		pwm->PWM_CH[channel].PWM_DTUPD = dead_time;
   \                     ??pwmc_output_dead_time_4:
   \      0x118   0xE1B0'1005        MOVS     R1,R5
   \      0x11C   0xE6EF'1071        UXTB     R1,R1
   \      0x120   0xE1B0'1281        LSLS     R1,R1,#+5
   \      0x124   0xE094'1001        ADDS     R1,R4,R1
   \      0x128   0xE581'021C        STR      R0,[R1, #+540]
    436          }
   \                     ??pwmc_output_dead_time_5:
   \      0x12C   0xE8BD'83F1        POP      {R0,R4-R9,PC}    ;; return
    437          
    438          #endif /* CONFIG_HAVE_PWMC_DTIME */
    439          
    440          #ifdef CONFIG_HAVE_PWMC_FMODE

   \                                 In section SOFTPACK, align 4, keep-with-next
    441          void pwmc_set_fault_mode(Pwm *pwm, uint32_t mode)
    442          {
    443          	pwm->PWM_FMR = mode;
   \                     pwmc_set_fault_mode:
   \        0x0   0xE580'105C        STR      R1,[R0, #+92]
    444          }
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
    445          

   \                                 In section SOFTPACK, align 4, keep-with-next
    446          uint32_t pwmc_get_fault_status(Pwm *pwm)
    447          {
    448          	return pwm->PWM_FSR;
   \                     pwmc_get_fault_status:
   \        0x0   0xE590'0060        LDR      R0,[R0, #+96]
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
    449          }
    450          

   \                                 In section SOFTPACK, align 4, keep-with-next
    451          void pwmc_fault_clear(Pwm *pwm, uint32_t fault)
    452          {
    453          	pwm->PWM_FCR = fault;
   \                     pwmc_fault_clear:
   \        0x0   0xE580'1064        STR      R1,[R0, #+100]
    454          }
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
    455          

   \                                 In section SOFTPACK, align 4, keep-with-next
    456          void pwmc_set_fault_protection(Pwm *pwm, uint32_t value)
    457          {
    458          	pwm->PWM_FPV1 = value;
   \                     pwmc_set_fault_protection:
   \        0x0   0xE580'1068        STR      R1,[R0, #+104]
    459          }
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
    460          

   \                                 In section SOFTPACK, align 4, keep-with-next
    461          void pwmc_enable_fault_protection(Pwm *pwm, uint8_t channel,
    462          		uint8_t fault_inputs)
    463          {
   \                     pwmc_enable_fault_protection:
   \        0x0   0xE92D'407C        PUSH     {R2-R6,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
   \        0x8   0xE1B0'5001        MOVS     R5,R1
   \        0xC   0xE1B0'6002        MOVS     R6,R2
    464          	volatile uint32_t tmp;
    465          	assert(channel < ARRAY_SIZE(pwm->PWM_CH));
   \       0x10   0xE1B0'0005        MOVS     R0,R5
   \       0x14   0xE6EF'0070        UXTB     R0,R0
   \       0x18   0xE350'0004        CMP      R0,#+4
   \       0x1C   0x3A00'0004        BCC      ??pwmc_enable_fault_protection_0
   \       0x20   0xE300'21D1        MOVW     R2,#+465
   \       0x24   0x....'....        LDR      R1,??DataTable15_2
   \       0x28   0x....'....        LDR      R0,??DataTable15_4
   \       0x2C   0x....'....        BL       __aeabi_assert
   \       0x30   0x....'....        BL       __iar_EmptyStepPoint
    466          	tmp = pwm->PWM_FPE;
   \                     ??pwmc_enable_fault_protection_0:
   \       0x34   0xE594'006C        LDR      R0,[R4, #+108]
   \       0x38   0xE58D'0000        STR      R0,[SP, #+0]
    467          	tmp &= ~(PWM_FPE_FPE0_Msk << (8 * channel));
   \       0x3C   0xE59D'0000        LDR      R0,[SP, #+0]
   \       0x40   0xE3A0'10FF        MOV      R1,#+255
   \       0x44   0xE1B0'2185        LSLS     R2,R5,#+3
   \       0x48   0xE1F0'1211        MVNS     R1,R1, LSL R2
   \       0x4C   0xE011'0000        ANDS     R0,R1,R0
   \       0x50   0xE58D'0000        STR      R0,[SP, #+0]
    468          	pwm->PWM_FPE = tmp | ((uint32_t)fault_inputs << (8 * channel));
   \       0x54   0xE59D'0000        LDR      R0,[SP, #+0]
   \       0x58   0xE1B0'1006        MOVS     R1,R6
   \       0x5C   0xE6EF'1071        UXTB     R1,R1
   \       0x60   0xE1B0'2185        LSLS     R2,R5,#+3
   \       0x64   0xE190'0211        ORRS     R0,R0,R1, LSL R2
   \       0x68   0xE584'006C        STR      R0,[R4, #+108]
    469          }
   \       0x6C   0xE8BD'8073        POP      {R0,R1,R4-R6,PC}  ;; return
    470          
    471          #endif /* CONFIG_HAVE_PWMC_FMODE */
    472          
    473          #ifdef CONFIG_HAVE_PWMC_FAULT_PROT_HIZ

   \                                 In section SOFTPACK, align 4, keep-with-next
    474          void pwmc_set_fault_protection_to_hiz(Pwm *pwm, uint32_t value)
    475          {
    476          	pwm->PWM_FPV2 = value;
   \                     pwmc_set_fault_protection_to_hiz:
   \        0x0   0xE580'10C0        STR      R1,[R0, #+192]
    477          }
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
    478          
    479          #endif /* CONFIG_HAVE_PWMC_FAULT_PROT_HIZ */
    480          
    481          #ifdef CONFIG_HAVE_PWMC_ELINE

   \                                 In section SOFTPACK, align 4, keep-with-next
    482          void pwmc_configure_event_line_mode(Pwm *pwm, uint32_t value)
    483          {
    484          	pwm->PWM_ELMR[0] = value;
   \                     pwmc_configure_event_line_mode:
   \        0x0   0xE580'107C        STR      R1,[R0, #+124]
    485          }
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
    486          #endif /* CONFIG_HAVE_PWMC_ELINE */
    487          
    488          #ifdef CONFIG_HAVE_PWMC_SPREAD_SPECTRUM

   \                                 In section SOFTPACK, align 4, keep-with-next
    489          void pwmc_configure_spread_spectrum_mode(Pwm *pwm, uint32_t value)
    490          {
    491          	/* If channel 0 is disabled, write to SSPR */
    492          	if (0 == (pwm->PWM_SR & (1 << 0)))
   \                     pwmc_configure_spread_spectrum_mode:
   \        0x0   0xE590'200C        LDR      R2,[R0, #+12]
   \        0x4   0xE312'0001        TST      R2,#0x1
   \        0x8   0x1A00'0001        BNE      ??pwmc_configure_spread_spectrum_mode_0
    493          		pwm->PWM_SSPR = value;
   \        0xC   0xE580'10A0        STR      R1,[R0, #+160]
   \       0x10   0xEA00'0001        B        ??pwmc_configure_spread_spectrum_mode_1
    494          	/* Otherwise use update register */
    495          	else
    496          		pwm->PWM_SSPUP = PWM_SSPUP_SPRDUP(value);
   \                     ??pwmc_configure_spread_spectrum_mode_0:
   \       0x14   0xE3D1'24FF        BICS     R2,R1,#0xFF000000
   \       0x18   0xE580'20A4        STR      R2,[R0, #+164]
    497          }
   \                     ??pwmc_configure_spread_spectrum_mode_1:
   \       0x1C   0xE12F'FF1E        BX       LR               ;; return
    498          
    499          #endif /* CONFIG_HAVE_PWMC_SPREAD_SPECTRUM */
    500          
    501          #ifdef CONFIG_HAVE_PWMC_STEPPER_MOTOR

   \                                 In section SOFTPACK, align 4, keep-with-next
    502          void pwmc_configure_stepper_motor_mode(Pwm *pwm, uint32_t value)
    503          {
   \                     pwmc_configure_stepper_motor_mode:
   \        0x0   0xE92D'4038        PUSH     {R3-R5,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
   \        0x8   0xE1B0'5001        MOVS     R5,R1
    504          	trace_debug("pwm: CH0-1 Gray Count %s %s, CH2-3 Gray Count %s %s\n\r", \
    505          			(0 != (value & PWM_SMMR_DOWN0)) ? "Down" : "Up", \
    506          			(0 != (value & PWM_SMMR_GCEN0)) ? "Enable" : "Disable", \
    507          			(0 != (value & PWM_SMMR_DOWN1)) ? "Down" : "Up", \
    508          			(0 != (value & PWM_SMMR_GCEN1)) ? "Enable" : "Disable");
   \        0xC   0x....'....        LDR      R0,??DataTable15_5
   \       0x10   0xE590'0000        LDR      R0,[R0, #+0]
   \       0x14   0xE350'0005        CMP      R0,#+5
   \       0x18   0x3A00'0016        BCC      ??pwmc_configure_stepper_motor_mode_0
   \       0x1C   0xE315'0002        TST      R5,#0x2
   \       0x20   0x0A00'0001        BEQ      ??pwmc_configure_stepper_motor_mode_1
   \       0x24   0x....'....        LDR      R0,??DataTable15_19
   \       0x28   0xEA00'0000        B        ??pwmc_configure_stepper_motor_mode_2
   \                     ??pwmc_configure_stepper_motor_mode_1:
   \       0x2C   0x....'....        LDR      R0,??DataTable15_20
   \                     ??pwmc_configure_stepper_motor_mode_2:
   \       0x30   0xE315'0B80        TST      R5,#0x20000
   \       0x34   0x0A00'0001        BEQ      ??pwmc_configure_stepper_motor_mode_3
   \       0x38   0x....'....        LDR      R3,??DataTable15_21
   \       0x3C   0xEA00'0000        B        ??pwmc_configure_stepper_motor_mode_4
   \                     ??pwmc_configure_stepper_motor_mode_3:
   \       0x40   0x....'....        ADR      R3,??DataTable15  ;; 0x55, 0x70, 0x00, 0x00
   \                     ??pwmc_configure_stepper_motor_mode_4:
   \       0x44   0xE315'0001        TST      R5,#0x1
   \       0x48   0x0A00'0001        BEQ      ??pwmc_configure_stepper_motor_mode_5
   \       0x4C   0x....'....        LDR      R2,??DataTable15_19
   \       0x50   0xEA00'0000        B        ??pwmc_configure_stepper_motor_mode_6
   \                     ??pwmc_configure_stepper_motor_mode_5:
   \       0x54   0x....'....        LDR      R2,??DataTable15_20
   \                     ??pwmc_configure_stepper_motor_mode_6:
   \       0x58   0xE315'0B40        TST      R5,#0x10000
   \       0x5C   0x0A00'0001        BEQ      ??pwmc_configure_stepper_motor_mode_7
   \       0x60   0x....'....        LDR      R1,??DataTable15_21
   \       0x64   0xEA00'0000        B        ??pwmc_configure_stepper_motor_mode_8
   \                     ??pwmc_configure_stepper_motor_mode_7:
   \       0x68   0x....'....        ADR      R1,??DataTable15  ;; 0x55, 0x70, 0x00, 0x00
   \                     ??pwmc_configure_stepper_motor_mode_8:
   \       0x6C   0xE58D'0000        STR      R0,[SP, #+0]
   \       0x70   0x....'....        LDR      R0,??DataTable15_22
   \       0x74   0x....'....        BL       printf
    509          	pwm->PWM_SMMR = value;
   \                     ??pwmc_configure_stepper_motor_mode_0:
   \       0x78   0xE584'50B0        STR      R5,[R4, #+176]
    510          }
   \       0x7C   0xE8BD'8031        POP      {R0,R4,R5,PC}    ;; return
    511          #endif /* CONFIG_HAVE_PWMC_STEPPER_MOTOR */
    512          
    513          #ifdef CONFIG_HAVE_PWMC_WP

   \                                 In section SOFTPACK, align 4, keep-with-next
    514          void pwmc_set_write_protection_control(Pwm *pwm, uint32_t value)
    515          {
    516          	pwm->PWM_WPCR = value;
   \                     pwmc_set_write_protection_control:
   \        0x0   0xE580'10E4        STR      R1,[R0, #+228]
    517          }
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
    518          

   \                                 In section SOFTPACK, align 4, keep-with-next
    519          uint32_t pwmc_get_write_protection_status(Pwm *pwm)
    520          {
    521          	return pwm->PWM_WPSR;
   \                     pwmc_get_write_protection_status:
   \        0x0   0xE590'00E8        LDR      R0,[R0, #+232]
   \        0x4   0xE12F'FF1E        BX       LR               ;; return
    522          }
    523          #endif /* CONFIG_HAVE_PWMC_WP */
    524          
    525          #ifdef CONFIG_HAVE_PWMC_EXTERNAL_TRIGGER

   \                                 In section SOFTPACK, align 4, keep-with-next
    526          void pwmc_configure_external_trigger(Pwm *pwm,
    527          		uint32_t channel, uint32_t value)
    528          {
   \                     pwmc_configure_external_trigger:
   \        0x0   0xE92D'4070        PUSH     {R4-R6,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
   \        0x8   0xE1B0'5001        MOVS     R5,R1
   \        0xC   0xE1B0'6002        MOVS     R6,R2
    529          	trace_debug("pwm: external trigger for channel %u, value %08x\n\r", \
    530          		(unsigned)channel, (unsigned)value);
   \       0x10   0x....'....        LDR      R0,??DataTable15_5
   \       0x14   0xE590'0000        LDR      R0,[R0, #+0]
   \       0x18   0xE350'0005        CMP      R0,#+5
   \       0x1C   0x3A00'0003        BCC      ??pwmc_configure_external_trigger_0
   \       0x20   0xE1B0'2006        MOVS     R2,R6
   \       0x24   0xE1B0'1005        MOVS     R1,R5
   \       0x28   0x....'....        LDR      R0,??DataTable15_23
   \       0x2C   0x....'....        BL       printf
    531          	switch (channel) {
   \                     ??pwmc_configure_external_trigger_0:
   \       0x30   0xE1B0'0005        MOVS     R0,R5
   \       0x34   0xE350'0001        CMP      R0,#+1
   \       0x38   0x0A00'0002        BEQ      ??pwmc_configure_external_trigger_1
   \       0x3C   0xE350'0002        CMP      R0,#+2
   \       0x40   0x0A00'0002        BEQ      ??pwmc_configure_external_trigger_2
   \       0x44   0xEA00'0003        B        ??pwmc_configure_external_trigger_3
    532          	case 1:
    533          		pwm->PWM_ETRG1 = value;
   \                     ??pwmc_configure_external_trigger_1:
   \       0x48   0xE584'642C        STR      R6,[R4, #+1068]
    534          		break;
   \       0x4C   0xEA00'0006        B        ??pwmc_configure_external_trigger_4
    535          	case 2:
    536          		pwm->PWM_ETRG2 = value;
   \                     ??pwmc_configure_external_trigger_2:
   \       0x50   0xE584'644C        STR      R6,[R4, #+1100]
    537          		break;
   \       0x54   0xEA00'0004        B        ??pwmc_configure_external_trigger_4
    538          	default:
    539          		assert(0);
   \                     ??pwmc_configure_external_trigger_3:
   \       0x58   0xE300'221B        MOVW     R2,#+539
   \       0x5C   0x....'....        LDR      R1,??DataTable15_2
   \       0x60   0x....'....        ADR      R0,??DataTable15_1  ;; "0"
   \       0x64   0x....'....        BL       __aeabi_assert
   \       0x68   0x....'....        BL       __iar_EmptyStepPoint
    540          		break;
    541          	}
    542          }
   \                     ??pwmc_configure_external_trigger_4:
   \       0x6C   0xE8BD'8070        POP      {R4-R6,PC}       ;; return
    543          

   \                                 In section SOFTPACK, align 4, keep-with-next
    544          void pwmc_configure_leading_edge_blanking(Pwm *pwm,
    545          		uint32_t channel, uint32_t value)
    546          {
   \                     pwmc_configure_leading_edge_blanking:
   \        0x0   0xE92D'4070        PUSH     {R4-R6,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
   \        0x8   0xE1B0'5001        MOVS     R5,R1
   \        0xC   0xE1B0'6002        MOVS     R6,R2
    547          	trace_debug("pwm: leading-edge blanking channel %u, value %08x\n\r", \
    548          		(unsigned)channel, (unsigned)value);
   \       0x10   0x....'....        LDR      R0,??DataTable15_5
   \       0x14   0xE590'0000        LDR      R0,[R0, #+0]
   \       0x18   0xE350'0005        CMP      R0,#+5
   \       0x1C   0x3A00'0003        BCC      ??pwmc_configure_leading_edge_blanking_0
   \       0x20   0xE1B0'2006        MOVS     R2,R6
   \       0x24   0xE1B0'1005        MOVS     R1,R5
   \       0x28   0x....'....        LDR      R0,??DataTable15_24
   \       0x2C   0x....'....        BL       printf
    549          	switch (channel) {
   \                     ??pwmc_configure_leading_edge_blanking_0:
   \       0x30   0xE1B0'0005        MOVS     R0,R5
   \       0x34   0xE350'0001        CMP      R0,#+1
   \       0x38   0x0A00'0002        BEQ      ??pwmc_configure_leading_edge_blanking_1
   \       0x3C   0xE350'0002        CMP      R0,#+2
   \       0x40   0x0A00'0002        BEQ      ??pwmc_configure_leading_edge_blanking_2
   \       0x44   0xEA00'0003        B        ??pwmc_configure_leading_edge_blanking_3
    550          	case 1:
    551          		pwm->PWM_LEBR1 = value;
   \                     ??pwmc_configure_leading_edge_blanking_1:
   \       0x48   0xE584'6430        STR      R6,[R4, #+1072]
    552          		break;
   \       0x4C   0xEA00'0006        B        ??pwmc_configure_leading_edge_blanking_4
    553          	case 2:
    554          		pwm->PWM_LEBR2 = value;
   \                     ??pwmc_configure_leading_edge_blanking_2:
   \       0x50   0xE584'6450        STR      R6,[R4, #+1104]
    555          		break;
   \       0x54   0xEA00'0004        B        ??pwmc_configure_leading_edge_blanking_4
    556          	default:
    557          		assert(0);
   \                     ??pwmc_configure_leading_edge_blanking_3:
   \       0x58   0xE300'222D        MOVW     R2,#+557
   \       0x5C   0x....'....        LDR      R1,??DataTable15_2
   \       0x60   0x....'....        ADR      R0,??DataTable15_1  ;; "0"
   \       0x64   0x....'....        BL       __aeabi_assert
   \       0x68   0x....'....        BL       __iar_EmptyStepPoint
    558          		break;
    559          	}
    560          }
   \                     ??pwmc_configure_leading_edge_blanking_4:
   \       0x6C   0xE8BD'8070        POP      {R4-R6,PC}       ;; return

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable15:
   \        0x0   0x55 0x70          DC8      0x55, 0x70, 0x00, 0x00

   \              0x00 0x00

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable15_1:
   \        0x0   0x30 0x00          DC8      "0",0x0,0x0

   \              0x00 0x00

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable15_2:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable15_3:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable15_4:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable15_5:
   \        0x0   0x....'....        DC32     trace_level

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable15_6:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable15_7:
   \        0x0   0x....'....        DC32     ?_4

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable15_8:
   \        0x0   0x....'....        DC32     ?_5

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable15_9:
   \        0x0   0x....'....        DC32     ?_6

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable15_10:
   \        0x0   0x....'....        DC32     ?_7

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable15_11:
   \        0x0   0x....'....        DC32     pwmc_cb

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable15_12:
   \        0x0   0x....'....        DC32     pwm_dma_channel

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable15_13:
   \        0x0   0x....'....        DC32     ?_8

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable15_14:
   \        0x0   0x....'....        DC32     ?_9

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable15_15:
   \        0x0   0x....'....        DC32     ?_10

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable15_16:
   \        0x0   0x....'....        DC32     ?_11

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable15_17:
   \        0x0   0x....'....        DC32     ?_12

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable15_18:
   \        0x0   0x....'....        DC32     ?_13

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable15_19:
   \        0x0   0x....'....        DC32     ?_17

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable15_20:
   \        0x0   0x....'....        DC32     ?_18

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable15_21:
   \        0x0   0x....'....        DC32     ?_15

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable15_22:
   \        0x0   0x....'....        DC32     ?_14

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable15_23:
   \        0x0   0x....'....        DC32     ?_19

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable15_24:
   \        0x0   0x....'....        DC32     ?_21

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x78 0x20          DC8 "x < 8"

   \              0x3C 0x20    

   \              0x38 0x00
   \        0x6   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x43 0x3A          DC8 0x43, 0x3A, 0x5C, 0x77, 0x6F, 0x72, 0x6B, 0x5C

   \              0x5C 0x77    

   \              0x6F 0x72    

   \              0x6B 0x5C
   \        0x8   0x41 0x74          DC8 0x41, 0x74, 0x6D, 0x65, 0x6C, 0x53, 0x6F, 0x66

   \              0x6D 0x65    

   \              0x6C 0x53    

   \              0x6F 0x66
   \       0x10   0x74 0x50          DC8 0x74, 0x50, 0x41, 0x63, 0x6B, 0x5C, 0x61, 0x74

   \              0x41 0x63    

   \              0x6B 0x5C    

   \              0x61 0x74
   \       0x18   0x6D 0x65          DC8 0x6D, 0x65, 0x6C, 0x2D, 0x73, 0x6F, 0x66, 0x74

   \              0x6C 0x2D    

   \              0x73 0x6F    

   \              0x66 0x74
   \       0x20   0x77 0x61          DC8 0x77, 0x61, 0x72, 0x65, 0x2D, 0x70, 0x61, 0x63

   \              0x72 0x65    

   \              0x2D 0x70    

   \              0x61 0x63
   \       0x28   0x6B 0x61          DC8 0x6B, 0x61, 0x67, 0x65, 0x2D, 0x32, 0x2E, 0x31

   \              0x67 0x65    

   \              0x2D 0x32    

   \              0x2E 0x31
   \       0x30   0x37 0x5C          DC8 0x37, 0x5C, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72

   \              0x64 0x72    

   \              0x69 0x76    

   \              0x65 0x72
   \       0x38   0x73 0x5C          DC8 0x73, 0x5C, 0x70, 0x65, 0x72, 0x69, 0x70, 0x68

   \              0x70 0x65    

   \              0x72 0x69    

   \              0x70 0x68
   \       0x40   0x65 0x72          DC8 0x65, 0x72, 0x61, 0x6C, 0x73, 0x5C, 0x70, 0x77

   \              0x61 0x6C    

   \              0x73 0x5C    

   \              0x70 0x77
   \       0x48   0x6D 0x63          DC8 0x6D, 0x63, 0x2E, 0x63, 0

   \              0x2E 0x63    

   \              0x00
   \       0x4D   0x00 0x00          DC8 0, 0, 0

   \              0x00

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x63 0x68          DC8 0x63, 0x68, 0x61, 0x6E, 0x6E, 0x65, 0x6C, 0x20

   \              0x61 0x6E    

   \              0x6E 0x65    

   \              0x6C 0x20
   \        0x8   0x3C 0x20          DC8 0x3C, 0x20, 0x28, 0x73, 0x69, 0x7A, 0x65, 0x6F

   \              0x28 0x73    

   \              0x69 0x7A    

   \              0x65 0x6F
   \       0x10   0x66 0x20          DC8 0x66, 0x20, 0x28, 0x28, 0x70, 0x77, 0x6D, 0x2D

   \              0x28 0x28    

   \              0x70 0x77    

   \              0x6D 0x2D
   \       0x18   0x3E 0x50          DC8 0x3E, 0x50, 0x57, 0x4D, 0x5F, 0x43, 0x48, 0x29

   \              0x57 0x4D    

   \              0x5F 0x43    

   \              0x48 0x29
   \       0x20   0x29 0x20          DC8 0x29, 0x20, 0x2F, 0x20, 0x73, 0x69, 0x7A, 0x65

   \              0x2F 0x20    

   \              0x73 0x69    

   \              0x7A 0x65
   \       0x28   0x6F 0x66          DC8 0x6F, 0x66, 0x28, 0x2A, 0x28, 0x70, 0x77, 0x6D

   \              0x28 0x2A    

   \              0x28 0x70    

   \              0x77 0x6D
   \       0x30   0x2D 0x3E          DC8 0x2D, 0x3E, 0x50, 0x57, 0x4D, 0x5F, 0x43, 0x48

   \              0x50 0x57    

   \              0x4D 0x5F    

   \              0x43 0x48
   \       0x38   0x29 0x29          DC8 0x29, 0x29, 0x29, 0

   \              0x29 0x00

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x2D 0x44          DC8 0x2D, 0x44, 0x2D, 0x20, 0x43, 0x3A, 0x5C, 0x77

   \              0x2D 0x20    

   \              0x43 0x3A    

   \              0x5C 0x77
   \        0x8   0x6F 0x72          DC8 0x6F, 0x72, 0x6B, 0x5C, 0x41, 0x74, 0x6D, 0x65

   \              0x6B 0x5C    

   \              0x41 0x74    

   \              0x6D 0x65
   \       0x10   0x6C 0x53          DC8 0x6C, 0x53, 0x6F, 0x66, 0x74, 0x50, 0x41, 0x63

   \              0x6F 0x66    

   \              0x74 0x50    

   \              0x41 0x63
   \       0x18   0x6B 0x5C          DC8 0x6B, 0x5C, 0x61, 0x74, 0x6D, 0x65, 0x6C, 0x2D

   \              0x61 0x74    

   \              0x6D 0x65    

   \              0x6C 0x2D
   \       0x20   0x73 0x6F          DC8 0x73, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65

   \              0x66 0x74    

   \              0x77 0x61    

   \              0x72 0x65
   \       0x28   0x2D 0x70          DC8 0x2D, 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65

   \              0x61 0x63    

   \              0x6B 0x61    

   \              0x67 0x65
   \       0x30   0x2D 0x32          DC8 0x2D, 0x32, 0x2E, 0x31, 0x37, 0x5C, 0x64, 0x72

   \              0x2E 0x31    

   \              0x37 0x5C    

   \              0x64 0x72
   \       0x38   0x69 0x76          DC8 0x69, 0x76, 0x65, 0x72, 0x73, 0x5C, 0x70, 0x65

   \              0x65 0x72    

   \              0x73 0x5C    

   \              0x70 0x65
   \       0x40   0x72 0x69          DC8 0x72, 0x69, 0x70, 0x68, 0x65, 0x72, 0x61, 0x6C

   \              0x70 0x68    

   \              0x65 0x72    

   \              0x61 0x6C
   \       0x48   0x73 0x5C          DC8 0x73, 0x5C, 0x70, 0x77, 0x6D, 0x63, 0x2E, 0x63

   \              0x70 0x77    

   \              0x6D 0x63    

   \              0x2E 0x63
   \       0x50   0x3A 0x31          DC8 0x3A, 0x31, 0x38, 0x31, 0x20, 0x70, 0x77, 0x6D

   \              0x38 0x31    

   \              0x20 0x70    

   \              0x77 0x6D
   \       0x58   0x3A 0x20          DC8 0x3A, 0x20, 0x73, 0x65, 0x74, 0x20, 0x63, 0x68

   \              0x73 0x65    

   \              0x74 0x20    

   \              0x63 0x68
   \       0x60   0x61 0x6E          DC8 0x61, 0x6E, 0x6E, 0x65, 0x6C, 0x20, 0x25, 0x75

   \              0x6E 0x65    

   \              0x6C 0x20    

   \              0x25 0x75
   \       0x68   0x20 0x77          DC8 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6D, 0x6F

   \              0x69 0x74    

   \              0x68 0x20    

   \              0x6D 0x6F
   \       0x70   0x64 0x65          DC8 0x64, 0x65, 0x20, 0x30, 0x78, 0x25, 0x30, 0x38

   \              0x20 0x30    

   \              0x78 0x25    

   \              0x30 0x38
   \       0x78   0x78 0x0A          DC8 0x78, 0x0A, 0x0D, 0

   \              0x0D 0x00

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x70 0x77          DC8 "pwm->PWM_CH[channel].PWM_CPRD >= duty"

   \              0x6D 0x2D    

   \              0x3E 0x50    

   \              0x57 0x4D    

   \              0x5F 0x43    

   \              0x48 0x5B    

   \              0x63 0x68    

   \              0x61 0x6E    

   \              0x6E 0x65    

   \              0x6C 0x5D    

   \              0x2E 0x50    

   \              0x57 0x4D    

   \              0x5F 0x43    

   \              0x50 0x52    

   \              0x44 0x20    

   \              0x3E 0x3D    

   \              0x20 0x64    

   \              0x75 0x74    

   \              0x79 0x00
   \       0x26   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x2D 0x44          DC8 0x2D, 0x44, 0x2D, 0x20, 0x43, 0x3A, 0x5C, 0x77

   \              0x2D 0x20    

   \              0x43 0x3A    

   \              0x5C 0x77
   \        0x8   0x6F 0x72          DC8 0x6F, 0x72, 0x6B, 0x5C, 0x41, 0x74, 0x6D, 0x65

   \              0x6B 0x5C    

   \              0x41 0x74    

   \              0x6D 0x65
   \       0x10   0x6C 0x53          DC8 0x6C, 0x53, 0x6F, 0x66, 0x74, 0x50, 0x41, 0x63

   \              0x6F 0x66    

   \              0x74 0x50    

   \              0x41 0x63
   \       0x18   0x6B 0x5C          DC8 0x6B, 0x5C, 0x61, 0x74, 0x6D, 0x65, 0x6C, 0x2D

   \              0x61 0x74    

   \              0x6D 0x65    

   \              0x6C 0x2D
   \       0x20   0x73 0x6F          DC8 0x73, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65

   \              0x66 0x74    

   \              0x77 0x61    

   \              0x72 0x65
   \       0x28   0x2D 0x70          DC8 0x2D, 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65

   \              0x61 0x63    

   \              0x6B 0x61    

   \              0x67 0x65
   \       0x30   0x2D 0x32          DC8 0x2D, 0x32, 0x2E, 0x31, 0x37, 0x5C, 0x64, 0x72

   \              0x2E 0x31    

   \              0x37 0x5C    

   \              0x64 0x72
   \       0x38   0x69 0x76          DC8 0x69, 0x76, 0x65, 0x72, 0x73, 0x5C, 0x70, 0x65

   \              0x65 0x72    

   \              0x73 0x5C    

   \              0x70 0x65
   \       0x40   0x72 0x69          DC8 0x72, 0x69, 0x70, 0x68, 0x65, 0x72, 0x61, 0x6C

   \              0x70 0x68    

   \              0x65 0x72    

   \              0x61 0x6C
   \       0x48   0x73 0x5C          DC8 0x73, 0x5C, 0x70, 0x77, 0x6D, 0x63, 0x2E, 0x63

   \              0x70 0x77    

   \              0x6D 0x63    

   \              0x2E 0x63
   \       0x50   0x3A 0x32          DC8 0x3A, 0x32, 0x35, 0x38, 0x20, 0x70, 0x77, 0x6D

   \              0x35 0x38    

   \              0x20 0x70    

   \              0x77 0x6D
   \       0x58   0x3A 0x20          DC8 0x3A, 0x20, 0x53, 0x59, 0x4E, 0x43, 0x20, 0x43

   \              0x53 0x59    

   \              0x4E 0x43    

   \              0x20 0x43
   \       0x60   0x48 0x73          DC8 0x48, 0x73, 0x20, 0x62, 0x69, 0x74, 0x6D, 0x61

   \              0x20 0x62    

   \              0x69 0x74    

   \              0x6D 0x61
   \       0x68   0x70 0x20          DC8 0x70, 0x20, 0x30, 0x78, 0x25, 0x78, 0x2C, 0x20

   \              0x30 0x78    

   \              0x25 0x78    

   \              0x2C 0x20
   \       0x70   0x55 0x70          DC8 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x4D

   \              0x64 0x61    

   \              0x74 0x65    

   \              0x20 0x4D
   \       0x78   0x6F 0x64          DC8 0x6F, 0x64, 0x65, 0x20, 0x25, 0x75, 0x2C, 0x20

   \              0x65 0x20    

   \              0x25 0x75    

   \              0x2C 0x20
   \       0x80   0x44 0x4D          DC8 0x44, 0x4D, 0x41, 0x20, 0x52, 0x65, 0x71, 0x75

   \              0x41 0x20    

   \              0x52 0x65    

   \              0x71 0x75
   \       0x88   0x65 0x73          DC8 0x65, 0x73, 0x74, 0x20, 0x4D, 0x6F, 0x64, 0x65

   \              0x74 0x20    

   \              0x4D 0x6F    

   \              0x64 0x65
   \       0x90   0x20 0x25          DC8 0x20, 0x25, 0x75, 0x2C, 0x20, 0x52, 0x65, 0x71

   \              0x75 0x2C    

   \              0x20 0x52    

   \              0x65 0x71
   \       0x98   0x75 0x65          DC8 0x75, 0x65, 0x73, 0x74, 0x20, 0x43, 0x6F, 0x6D

   \              0x73 0x74    

   \              0x20 0x43    

   \              0x6F 0x6D
   \       0xA0   0x70 0x61          DC8 0x70, 0x61, 0x72, 0x69, 0x73, 0x6F, 0x6E, 0x20

   \              0x72 0x69    

   \              0x73 0x6F    

   \              0x6E 0x20
   \       0xA8   0x53 0x65          DC8 0x53, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x69, 0x6F

   \              0x6C 0x65    

   \              0x63 0x74    

   \              0x69 0x6F
   \       0xB0   0x6E 0x20          DC8 0x6E, 0x20, 0x25, 0x75, 0x0A, 0x0D, 0

   \              0x25 0x75    

   \              0x0A 0x0D    

   \              0x00
   \       0xB7   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_6:
   \        0x0   0x28 0x70          DC8 "(pwm_sr & (pwm->PWM_SCM ^ sync_bits)) == 0"

   \              0x77 0x6D    

   \              0x5F 0x73    

   \              0x72 0x20    

   \              0x26 0x20    

   \              0x28 0x70    

   \              0x77 0x6D    

   \              0x2D 0x3E    

   \              0x50 0x57    

   \              0x4D 0x5F    

   \              0x53 0x43    

   \              0x4D 0x20    

   \              0x5E 0x20    

   \              0x73 0x79    

   \              0x6E 0x63    

   \              0x5F 0x62    

   \              0x69 0x74    

   \              0x73 0x29    

   \              0x29 0x20    

   \              0x3D 0x3D    

   \              0x20 0x30    

   \              0x00
   \       0x2B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_7:
   \        0x0   0x28 0x28          DC8 "((mode & (0x3u << 16)) >> 16) != 3"

   \              0x6D 0x6F    

   \              0x64 0x65    

   \              0x20 0x26    

   \              0x20 0x28    

   \              0x30 0x78    

   \              0x33 0x75    

   \              0x20 0x3C    

   \              0x3C 0x20    

   \              0x31 0x36    

   \              0x29 0x29    

   \              0x20 0x3E    

   \              0x3E 0x20    

   \              0x31 0x36    

   \              0x29 0x20    

   \              0x21 0x3D    

   \              0x20 0x33    

   \              0x00
   \       0x23   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_8:
   \        0x0   0x70 0x77          DC8 "pwm_dma_channel"

   \              0x6D 0x5F    

   \              0x64 0x6D    

   \              0x61 0x5F    

   \              0x63 0x68    

   \              0x61 0x6E    

   \              0x6E 0x65    

   \              0x6C 0x00

   \                                 In section .rodata, align 4
   \                     ?_9:
   \        0x0   0x2D 0x44          DC8 0x2D, 0x44, 0x2D, 0x20, 0x43, 0x3A, 0x5C, 0x77

   \              0x2D 0x20    

   \              0x43 0x3A    

   \              0x5C 0x77
   \        0x8   0x6F 0x72          DC8 0x6F, 0x72, 0x6B, 0x5C, 0x41, 0x74, 0x6D, 0x65

   \              0x6B 0x5C    

   \              0x41 0x74    

   \              0x6D 0x65
   \       0x10   0x6C 0x53          DC8 0x6C, 0x53, 0x6F, 0x66, 0x74, 0x50, 0x41, 0x63

   \              0x6F 0x66    

   \              0x74 0x50    

   \              0x41 0x63
   \       0x18   0x6B 0x5C          DC8 0x6B, 0x5C, 0x61, 0x74, 0x6D, 0x65, 0x6C, 0x2D

   \              0x61 0x74    

   \              0x6D 0x65    

   \              0x6C 0x2D
   \       0x20   0x73 0x6F          DC8 0x73, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65

   \              0x66 0x74    

   \              0x77 0x61    

   \              0x72 0x65
   \       0x28   0x2D 0x70          DC8 0x2D, 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65

   \              0x61 0x63    

   \              0x6B 0x61    

   \              0x67 0x65
   \       0x30   0x2D 0x32          DC8 0x2D, 0x32, 0x2E, 0x31, 0x37, 0x5C, 0x64, 0x72

   \              0x2E 0x31    

   \              0x37 0x5C    

   \              0x64 0x72
   \       0x38   0x69 0x76          DC8 0x69, 0x76, 0x65, 0x72, 0x73, 0x5C, 0x70, 0x65

   \              0x65 0x72    

   \              0x73 0x5C    

   \              0x70 0x65
   \       0x40   0x72 0x69          DC8 0x72, 0x69, 0x70, 0x68, 0x65, 0x72, 0x61, 0x6C

   \              0x70 0x68    

   \              0x65 0x72    

   \              0x61 0x6C
   \       0x48   0x73 0x5C          DC8 0x73, 0x5C, 0x70, 0x77, 0x6D, 0x63, 0x2E, 0x63

   \              0x70 0x77    

   \              0x6D 0x63    

   \              0x2E 0x63
   \       0x50   0x3A 0x33          DC8 0x3A, 0x33, 0x36, 0x33, 0x20, 0x70, 0x77, 0x6D

   \              0x36 0x33    

   \              0x20 0x70    

   \              0x77 0x6D
   \       0x58   0x3A 0x20          DC8 0x3A, 0x20, 0x43, 0x48, 0x25, 0x75, 0x20, 0x50

   \              0x43 0x48    

   \              0x25 0x75    

   \              0x20 0x50
   \       0x60   0x57 0x4D          DC8 0x57, 0x4D, 0x25, 0x63, 0x20, 0x6F, 0x75, 0x74

   \              0x25 0x63    

   \              0x20 0x6F    

   \              0x75 0x74
   \       0x68   0x70 0x75          DC8 0x70, 0x75, 0x74, 0x20, 0x6F, 0x76, 0x65, 0x72

   \              0x74 0x20    

   \              0x6F 0x76    

   \              0x65 0x72
   \       0x70   0x72 0x69          DC8 0x72, 0x69, 0x64, 0x64, 0x65, 0x6E, 0x20, 0x74

   \              0x64 0x64    

   \              0x65 0x6E    

   \              0x20 0x74
   \       0x78   0x6F 0x20          DC8 0x6F, 0x20, 0x25, 0x75, 0x0A, 0x0D, 0

   \              0x25 0x75    

   \              0x0A 0x0D    

   \              0x00
   \       0x7F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_10:
   \        0x0   0x2D 0x44          DC8 0x2D, 0x44, 0x2D, 0x20, 0x43, 0x3A, 0x5C, 0x77

   \              0x2D 0x20    

   \              0x43 0x3A    

   \              0x5C 0x77
   \        0x8   0x6F 0x72          DC8 0x6F, 0x72, 0x6B, 0x5C, 0x41, 0x74, 0x6D, 0x65

   \              0x6B 0x5C    

   \              0x41 0x74    

   \              0x6D 0x65
   \       0x10   0x6C 0x53          DC8 0x6C, 0x53, 0x6F, 0x66, 0x74, 0x50, 0x41, 0x63

   \              0x6F 0x66    

   \              0x74 0x50    

   \              0x41 0x63
   \       0x18   0x6B 0x5C          DC8 0x6B, 0x5C, 0x61, 0x74, 0x6D, 0x65, 0x6C, 0x2D

   \              0x61 0x74    

   \              0x6D 0x65    

   \              0x6C 0x2D
   \       0x20   0x73 0x6F          DC8 0x73, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65

   \              0x66 0x74    

   \              0x77 0x61    

   \              0x72 0x65
   \       0x28   0x2D 0x70          DC8 0x2D, 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65

   \              0x61 0x63    

   \              0x6B 0x61    

   \              0x67 0x65
   \       0x30   0x2D 0x32          DC8 0x2D, 0x32, 0x2E, 0x31, 0x37, 0x5C, 0x64, 0x72

   \              0x2E 0x31    

   \              0x37 0x5C    

   \              0x64 0x72
   \       0x38   0x69 0x76          DC8 0x69, 0x76, 0x65, 0x72, 0x73, 0x5C, 0x70, 0x65

   \              0x65 0x72    

   \              0x73 0x5C    

   \              0x70 0x65
   \       0x40   0x72 0x69          DC8 0x72, 0x69, 0x70, 0x68, 0x65, 0x72, 0x61, 0x6C

   \              0x70 0x68    

   \              0x65 0x72    

   \              0x61 0x6C
   \       0x48   0x73 0x5C          DC8 0x73, 0x5C, 0x70, 0x77, 0x6D, 0x63, 0x2E, 0x63

   \              0x70 0x77    

   \              0x6D 0x63    

   \              0x2E 0x63
   \       0x50   0x3A 0x33          DC8 0x3A, 0x33, 0x39, 0x33, 0x20, 0x70, 0x77, 0x6D

   \              0x39 0x33    

   \              0x20 0x70    

   \              0x77 0x6D
   \       0x58   0x3A 0x20          DC8 0x3A, 0x20, 0x43, 0x48, 0x25, 0x75, 0x20, 0x50

   \              0x43 0x48    

   \              0x25 0x75    

   \              0x20 0x50
   \       0x60   0x57 0x4D          DC8 0x57, 0x4D, 0x25, 0x63, 0x20, 0x6F, 0x75, 0x74

   \              0x25 0x63    

   \              0x20 0x6F    

   \              0x75 0x74
   \       0x68   0x70 0x75          DC8 0x70, 0x75, 0x74, 0x20, 0x6F, 0x76, 0x65, 0x72

   \              0x74 0x20    

   \              0x6F 0x76    

   \              0x65 0x72
   \       0x70   0x72 0x69          DC8 0x72, 0x69, 0x64, 0x65, 0x20, 0x64, 0x69, 0x73

   \              0x64 0x65    

   \              0x20 0x64    

   \              0x69 0x73
   \       0x78   0x61 0x62          DC8 0x61, 0x62, 0x6C, 0x65, 0x64, 0x0A, 0x0D, 0

   \              0x6C 0x65    

   \              0x64 0x0A    

   \              0x0D 0x00

   \                                 In section .rodata, align 4
   \                     ?_11:
   \        0x0   0x2D 0x44          DC8 0x2D, 0x44, 0x2D, 0x20, 0x43, 0x3A, 0x5C, 0x77

   \              0x2D 0x20    

   \              0x43 0x3A    

   \              0x5C 0x77
   \        0x8   0x6F 0x72          DC8 0x6F, 0x72, 0x6B, 0x5C, 0x41, 0x74, 0x6D, 0x65

   \              0x6B 0x5C    

   \              0x41 0x74    

   \              0x6D 0x65
   \       0x10   0x6C 0x53          DC8 0x6C, 0x53, 0x6F, 0x66, 0x74, 0x50, 0x41, 0x63

   \              0x6F 0x66    

   \              0x74 0x50    

   \              0x41 0x63
   \       0x18   0x6B 0x5C          DC8 0x6B, 0x5C, 0x61, 0x74, 0x6D, 0x65, 0x6C, 0x2D

   \              0x61 0x74    

   \              0x6D 0x65    

   \              0x6C 0x2D
   \       0x20   0x73 0x6F          DC8 0x73, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65

   \              0x66 0x74    

   \              0x77 0x61    

   \              0x72 0x65
   \       0x28   0x2D 0x70          DC8 0x2D, 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65

   \              0x61 0x63    

   \              0x6B 0x61    

   \              0x67 0x65
   \       0x30   0x2D 0x32          DC8 0x2D, 0x32, 0x2E, 0x31, 0x37, 0x5C, 0x64, 0x72

   \              0x2E 0x31    

   \              0x37 0x5C    

   \              0x64 0x72
   \       0x38   0x69 0x76          DC8 0x69, 0x76, 0x65, 0x72, 0x73, 0x5C, 0x70, 0x65

   \              0x65 0x72    

   \              0x73 0x5C    

   \              0x70 0x65
   \       0x40   0x72 0x69          DC8 0x72, 0x69, 0x70, 0x68, 0x65, 0x72, 0x61, 0x6C

   \              0x70 0x68    

   \              0x65 0x72    

   \              0x61 0x6C
   \       0x48   0x73 0x5C          DC8 0x73, 0x5C, 0x70, 0x77, 0x6D, 0x63, 0x2E, 0x63

   \              0x70 0x77    

   \              0x6D 0x63    

   \              0x2E 0x63
   \       0x50   0x3A 0x34          DC8 0x3A, 0x34, 0x31, 0x39, 0x20, 0x70, 0x77, 0x6D

   \              0x31 0x39    

   \              0x20 0x70    

   \              0x77 0x6D
   \       0x58   0x3A 0x20          DC8 0x3A, 0x20, 0x43, 0x48, 0x25, 0x75, 0x20, 0x6F

   \              0x43 0x48    

   \              0x25 0x75    

   \              0x20 0x6F
   \       0x60   0x75 0x74          DC8 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x64, 0x65

   \              0x70 0x75    

   \              0x74 0x20    

   \              0x64 0x65
   \       0x68   0x61 0x64          DC8 0x61, 0x64, 0x20, 0x74, 0x69, 0x6D, 0x65, 0x20

   \              0x20 0x74    

   \              0x69 0x6D    

   \              0x65 0x20
   \       0x70   0x48 0x3A          DC8 0x48, 0x3A, 0x20, 0x25, 0x75, 0x2C, 0x20, 0x4C

   \              0x20 0x25    

   \              0x75 0x2C    

   \              0x20 0x4C
   \       0x78   0x3A 0x20          DC8 0x3A, 0x20, 0x25, 0x75, 0x0A, 0x0D, 0

   \              0x25 0x75    

   \              0x0A 0x0D    

   \              0x00
   \       0x7F   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_12:
   \        0x0   0x70 0x77          DC8 "pwm_cprd - pwm_cdty >= time_h"

   \              0x6D 0x5F    

   \              0x63 0x70    

   \              0x72 0x64    

   \              0x20 0x2D    

   \              0x20 0x70    

   \              0x77 0x6D    

   \              0x5F 0x63    

   \              0x64 0x74    

   \              0x79 0x20    

   \              0x3E 0x3D    

   \              0x20 0x74    

   \              0x69 0x6D    

   \              0x65 0x5F    

   \              0x68 0x00
   \       0x1E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_13:
   \        0x0   0x70 0x77          DC8 "pwm_cdty >= time_l"

   \              0x6D 0x5F    

   \              0x63 0x64    

   \              0x74 0x79    

   \              0x20 0x3E    

   \              0x3D 0x20    

   \              0x74 0x69    

   \              0x6D 0x65    

   \              0x5F 0x6C    

   \              0x00
   \       0x13   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_14:
   \        0x0   0x2D 0x44          DC8 0x2D, 0x44, 0x2D, 0x20, 0x43, 0x3A, 0x5C, 0x77

   \              0x2D 0x20    

   \              0x43 0x3A    

   \              0x5C 0x77
   \        0x8   0x6F 0x72          DC8 0x6F, 0x72, 0x6B, 0x5C, 0x41, 0x74, 0x6D, 0x65

   \              0x6B 0x5C    

   \              0x41 0x74    

   \              0x6D 0x65
   \       0x10   0x6C 0x53          DC8 0x6C, 0x53, 0x6F, 0x66, 0x74, 0x50, 0x41, 0x63

   \              0x6F 0x66    

   \              0x74 0x50    

   \              0x41 0x63
   \       0x18   0x6B 0x5C          DC8 0x6B, 0x5C, 0x61, 0x74, 0x6D, 0x65, 0x6C, 0x2D

   \              0x61 0x74    

   \              0x6D 0x65    

   \              0x6C 0x2D
   \       0x20   0x73 0x6F          DC8 0x73, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65

   \              0x66 0x74    

   \              0x77 0x61    

   \              0x72 0x65
   \       0x28   0x2D 0x70          DC8 0x2D, 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65

   \              0x61 0x63    

   \              0x6B 0x61    

   \              0x67 0x65
   \       0x30   0x2D 0x32          DC8 0x2D, 0x32, 0x2E, 0x31, 0x37, 0x5C, 0x64, 0x72

   \              0x2E 0x31    

   \              0x37 0x5C    

   \              0x64 0x72
   \       0x38   0x69 0x76          DC8 0x69, 0x76, 0x65, 0x72, 0x73, 0x5C, 0x70, 0x65

   \              0x65 0x72    

   \              0x73 0x5C    

   \              0x70 0x65
   \       0x40   0x72 0x69          DC8 0x72, 0x69, 0x70, 0x68, 0x65, 0x72, 0x61, 0x6C

   \              0x70 0x68    

   \              0x65 0x72    

   \              0x61 0x6C
   \       0x48   0x73 0x5C          DC8 0x73, 0x5C, 0x70, 0x77, 0x6D, 0x63, 0x2E, 0x63

   \              0x70 0x77    

   \              0x6D 0x63    

   \              0x2E 0x63
   \       0x50   0x3A 0x35          DC8 0x3A, 0x35, 0x30, 0x34, 0x20, 0x70, 0x77, 0x6D

   \              0x30 0x34    

   \              0x20 0x70    

   \              0x77 0x6D
   \       0x58   0x3A 0x20          DC8 0x3A, 0x20, 0x43, 0x48, 0x30, 0x2D, 0x31, 0x20

   \              0x43 0x48    

   \              0x30 0x2D    

   \              0x31 0x20
   \       0x60   0x47 0x72          DC8 0x47, 0x72, 0x61, 0x79, 0x20, 0x43, 0x6F, 0x75

   \              0x61 0x79    

   \              0x20 0x43    

   \              0x6F 0x75
   \       0x68   0x6E 0x74          DC8 0x6E, 0x74, 0x20, 0x25, 0x73, 0x20, 0x25, 0x73

   \              0x20 0x25    

   \              0x73 0x20    

   \              0x25 0x73
   \       0x70   0x2C 0x20          DC8 0x2C, 0x20, 0x43, 0x48, 0x32, 0x2D, 0x33, 0x20

   \              0x43 0x48    

   \              0x32 0x2D    

   \              0x33 0x20
   \       0x78   0x47 0x72          DC8 0x47, 0x72, 0x61, 0x79, 0x20, 0x43, 0x6F, 0x75

   \              0x61 0x79    

   \              0x20 0x43    

   \              0x6F 0x75
   \       0x80   0x6E 0x74          DC8 0x6E, 0x74, 0x20, 0x25, 0x73, 0x20, 0x25, 0x73

   \              0x20 0x25    

   \              0x73 0x20    

   \              0x25 0x73
   \       0x88   0x0A 0x0D          DC8 0x0A, 0x0D, 0

   \              0x00
   \       0x8B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_15:
   \        0x0   0x44 0x6F          DC8 "Down"

   \              0x77 0x6E    

   \              0x00
   \        0x5   0x00 0x00          DC8 0, 0, 0

   \              0x00

   \                                 In section .rodata, align 4
   \        0x0   0x55 0x70          DC8 "Up"

   \              0x00
   \        0x3   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_17:
   \        0x0   0x45 0x6E          DC8 "Enable"

   \              0x61 0x62    

   \              0x6C 0x65    

   \              0x00
   \        0x7   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     ?_18:
   \        0x0   0x44 0x69          DC8 "Disable"

   \              0x73 0x61    

   \              0x62 0x6C    

   \              0x65 0x00

   \                                 In section .rodata, align 4
   \                     ?_19:
   \        0x0   0x2D 0x44          DC8 0x2D, 0x44, 0x2D, 0x20, 0x43, 0x3A, 0x5C, 0x77

   \              0x2D 0x20    

   \              0x43 0x3A    

   \              0x5C 0x77
   \        0x8   0x6F 0x72          DC8 0x6F, 0x72, 0x6B, 0x5C, 0x41, 0x74, 0x6D, 0x65

   \              0x6B 0x5C    

   \              0x41 0x74    

   \              0x6D 0x65
   \       0x10   0x6C 0x53          DC8 0x6C, 0x53, 0x6F, 0x66, 0x74, 0x50, 0x41, 0x63

   \              0x6F 0x66    

   \              0x74 0x50    

   \              0x41 0x63
   \       0x18   0x6B 0x5C          DC8 0x6B, 0x5C, 0x61, 0x74, 0x6D, 0x65, 0x6C, 0x2D

   \              0x61 0x74    

   \              0x6D 0x65    

   \              0x6C 0x2D
   \       0x20   0x73 0x6F          DC8 0x73, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65

   \              0x66 0x74    

   \              0x77 0x61    

   \              0x72 0x65
   \       0x28   0x2D 0x70          DC8 0x2D, 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65

   \              0x61 0x63    

   \              0x6B 0x61    

   \              0x67 0x65
   \       0x30   0x2D 0x32          DC8 0x2D, 0x32, 0x2E, 0x31, 0x37, 0x5C, 0x64, 0x72

   \              0x2E 0x31    

   \              0x37 0x5C    

   \              0x64 0x72
   \       0x38   0x69 0x76          DC8 0x69, 0x76, 0x65, 0x72, 0x73, 0x5C, 0x70, 0x65

   \              0x65 0x72    

   \              0x73 0x5C    

   \              0x70 0x65
   \       0x40   0x72 0x69          DC8 0x72, 0x69, 0x70, 0x68, 0x65, 0x72, 0x61, 0x6C

   \              0x70 0x68    

   \              0x65 0x72    

   \              0x61 0x6C
   \       0x48   0x73 0x5C          DC8 0x73, 0x5C, 0x70, 0x77, 0x6D, 0x63, 0x2E, 0x63

   \              0x70 0x77    

   \              0x6D 0x63    

   \              0x2E 0x63
   \       0x50   0x3A 0x35          DC8 0x3A, 0x35, 0x32, 0x39, 0x20, 0x70, 0x77, 0x6D

   \              0x32 0x39    

   \              0x20 0x70    

   \              0x77 0x6D
   \       0x58   0x3A 0x20          DC8 0x3A, 0x20, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6E

   \              0x65 0x78    

   \              0x74 0x65    

   \              0x72 0x6E
   \       0x60   0x61 0x6C          DC8 0x61, 0x6C, 0x20, 0x74, 0x72, 0x69, 0x67, 0x67

   \              0x20 0x74    

   \              0x72 0x69    

   \              0x67 0x67
   \       0x68   0x65 0x72          DC8 0x65, 0x72, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x63

   \              0x20 0x66    

   \              0x6F 0x72    

   \              0x20 0x63
   \       0x70   0x68 0x61          DC8 0x68, 0x61, 0x6E, 0x6E, 0x65, 0x6C, 0x20, 0x25

   \              0x6E 0x6E    

   \              0x65 0x6C    

   \              0x20 0x25
   \       0x78   0x75 0x2C          DC8 0x75, 0x2C, 0x20, 0x76, 0x61, 0x6C, 0x75, 0x65

   \              0x20 0x76    

   \              0x61 0x6C    

   \              0x75 0x65
   \       0x80   0x20 0x25          DC8 0x20, 0x25, 0x30, 0x38, 0x78, 0x0A, 0x0D, 0

   \              0x30 0x38    

   \              0x78 0x0A    

   \              0x0D 0x00

   \                                 In section .rodata, align 2
   \        0x0   0x30 0x00          DC8 "0"

   \                                 In section .rodata, align 4
   \                     ?_21:
   \        0x0   0x2D 0x44          DC8 0x2D, 0x44, 0x2D, 0x20, 0x43, 0x3A, 0x5C, 0x77

   \              0x2D 0x20    

   \              0x43 0x3A    

   \              0x5C 0x77
   \        0x8   0x6F 0x72          DC8 0x6F, 0x72, 0x6B, 0x5C, 0x41, 0x74, 0x6D, 0x65

   \              0x6B 0x5C    

   \              0x41 0x74    

   \              0x6D 0x65
   \       0x10   0x6C 0x53          DC8 0x6C, 0x53, 0x6F, 0x66, 0x74, 0x50, 0x41, 0x63

   \              0x6F 0x66    

   \              0x74 0x50    

   \              0x41 0x63
   \       0x18   0x6B 0x5C          DC8 0x6B, 0x5C, 0x61, 0x74, 0x6D, 0x65, 0x6C, 0x2D

   \              0x61 0x74    

   \              0x6D 0x65    

   \              0x6C 0x2D
   \       0x20   0x73 0x6F          DC8 0x73, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65

   \              0x66 0x74    

   \              0x77 0x61    

   \              0x72 0x65
   \       0x28   0x2D 0x70          DC8 0x2D, 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65

   \              0x61 0x63    

   \              0x6B 0x61    

   \              0x67 0x65
   \       0x30   0x2D 0x32          DC8 0x2D, 0x32, 0x2E, 0x31, 0x37, 0x5C, 0x64, 0x72

   \              0x2E 0x31    

   \              0x37 0x5C    

   \              0x64 0x72
   \       0x38   0x69 0x76          DC8 0x69, 0x76, 0x65, 0x72, 0x73, 0x5C, 0x70, 0x65

   \              0x65 0x72    

   \              0x73 0x5C    

   \              0x70 0x65
   \       0x40   0x72 0x69          DC8 0x72, 0x69, 0x70, 0x68, 0x65, 0x72, 0x61, 0x6C

   \              0x70 0x68    

   \              0x65 0x72    

   \              0x61 0x6C
   \       0x48   0x73 0x5C          DC8 0x73, 0x5C, 0x70, 0x77, 0x6D, 0x63, 0x2E, 0x63

   \              0x70 0x77    

   \              0x6D 0x63    

   \              0x2E 0x63
   \       0x50   0x3A 0x35          DC8 0x3A, 0x35, 0x34, 0x37, 0x20, 0x70, 0x77, 0x6D

   \              0x34 0x37    

   \              0x20 0x70    

   \              0x77 0x6D
   \       0x58   0x3A 0x20          DC8 0x3A, 0x20, 0x6C, 0x65, 0x61, 0x64, 0x69, 0x6E

   \              0x6C 0x65    

   \              0x61 0x64    

   \              0x69 0x6E
   \       0x60   0x67 0x2D          DC8 0x67, 0x2D, 0x65, 0x64, 0x67, 0x65, 0x20, 0x62

   \              0x65 0x64    

   \              0x67 0x65    

   \              0x20 0x62
   \       0x68   0x6C 0x61          DC8 0x6C, 0x61, 0x6E, 0x6B, 0x69, 0x6E, 0x67, 0x20

   \              0x6E 0x6B    

   \              0x69 0x6E    

   \              0x67 0x20
   \       0x70   0x63 0x68          DC8 0x63, 0x68, 0x61, 0x6E, 0x6E, 0x65, 0x6C, 0x20

   \              0x61 0x6E    

   \              0x6E 0x65    

   \              0x6C 0x20
   \       0x78   0x25 0x75          DC8 0x25, 0x75, 0x2C, 0x20, 0x76, 0x61, 0x6C, 0x75

   \              0x2C 0x20    

   \              0x76 0x61    

   \              0x6C 0x75
   \       0x80   0x65 0x20          DC8 0x65, 0x20, 0x25, 0x30, 0x38, 0x78, 0x0A, 0x0D

   \              0x25 0x30    

   \              0x38 0x78    

   \              0x0A 0x0D
   \       0x88   0x00               DC8 0
   \       0x89   0x00 0x00          DC8 0, 0, 0

   \              0x00
    561          #endif /* CONFIG_HAVE_PWMC_EXTERNAL_TRIGGER */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   _pwm_dma_callback_wrapper
        16   -> callback_call
        16   -> dma_free_channel
        16   -> dma_is_transfer_done
      16   pwmc_configure_channel
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
        16   -> printf
       0   pwmc_configure_clocks
      24   pwmc_configure_comparison_unit
        24   -> __aeabi_assert
        24   -> __iar_EmptyStepPoint
       0   pwmc_configure_event_line_mode
      16   pwmc_configure_external_trigger
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
        16   -> printf
      16   pwmc_configure_leading_edge_blanking
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
        16   -> printf
       0   pwmc_configure_spread_spectrum_mode
      16   pwmc_configure_stepper_motor_mode
        16   -> printf
      24   pwmc_configure_sync_channels
        24   -> __aeabi_assert
        24   -> __iar_EmptyStepPoint
        24   -> printf
       0   pwmc_disable_channel
       0   pwmc_disable_channel_it
       0   pwmc_disable_it
      24   pwmc_disable_output_override
        24   -> __aeabi_assert
        24   -> __iar_EmptyStepPoint
        24   -> printf
      64   pwmc_dma_duty_cycle
        64   -> __aeabi_assert
        64   -> __aeabi_memset
        64   -> __iar_EmptyStepPoint
        64   -> cache_clean_region
        64   -> callback_set
        64   -> dma_configure_transfer
        64   -> dma_reset_channel
        64   -> dma_set_callback
        64   -> dma_start_transfer
       0   pwmc_enable_channel
       0   pwmc_enable_channel_it
      24   pwmc_enable_fault_protection
        24   -> __aeabi_assert
        24   -> __iar_EmptyStepPoint
       0   pwmc_enable_it
       0   pwmc_fault_clear
       0   pwmc_get_fault_status
       0   pwmc_get_it_status1
       0   pwmc_get_it_status2
       0   pwmc_get_write_protection_status
      32   pwmc_output_dead_time
        32   -> __aeabi_assert
        32   -> __iar_EmptyStepPoint
        32   -> printf
      32   pwmc_output_override
        32   -> __aeabi_assert
        32   -> __iar_EmptyStepPoint
        32   -> printf
      24   pwmc_set_dma_finished_callback
        24   -> __aeabi_assert
        24   -> __iar_EmptyStepPoint
        24   -> callback_copy
        24   -> dma_allocate_channel
        24   -> get_pwm_id_from_addr
      16   pwmc_set_duty_cycle
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
       0   pwmc_set_fault_mode
       0   pwmc_set_fault_protection
       0   pwmc_set_fault_protection_to_hiz
      16   pwmc_set_period
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
       0   pwmc_set_sync_channels_update_period
       0   pwmc_set_sync_channels_update_period_update
       0   pwmc_set_sync_channels_update_unlock
       0   pwmc_set_write_protection_control


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable15
       4  ??DataTable15_1
       4  ??DataTable15_10
       4  ??DataTable15_11
       4  ??DataTable15_12
       4  ??DataTable15_13
       4  ??DataTable15_14
       4  ??DataTable15_15
       4  ??DataTable15_16
       4  ??DataTable15_17
       4  ??DataTable15_18
       4  ??DataTable15_19
       4  ??DataTable15_2
       4  ??DataTable15_20
       4  ??DataTable15_21
       4  ??DataTable15_22
       4  ??DataTable15_23
       4  ??DataTable15_24
       4  ??DataTable15_3
       4  ??DataTable15_4
       4  ??DataTable15_5
       4  ??DataTable15_6
       4  ??DataTable15_7
       4  ??DataTable15_8
       4  ??DataTable15_9
       8  ?_0
      80  ?_1
     128  ?_10
     128  ?_11
      32  ?_12
      20  ?_13
     140  ?_14
       8  ?_15
       4  ?_16
       8  ?_17
       8  ?_18
     136  ?_19
      60  ?_2
       2  ?_20
     140  ?_21
     124  ?_3
      40  ?_4
     184  ?_5
      44  ?_6
      36  ?_7
      16  ?_8
     128  ?_9
      60  _pwm_dma_callback_wrapper
       4  pwm_dma_channel
       8  pwmc_cb
     192  pwmc_configure_channel
       8  pwmc_configure_clocks
     116  pwmc_configure_comparison_unit
       8  pwmc_configure_event_line_mode
     112  pwmc_configure_external_trigger
     112  pwmc_configure_leading_edge_blanking
      32  pwmc_configure_spread_spectrum_mode
     128  pwmc_configure_stepper_motor_mode
     144  pwmc_configure_sync_channels
      16  pwmc_disable_channel
      16  pwmc_disable_channel_it
      12  pwmc_disable_it
     200  pwmc_disable_output_override
     220  pwmc_dma_duty_cycle
      16  pwmc_enable_channel
      16  pwmc_enable_channel_it
     112  pwmc_enable_fault_protection
      12  pwmc_enable_it
       8  pwmc_fault_clear
       8  pwmc_get_fault_status
       8  pwmc_get_it_status1
       8  pwmc_get_it_status2
       8  pwmc_get_write_protection_status
     304  pwmc_output_dead_time
     272  pwmc_output_override
     108  pwmc_set_dma_finished_callback
     188  pwmc_set_duty_cycle
       8  pwmc_set_fault_mode
       8  pwmc_set_fault_protection
       8  pwmc_set_fault_protection_to_hiz
     132  pwmc_set_period
      40  pwmc_set_sync_channels_update_period
      20  pwmc_set_sync_channels_update_period_update
      12  pwmc_set_sync_channels_update_unlock
       8  pwmc_set_write_protection_control

 
    12 bytes in section .bss
 1'474 bytes in section .rodata
 2'780 bytes in section SOFTPACK
 
 2'780 bytes of CODE  memory
 1'474 bytes of CONST memory
    12 bytes of DATA  memory

Errors: none
Warnings: none
