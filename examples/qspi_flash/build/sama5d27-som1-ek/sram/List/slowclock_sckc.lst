###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.1.245/W32 for ARM         18/Feb/2021  16:03:19
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\peripherals\slowclock_sckc.c
#    Command line      =
#        -f C:\Users\c40450\AppData\Local\Temp\EWB438.tmp
#        (C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\peripherals\slowclock_sckc.c
#        -D "SOFTPACK_VERSION=\"2.17\"" -D TRACE_LEVEL=5 -D VARIANT_SRAM -D
#        CONFIG_ARCH_ARMV7A -D CONFIG_ARCH_ARM -D CONFIG_SOC_SAMA5D2 -D
#        CONFIG_CHIP_SAMA5D27 -D CONFIG_PACKAGE_289PIN -D
#        CONFIG_BOARD_SAMA5D27_SOM1_EK -D CONFIG_HAVE_AIC5 -D
#        CONFIG_HAVE_FLEXCOM -D CONFIG_HAVE_PIO4 -D CONFIG_HAVE_PIO4_SECURE -D
#        CONFIG_HAVE_QSPI -D CONFIG_HAVE_QSPI_DMA -D CONFIG_HAVE_NFC -D
#        CONFIG_HAVE_PIT -D CONFIG_HAVE_SMC -D CONFIG_HAVE_SMC_SCRAMBLING -D
#        CONFIG_HAVE_GMAC_QUEUES -D CONFIG_HAVE_MPDDRC -D
#        CONFIG_HAVE_MPDDRC_DATA_PATH -D CONFIG_HAVE_MPDDRC_IO_CALIBRATION -D
#        CONFIG_HAVE_MPDDRC_DDR2 -D CONFIG_HAVE_MPDDRC_LPDDR2 -D
#        CONFIG_HAVE_MPDDRC_DDR3 -D CONFIG_HAVE_MPDDRC_LPDDR3 -D
#        CONFIG_HAVE_ADC_SETTLING_TIME -D CONFIG_HAVE_ADC_DIFF_INPUT -D
#        CONFIG_HAVE_ADC_SEQ_R2 -D CONFIG_HAVE_PMC_FAST_STARTUP -D
#        CONFIG_HAVE_PMC_GENERATED_CLOCKS -D CONFIG_HAVE_PMC_AUDIO_CLOCK -D
#        CONFIG_HAVE_PMC_PLLADIV2 -D CONFIG_HAVE_PMC_H32MXDIV -D
#        CONFIG_HAVE_PMC_UPLL_BIAS -D CONFIG_HAVE_SCKC -D CONFIG_HAVE_PWMC_DMA
#        -D CONFIG_HAVE_PWMC_SPREAD_SPECTRUM -D
#        CONFIG_HAVE_PWMC_EXTERNAL_TRIGGER -D CONFIG_HAVE_PWMC_FAULT_PROT_HIZ
#        -D CONFIG_HAVE_PWMC_STEPPER_MOTOR -D CONFIG_HAVE_PWMC_CMP_UNIT -D
#        CONFIG_HAVE_PWMC_SYNC_MODE -D CONFIG_HAVE_PWMC_OOV -D
#        CONFIG_HAVE_PWMC_FMODE -D CONFIG_HAVE_PWMC_WP -D
#        CONFIG_HAVE_PWMC_DTIME -D CONFIG_HAVE_PWMC_ELINE -D CONFIG_HAVE_SFRBU
#        -D CONFIG_HAVE_L2CC -D CONFIG_HAVE_SAIC -D CONFIG_HAVE_XDMAC -D
#        CONFIG_HAVE_XDMAC_DATA_WIDTH_DWORD -D CONFIG_HAVE_TRNG -D
#        CONFIG_HAVE_SECUMOD -D CONFIG_HAVE_SFC -D CONFIG_HAVE_PWMC -D
#        CONFIG_HAVE_SECURE_MATRIX -D CONFIG_HAVE_DDR2_W971GG6SB -D
#        CONFIG_HAVE_RSTC_CONFIGURABLE_USER_RESET -D CONFIG_HAVE_TC_FAULT_MODE
#        -D CONFIG_HAVE_TC_DMA_MODE -D CONFIG_HAVE_RTC_CALIBRATION -D
#        CONFIG_HAVE_RTC_MODE_PERSIAN -D CONFIG_HAVE_RTC_MODE_UTC -D
#        CONFIG_HAVE_RTC_TAMPER -D CONFIG_HAVE_SHDWC -D CONFIG_HAVE_SPI -D
#        CONFIG_HAVE_SPI_FIFO -D CONFIG_HAVE_SPI_NOR -D CONFIG_HAVE_MMU -D
#        CONFIG_HAVE_L1CACHE -D CONFIG_HAVE_L2CACHE -D CONFIG_HAVE_SPI_BUS -D
#        CONFIG_HAVE_UART -D CONFIG_HAVE_SERIALD_UART -D CONFIG_HAVE_USART -D
#        CONFIG_HAVE_USART_FIFO --preprocess
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\qspi_flash\build\sama5d27-som1-ek\sram\List
#        -lC
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\qspi_flash\build\sama5d27-som1-ek\sram\List
#        --diag_suppress Pa050 -o
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\qspi_flash\build\sama5d27-som1-ek\sram\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-A5 -e --fpu=VFPv4_D16 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\qspi_flash\..\..\arch\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\qspi_flash\..\..\utils\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\qspi_flash\..\..\target\common\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\qspi_flash\..\..\target\sama5d2\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\qspi_flash\..\..\drivers\
#        -I
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\qspi_flash\..\..\lib\
#        --section .text=SOFTPACK --cpu_mode arm -On)
#    Locale            =  C
#    List file         =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\qspi_flash\build\sama5d27-som1-ek\sram\List\slowclock_sckc.lst
#    Object file       =
#        C:\work\AtmelSoftPAck\atmel-software-package-2.17\examples\qspi_flash\build\sama5d27-som1-ek\sram\Obj\slowclock_sckc.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\work\AtmelSoftPAck\atmel-software-package-2.17\drivers\peripherals\slowclock_sckc.c
      1          /* ----------------------------------------------------------------------------
      2           *         SAM Software Package License
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2015, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          #include "chip.h"
     31          
     32          #include "peripherals/slowclock.h"
     33          
     34          /*----------------------------------------------------------------------------
     35           *        Exported functions
     36           *----------------------------------------------------------------------------*/
     37          

   \                                 In section SOFTPACK, align 4, keep-with-next
     38          RAMCODE bool slowclock_is_internal(enum _slowclock_domain domain)
     39          {
   \                     slowclock_is_internal:
   \        0x0   0xE1B0'1000        MOVS     R1,R0
     40          	return (SCKC->SCKC_CR & SCKC_CR_OSCSEL) != SCKC_CR_OSCSEL;
   \        0x4   0x....'....        LDR      R0,??DataTable2  ;; 0xf8048050
   \        0x8   0xE590'0000        LDR      R0,[R0, #+0]
   \        0xC   0xE1B0'01A0        LSRS     R0,R0,#+3
   \       0x10   0xE210'0001        ANDS     R0,R0,#0x1
   \       0x14   0xE230'0001        EORS     R0,R0,#0x1
   \       0x18   0xE6EF'0070        UXTB     R0,R0
   \       0x1C   0xE12F'FF1E        BX       LR               ;; return
     41          }
     42          

   \                                 In section SOFTPACK, align 4, keep-with-next
     43          RAMCODE void slowclock_select_internal(enum _slowclock_domain domain)
     44          {
   \                     slowclock_select_internal:
   \        0x0   0xE92D'401C        PUSH     {R2-R4,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
     45          	volatile int count;
     46          
     47          	if (slowclock_is_internal(domain))
   \        0x8   0xE1B0'0004        MOVS     R0,R4
   \        0xC   0xE6EF'0070        UXTB     R0,R0
   \       0x10   0x....'....        BL       slowclock_is_internal
   \       0x14   0xE350'0000        CMP      R0,#+0
   \       0x18   0x1A00'000C        BNE      ??slowclock_select_internal_0
     48          		return;
     49          
     50          #ifdef SCKC_CR_RCEN
     51          	/* enable external OSC 32 kHz */
     52          	SCKC->SCKC_CR |= SCKC_CR_RCEN;
     53          	/* Wait 32,768 Hz Startup Time for clock stabilization (software loop) */
     54          	for (count = 0; count < 0x1000; count++);
     55          #endif
     56          
     57          	/* switch from extenal OSC 32kHz to internal RC 32 kHz */
     58          	/* switch slow clock source to internal OSC 32 kHz */
     59          	SCKC->SCKC_CR = (SCKC->SCKC_CR & ~SCKC_CR_OSCSEL) | SCKC_CR_OSCSEL_RC;
   \                     ??slowclock_select_internal_1:
   \       0x1C   0x....'....        LDR      R0,??DataTable2  ;; 0xf8048050
   \       0x20   0xE590'1000        LDR      R1,[R0, #+0]
   \       0x24   0xE3D1'1008        BICS     R1,R1,#0x8
   \       0x28   0xE580'1000        STR      R1,[R0, #+0]
     60          
     61          	/* Wait 5 slow clock cycles for internal resynchronization */
     62          	for (count = 0; count < 0x1000; count++);
   \       0x2C   0xE3A0'0000        MOV      R0,#+0
   \       0x30   0xE58D'0000        STR      R0,[SP, #+0]
   \                     ??slowclock_select_internal_2:
   \       0x34   0xE59D'0000        LDR      R0,[SP, #+0]
   \       0x38   0xE350'0D40        CMP      R0,#+4096
   \       0x3C   0xAA00'0003        BGE      ??slowclock_select_internal_3
   \       0x40   0xE59D'0000        LDR      R0,[SP, #+0]
   \       0x44   0xE290'0001        ADDS     R0,R0,#+1
   \       0x48   0xE58D'0000        STR      R0,[SP, #+0]
   \       0x4C   0xEAFF'FFF8        B        ??slowclock_select_internal_2
     63          
     64          #ifdef SCKC_CR_OSC32EN
     65          	if ((SCKC->SCKC_CR & SCKC_CR_OSC32EN) == SCKC_CR_OSC32EN)
     66          		SCKC->SCKC_CR &= ~SCKC_CR_OSC32EN;
     67          #endif
     68          }
   \                     ??slowclock_select_internal_3:
   \                     ??slowclock_select_internal_0:
   \       0x50   0xE8BD'8013        POP      {R0,R1,R4,PC}    ;; return
     69          

   \                                 In section SOFTPACK, align 4, keep-with-next
     70          RAMCODE void slowclock_select_external(enum _slowclock_domain domain)
     71          {
   \                     slowclock_select_external:
   \        0x0   0xE92D'401C        PUSH     {R2-R4,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
     72          	volatile int count;
     73          
     74          	if (!slowclock_is_internal(domain))
   \        0x8   0xE1B0'0004        MOVS     R0,R4
   \        0xC   0xE6EF'0070        UXTB     R0,R0
   \       0x10   0x....'....        BL       slowclock_is_internal
   \       0x14   0xE350'0000        CMP      R0,#+0
   \       0x18   0x0A00'000C        BEQ      ??slowclock_select_external_0
     75          		return;
     76          
     77          #ifdef SCKC_CR_OSC32EN
     78          	/* enable external OSC 32 kHz */
     79          	SCKC->SCKC_CR |= SCKC_CR_OSC32EN;
     80          	/* Wait 32,768 Hz Startup Time for clock stabilization (software loop) */
     81          	for (count = 0; count < 0x1000; count++);
     82          #endif
     83          
     84          	/* switch from internal RC 32kHz to external OSC 32 kHz */
     85          	SCKC->SCKC_CR = (SCKC->SCKC_CR & ~SCKC_CR_OSCSEL) | SCKC_CR_OSCSEL_XTAL;
   \                     ??slowclock_select_external_1:
   \       0x1C   0x....'....        LDR      R0,??DataTable2  ;; 0xf8048050
   \       0x20   0xE590'1000        LDR      R1,[R0, #+0]
   \       0x24   0xE391'1008        ORRS     R1,R1,#0x8
   \       0x28   0xE580'1000        STR      R1,[R0, #+0]
     86          
     87          	/* Wait 5 slow clock cycles for internal resynchronization */
     88          	for (count = 0; count < 0x1000; count++);
   \       0x2C   0xE3A0'0000        MOV      R0,#+0
   \       0x30   0xE58D'0000        STR      R0,[SP, #+0]
   \                     ??slowclock_select_external_2:
   \       0x34   0xE59D'0000        LDR      R0,[SP, #+0]
   \       0x38   0xE350'0D40        CMP      R0,#+4096
   \       0x3C   0xAA00'0003        BGE      ??slowclock_select_external_3
   \       0x40   0xE59D'0000        LDR      R0,[SP, #+0]
   \       0x44   0xE290'0001        ADDS     R0,R0,#+1
   \       0x48   0xE58D'0000        STR      R0,[SP, #+0]
   \       0x4C   0xEAFF'FFF8        B        ??slowclock_select_external_2
     89          
     90          #ifdef SCKC_CR_RCEN
     91          	if ((SCKC->SCKC_CR & SCKC_CR_RCEN) == SCKC_CR_RCEN)
     92          		SCKC->SCKC_CR &= ~SCKC_CR_RCEN;
     93          #endif
     94          }
   \                     ??slowclock_select_external_3:
   \                     ??slowclock_select_external_0:
   \       0x50   0xE8BD'8013        POP      {R0,R1,R4,PC}    ;; return
     95          

   \                                 In section SOFTPACK, align 4, keep-with-next
     96          uint32_t slowclock_get_clock(enum _slowclock_domain domain)
     97          {
   \                     slowclock_get_clock:
   \        0x0   0xE92D'4010        PUSH     {R4,LR}
   \        0x4   0xE1B0'4000        MOVS     R4,R0
     98          	if (slowclock_is_internal(domain))
   \        0x8   0xE1B0'0004        MOVS     R0,R4
   \        0xC   0xE6EF'0070        UXTB     R0,R0
   \       0x10   0x....'....        BL       slowclock_is_internal
   \       0x14   0xE350'0000        CMP      R0,#+0
   \       0x18   0x0A00'0001        BEQ      ??slowclock_get_clock_0
     99          		return 32000;
   \       0x1C   0xE3A0'0C7D        MOV      R0,#+32000
   \       0x20   0xEA00'0000        B        ??slowclock_get_clock_1
    100          	else
    101          		return 32768;
   \                     ??slowclock_get_clock_0:
   \       0x24   0xE3A0'0C80        MOV      R0,#+32768
   \                     ??slowclock_get_clock_1:
   \       0x28   0xE8BD'8010        POP      {R4,PC}          ;; return
    102          }
    103          
    104          

   \                                 In section SOFTPACK, align 4, keep-with-next
    105          RAMCODE void slowclock_set_bypass(bool bypass)
    106          {
    107          #ifdef SCKC_CR_OSC32BYP
    108          	uint32_t mask = bypass ? SCKC_CR_OSC32BYP : SCKC_CR_OSC32EN;
    109          
    110          	/* set bypass or not */
    111          	SCKC->SCKC_CR = (SCKC->SCKC_CR & ~(SCKC_CR_OSC32BYP | SCKC_CR_OSC32EN)) | mask;
    112          #endif
    113          }
   \                     slowclock_set_bypass:
   \        0x0   0xE12F'FF1E        BX       LR               ;; return

   \                                 In section SOFTPACK, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0xF804'8050        DC32     0xf8048050

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   slowclock_get_clock
         8   -> slowclock_is_internal
       0   slowclock_is_internal
      16   slowclock_select_external
        16   -> slowclock_is_internal
      16   slowclock_select_internal
        16   -> slowclock_is_internal
       0   slowclock_set_bypass


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
      44  slowclock_get_clock
      32  slowclock_is_internal
      84  slowclock_select_external
      84  slowclock_select_internal
       4  slowclock_set_bypass

 
 252 bytes in section SOFTPACK
 
 252 bytes of CODE memory

Errors: none
Warnings: none
